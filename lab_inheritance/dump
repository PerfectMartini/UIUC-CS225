
test_slicing:     file format elf32-i386


Disassembly of section .init:

0804925c <_init>:
 804925c:	53                   	push   %ebx
 804925d:	83 ec 08             	sub    $0x8,%esp
 8049260:	e8 eb 04 00 00       	call   8049750 <__x86.get_pc_thunk.bx>
 8049265:	81 c3 9b ad 00 00    	add    $0xad9b,%ebx
 804926b:	8b 83 fc ff ff ff    	mov    -0x4(%ebx),%eax
 8049271:	85 c0                	test   %eax,%eax
 8049273:	74 05                	je     804927a <_init+0x1e>
 8049275:	e8 a6 00 00 00       	call   8049320 <__gmon_start__@plt>
 804927a:	83 c4 08             	add    $0x8,%esp
 804927d:	5b                   	pop    %ebx
 804927e:	c3                   	ret    

Disassembly of section .plt:

08049280 <_ZSt20__throw_length_errorPKc@plt-0x10>:
 8049280:	ff 35 04 40 05 08    	pushl  0x8054004
 8049286:	ff 25 08 40 05 08    	jmp    *0x8054008
 804928c:	00 00                	add    %al,(%eax)
	...

08049290 <_ZSt20__throw_length_errorPKc@plt>:
 8049290:	ff 25 0c 40 05 08    	jmp    *0x805400c
 8049296:	68 00 00 00 00       	push   $0x0
 804929b:	e9 e0 ff ff ff       	jmp    8049280 <_init+0x24>

080492a0 <png_get_valid@plt>:
 80492a0:	ff 25 10 40 05 08    	jmp    *0x8054010
 80492a6:	68 08 00 00 00       	push   $0x8
 80492ab:	e9 d0 ff ff ff       	jmp    8049280 <_init+0x24>

080492b0 <png_write_info@plt>:
 80492b0:	ff 25 14 40 05 08    	jmp    *0x8054014
 80492b6:	68 10 00 00 00       	push   $0x10
 80492bb:	e9 c0 ff ff ff       	jmp    8049280 <_init+0x24>

080492c0 <_ZNSsC1Ev@plt>:
 80492c0:	ff 25 18 40 05 08    	jmp    *0x8054018
 80492c6:	68 18 00 00 00       	push   $0x18
 80492cb:	e9 b0 ff ff ff       	jmp    8049280 <_init+0x24>

080492d0 <png_destroy_read_struct@plt>:
 80492d0:	ff 25 1c 40 05 08    	jmp    *0x805401c
 80492d6:	68 20 00 00 00       	push   $0x20
 80492db:	e9 a0 ff ff ff       	jmp    8049280 <_init+0x24>

080492e0 <_ZNSolsEi@plt>:
 80492e0:	ff 25 20 40 05 08    	jmp    *0x8054020
 80492e6:	68 28 00 00 00       	push   $0x28
 80492eb:	e9 90 ff ff ff       	jmp    8049280 <_init+0x24>

080492f0 <__cxa_atexit@plt>:
 80492f0:	ff 25 24 40 05 08    	jmp    *0x8054024
 80492f6:	68 30 00 00 00       	push   $0x30
 80492fb:	e9 80 ff ff ff       	jmp    8049280 <_init+0x24>

08049300 <png_set_IHDR@plt>:
 8049300:	ff 25 28 40 05 08    	jmp    *0x8054028
 8049306:	68 38 00 00 00       	push   $0x38
 804930b:	e9 70 ff ff ff       	jmp    8049280 <_init+0x24>

08049310 <png_sig_cmp@plt>:
 8049310:	ff 25 2c 40 05 08    	jmp    *0x805402c
 8049316:	68 40 00 00 00       	push   $0x40
 804931b:	e9 60 ff ff ff       	jmp    8049280 <_init+0x24>

08049320 <__gmon_start__@plt>:
 8049320:	ff 25 30 40 05 08    	jmp    *0x8054030
 8049326:	68 48 00 00 00       	push   $0x48
 804932b:	e9 50 ff ff ff       	jmp    8049280 <_init+0x24>

08049330 <_ZNKSs5c_strEv@plt>:
 8049330:	ff 25 34 40 05 08    	jmp    *0x8054034
 8049336:	68 50 00 00 00       	push   $0x50
 804933b:	e9 40 ff ff ff       	jmp    8049280 <_init+0x24>

08049340 <_ZdlPv@plt>:
 8049340:	ff 25 38 40 05 08    	jmp    *0x8054038
 8049346:	68 58 00 00 00       	push   $0x58
 804934b:	e9 30 ff ff ff       	jmp    8049280 <_init+0x24>

08049350 <__cxa_rethrow@plt>:
 8049350:	ff 25 3c 40 05 08    	jmp    *0x805403c
 8049356:	68 60 00 00 00       	push   $0x60
 804935b:	e9 20 ff ff ff       	jmp    8049280 <_init+0x24>

08049360 <_ZNKSs4sizeEv@plt>:
 8049360:	ff 25 40 40 05 08    	jmp    *0x8054040
 8049366:	68 68 00 00 00       	push   $0x68
 804936b:	e9 10 ff ff ff       	jmp    8049280 <_init+0x24>

08049370 <_ZNSt8ios_base4InitC1Ev@plt>:
 8049370:	ff 25 44 40 05 08    	jmp    *0x8054044
 8049376:	68 70 00 00 00       	push   $0x70
 804937b:	e9 00 ff ff ff       	jmp    8049280 <_init+0x24>

08049380 <png_set_palette_to_rgb@plt>:
 8049380:	ff 25 48 40 05 08    	jmp    *0x8054048
 8049386:	68 78 00 00 00       	push   $0x78
 804938b:	e9 f0 fe ff ff       	jmp    8049280 <_init+0x24>

08049390 <png_create_info_struct@plt>:
 8049390:	ff 25 4c 40 05 08    	jmp    *0x805404c
 8049396:	68 80 00 00 00       	push   $0x80
 804939b:	e9 e0 fe ff ff       	jmp    8049280 <_init+0x24>

080493a0 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_h@plt>:
 80493a0:	ff 25 50 40 05 08    	jmp    *0x8054050
 80493a6:	68 88 00 00 00       	push   $0x88
 80493ab:	e9 d0 fe ff ff       	jmp    8049280 <_init+0x24>

080493b0 <png_create_write_struct@plt>:
 80493b0:	ff 25 54 40 05 08    	jmp    *0x8054054
 80493b6:	68 90 00 00 00       	push   $0x90
 80493bb:	e9 c0 fe ff ff       	jmp    8049280 <_init+0x24>

080493c0 <__libc_start_main@plt>:
 80493c0:	ff 25 58 40 05 08    	jmp    *0x8054058
 80493c6:	68 98 00 00 00       	push   $0x98
 80493cb:	e9 b0 fe ff ff       	jmp    8049280 <_init+0x24>

080493d0 <png_get_image_height@plt>:
 80493d0:	ff 25 5c 40 05 08    	jmp    *0x805405c
 80493d6:	68 a0 00 00 00       	push   $0xa0
 80493db:	e9 a0 fe ff ff       	jmp    8049280 <_init+0x24>

080493e0 <__assert_fail@plt>:
 80493e0:	ff 25 60 40 05 08    	jmp    *0x8054060
 80493e6:	68 a8 00 00 00       	push   $0xa8
 80493eb:	e9 90 fe ff ff       	jmp    8049280 <_init+0x24>

080493f0 <png_get_image_width@plt>:
 80493f0:	ff 25 64 40 05 08    	jmp    *0x8054064
 80493f6:	68 b0 00 00 00       	push   $0xb0
 80493fb:	e9 80 fe ff ff       	jmp    8049280 <_init+0x24>

08049400 <_ZNSt8ios_base4InitD1Ev@plt>:
 8049400:	ff 25 68 40 05 08    	jmp    *0x8054068
 8049406:	68 b8 00 00 00       	push   $0xb8
 804940b:	e9 70 fe ff ff       	jmp    8049280 <_init+0x24>

08049410 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>:
 8049410:	ff 25 6c 40 05 08    	jmp    *0x805406c
 8049416:	68 c0 00 00 00       	push   $0xc0
 804941b:	e9 60 fe ff ff       	jmp    8049280 <_init+0x24>

08049420 <png_write_end@plt>:
 8049420:	ff 25 70 40 05 08    	jmp    *0x8054070
 8049426:	68 c8 00 00 00       	push   $0xc8
 804942b:	e9 50 fe ff ff       	jmp    8049280 <_init+0x24>

08049430 <png_write_row@plt>:
 8049430:	ff 25 74 40 05 08    	jmp    *0x8054074
 8049436:	68 d0 00 00 00       	push   $0xd0
 804943b:	e9 40 fe ff ff       	jmp    8049280 <_init+0x24>

08049440 <_ZNSsD1Ev@plt>:
 8049440:	ff 25 78 40 05 08    	jmp    *0x8054078
 8049446:	68 d8 00 00 00       	push   $0xd8
 804944b:	e9 30 fe ff ff       	jmp    8049280 <_init+0x24>

08049450 <png_init_io@plt>:
 8049450:	ff 25 7c 40 05 08    	jmp    *0x805407c
 8049456:	68 e0 00 00 00       	push   $0xe0
 804945b:	e9 20 fe ff ff       	jmp    8049280 <_init+0x24>

08049460 <sqrt@plt>:
 8049460:	ff 25 80 40 05 08    	jmp    *0x8054080
 8049466:	68 e8 00 00 00       	push   $0xe8
 804946b:	e9 10 fe ff ff       	jmp    8049280 <_init+0x24>

08049470 <fclose@plt>:
 8049470:	ff 25 84 40 05 08    	jmp    *0x8054084
 8049476:	68 f0 00 00 00       	push   $0xf0
 804947b:	e9 00 fe ff ff       	jmp    8049280 <_init+0x24>

08049480 <_setjmp@plt>:
 8049480:	ff 25 88 40 05 08    	jmp    *0x8054088
 8049486:	68 f8 00 00 00       	push   $0xf8
 804948b:	e9 f0 fd ff ff       	jmp    8049280 <_init+0x24>

08049490 <png_set_sig_bytes@plt>:
 8049490:	ff 25 8c 40 05 08    	jmp    *0x805408c
 8049496:	68 00 01 00 00       	push   $0x100
 804949b:	e9 e0 fd ff ff       	jmp    8049280 <_init+0x24>

080494a0 <png_get_channels@plt>:
 80494a0:	ff 25 90 40 05 08    	jmp    *0x8054090
 80494a6:	68 08 01 00 00       	push   $0x108
 80494ab:	e9 d0 fd ff ff       	jmp    8049280 <_init+0x24>

080494b0 <fopen@plt>:
 80494b0:	ff 25 94 40 05 08    	jmp    *0x8054094
 80494b6:	68 10 01 00 00       	push   $0x110
 80494bb:	e9 c0 fd ff ff       	jmp    8049280 <_init+0x24>

080494c0 <png_destroy_write_struct@plt>:
 80494c0:	ff 25 98 40 05 08    	jmp    *0x8054098
 80494c6:	68 18 01 00 00       	push   $0x118
 80494cb:	e9 b0 fd ff ff       	jmp    8049280 <_init+0x24>

080494d0 <_ZNSsC1EPKcRKSaIcE@plt>:
 80494d0:	ff 25 9c 40 05 08    	jmp    *0x805409c
 80494d6:	68 20 01 00 00       	push   $0x120
 80494db:	e9 a0 fd ff ff       	jmp    8049280 <_init+0x24>

080494e0 <png_get_color_type@plt>:
 80494e0:	ff 25 a0 40 05 08    	jmp    *0x80540a0
 80494e6:	68 28 01 00 00       	push   $0x128
 80494eb:	e9 90 fd ff ff       	jmp    8049280 <_init+0x24>

080494f0 <_ZNSt18basic_stringstreamIcSt11char_traitsIcESaIcEEC1ESt13_Ios_Openmode@plt>:
 80494f0:	ff 25 a4 40 05 08    	jmp    *0x80540a4
 80494f6:	68 30 01 00 00       	push   $0x130
 80494fb:	e9 80 fd ff ff       	jmp    8049280 <_init+0x24>

08049500 <_ZNSolsEj@plt>:
 8049500:	ff 25 a8 40 05 08    	jmp    *0x80540a8
 8049506:	68 38 01 00 00       	push   $0x138
 804950b:	e9 70 fd ff ff       	jmp    8049280 <_init+0x24>

08049510 <__cxa_pure_virtual@plt>:
 8049510:	ff 25 ac 40 05 08    	jmp    *0x80540ac
 8049516:	68 40 01 00 00       	push   $0x140
 804951b:	e9 60 fd ff ff       	jmp    8049280 <_init+0x24>

08049520 <_Znwj@plt>:
 8049520:	ff 25 b0 40 05 08    	jmp    *0x80540b0
 8049526:	68 48 01 00 00       	push   $0x148
 804952b:	e9 50 fd ff ff       	jmp    8049280 <_init+0x24>

08049530 <png_read_row@plt>:
 8049530:	ff 25 b4 40 05 08    	jmp    *0x80540b4
 8049536:	68 50 01 00 00       	push   $0x150
 804953b:	e9 40 fd ff ff       	jmp    8049280 <_init+0x24>

08049540 <png_read_end@plt>:
 8049540:	ff 25 b8 40 05 08    	jmp    *0x80540b8
 8049546:	68 58 01 00 00       	push   $0x158
 804954b:	e9 30 fd ff ff       	jmp    8049280 <_init+0x24>

08049550 <_Znaj@plt>:
 8049550:	ff 25 bc 40 05 08    	jmp    *0x80540bc
 8049556:	68 60 01 00 00       	push   $0x160
 804955b:	e9 20 fd ff ff       	jmp    8049280 <_init+0x24>

08049560 <_ZStlsIcSt11char_traitsIcESaIcEERSt13basic_ostreamIT_T0_ES7_RKSbIS4_S5_T1_E@plt>:
 8049560:	ff 25 c0 40 05 08    	jmp    *0x80540c0
 8049566:	68 68 01 00 00       	push   $0x168
 804956b:	e9 10 fd ff ff       	jmp    8049280 <_init+0x24>

08049570 <__stack_chk_fail@plt>:
 8049570:	ff 25 c4 40 05 08    	jmp    *0x80540c4
 8049576:	68 70 01 00 00       	push   $0x170
 804957b:	e9 00 fd ff ff       	jmp    8049280 <_init+0x24>

08049580 <_ZNSaIcED1Ev@plt>:
 8049580:	ff 25 c8 40 05 08    	jmp    *0x80540c8
 8049586:	68 78 01 00 00       	push   $0x178
 804958b:	e9 f0 fc ff ff       	jmp    8049280 <_init+0x24>

08049590 <png_read_update_info@plt>:
 8049590:	ff 25 cc 40 05 08    	jmp    *0x80540cc
 8049596:	68 80 01 00 00       	push   $0x180
 804959b:	e9 e0 fc ff ff       	jmp    8049280 <_init+0x24>

080495a0 <memmove@plt>:
 80495a0:	ff 25 d0 40 05 08    	jmp    *0x80540d0
 80495a6:	68 88 01 00 00       	push   $0x188
 80495ab:	e9 d0 fc ff ff       	jmp    8049280 <_init+0x24>

080495b0 <_ZdaPv@plt>:
 80495b0:	ff 25 d4 40 05 08    	jmp    *0x80540d4
 80495b6:	68 90 01 00 00       	push   $0x190
 80495bb:	e9 c0 fc ff ff       	jmp    8049280 <_init+0x24>

080495c0 <_ZNSolsEPFRSoS_E@plt>:
 80495c0:	ff 25 d8 40 05 08    	jmp    *0x80540d8
 80495c6:	68 98 01 00 00       	push   $0x198
 80495cb:	e9 b0 fc ff ff       	jmp    8049280 <_init+0x24>

080495d0 <png_create_read_struct@plt>:
 80495d0:	ff 25 dc 40 05 08    	jmp    *0x80540dc
 80495d6:	68 a0 01 00 00       	push   $0x1a0
 80495db:	e9 a0 fc ff ff       	jmp    8049280 <_init+0x24>

080495e0 <__cxa_end_catch@plt>:
 80495e0:	ff 25 e0 40 05 08    	jmp    *0x80540e0
 80495e6:	68 a8 01 00 00       	push   $0x1a8
 80495eb:	e9 90 fc ff ff       	jmp    8049280 <_init+0x24>

080495f0 <_ZSt17__throw_bad_allocv@plt>:
 80495f0:	ff 25 e4 40 05 08    	jmp    *0x80540e4
 80495f6:	68 b0 01 00 00       	push   $0x1b0
 80495fb:	e9 80 fc ff ff       	jmp    8049280 <_init+0x24>

08049600 <png_get_bit_depth@plt>:
 8049600:	ff 25 e8 40 05 08    	jmp    *0x80540e8
 8049606:	68 b8 01 00 00       	push   $0x1b8
 804960b:	e9 70 fc ff ff       	jmp    8049280 <_init+0x24>

08049610 <png_set_gray_to_rgb@plt>:
 8049610:	ff 25 ec 40 05 08    	jmp    *0x80540ec
 8049616:	68 c0 01 00 00       	push   $0x1c0
 804961b:	e9 60 fc ff ff       	jmp    8049280 <_init+0x24>

08049620 <_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_@plt>:
 8049620:	ff 25 f0 40 05 08    	jmp    *0x80540f0
 8049626:	68 c8 01 00 00       	push   $0x1c8
 804962b:	e9 50 fc ff ff       	jmp    8049280 <_init+0x24>

08049630 <__cxa_begin_catch@plt>:
 8049630:	ff 25 f4 40 05 08    	jmp    *0x80540f4
 8049636:	68 d0 01 00 00       	push   $0x1d0
 804963b:	e9 40 fc ff ff       	jmp    8049280 <_init+0x24>

08049640 <png_set_strip_16@plt>:
 8049640:	ff 25 f8 40 05 08    	jmp    *0x80540f8
 8049646:	68 d8 01 00 00       	push   $0x1d8
 804964b:	e9 30 fc ff ff       	jmp    8049280 <_init+0x24>

08049650 <_ZNSt18basic_stringstreamIcSt11char_traitsIcESaIcEED1Ev@plt>:
 8049650:	ff 25 fc 40 05 08    	jmp    *0x80540fc
 8049656:	68 e0 01 00 00       	push   $0x1e0
 804965b:	e9 20 fc ff ff       	jmp    8049280 <_init+0x24>

08049660 <_ZNSs6appendEPKcj@plt>:
 8049660:	ff 25 00 41 05 08    	jmp    *0x8054100
 8049666:	68 e8 01 00 00       	push   $0x1e8
 804966b:	e9 10 fc ff ff       	jmp    8049280 <_init+0x24>

08049670 <fread@plt>:
 8049670:	ff 25 04 41 05 08    	jmp    *0x8054104
 8049676:	68 f0 01 00 00       	push   $0x1f0
 804967b:	e9 00 fc ff ff       	jmp    8049280 <_init+0x24>

08049680 <png_set_expand@plt>:
 8049680:	ff 25 08 41 05 08    	jmp    *0x8054108
 8049686:	68 f8 01 00 00       	push   $0x1f8
 804968b:	e9 f0 fb ff ff       	jmp    8049280 <_init+0x24>

08049690 <_ZNSaIcEC1Ev@plt>:
 8049690:	ff 25 0c 41 05 08    	jmp    *0x805410c
 8049696:	68 00 02 00 00       	push   $0x200
 804969b:	e9 e0 fb ff ff       	jmp    8049280 <_init+0x24>

080496a0 <__gxx_personality_v0@plt>:
 80496a0:	ff 25 10 41 05 08    	jmp    *0x8054110
 80496a6:	68 08 02 00 00       	push   $0x208
 80496ab:	e9 d0 fb ff ff       	jmp    8049280 <_init+0x24>

080496b0 <png_set_tRNS_to_alpha@plt>:
 80496b0:	ff 25 14 41 05 08    	jmp    *0x8054114
 80496b6:	68 10 02 00 00       	push   $0x210
 80496bb:	e9 c0 fb ff ff       	jmp    8049280 <_init+0x24>

080496c0 <_ZNKSt18basic_stringstreamIcSt11char_traitsIcESaIcEE3strEv@plt>:
 80496c0:	ff 25 18 41 05 08    	jmp    *0x8054118
 80496c6:	68 18 02 00 00       	push   $0x218
 80496cb:	e9 b0 fb ff ff       	jmp    8049280 <_init+0x24>

080496d0 <_Unwind_Resume@plt>:
 80496d0:	ff 25 1c 41 05 08    	jmp    *0x805411c
 80496d6:	68 20 02 00 00       	push   $0x220
 80496db:	e9 a0 fb ff ff       	jmp    8049280 <_init+0x24>

080496e0 <png_read_info@plt>:
 80496e0:	ff 25 20 41 05 08    	jmp    *0x8054120
 80496e6:	68 28 02 00 00       	push   $0x228
 80496eb:	e9 90 fb ff ff       	jmp    8049280 <_init+0x24>

080496f0 <_ZNSs6appendERKSs@plt>:
 80496f0:	ff 25 24 41 05 08    	jmp    *0x8054124
 80496f6:	68 30 02 00 00       	push   $0x230
 80496fb:	e9 80 fb ff ff       	jmp    8049280 <_init+0x24>

08049700 <png_get_rowbytes@plt>:
 8049700:	ff 25 28 41 05 08    	jmp    *0x8054128
 8049706:	68 38 02 00 00       	push   $0x238
 804970b:	e9 70 fb ff ff       	jmp    8049280 <_init+0x24>

08049710 <_ZNSs7reserveEj@plt>:
 8049710:	ff 25 2c 41 05 08    	jmp    *0x805412c
 8049716:	68 40 02 00 00       	push   $0x240
 804971b:	e9 60 fb ff ff       	jmp    8049280 <_init+0x24>

Disassembly of section .text:

08049720 <_start>:
 8049720:	31 ed                	xor    %ebp,%ebp
 8049722:	5e                   	pop    %esi
 8049723:	89 e1                	mov    %esp,%ecx
 8049725:	83 e4 f0             	and    $0xfffffff0,%esp
 8049728:	50                   	push   %eax
 8049729:	54                   	push   %esp
 804972a:	52                   	push   %edx
 804972b:	68 f0 fb 04 08       	push   $0x804fbf0
 8049730:	68 80 fb 04 08       	push   $0x804fb80
 8049735:	51                   	push   %ecx
 8049736:	56                   	push   %esi
 8049737:	68 1d 98 04 08       	push   $0x804981d
 804973c:	e8 7f fc ff ff       	call   80493c0 <__libc_start_main@plt>
 8049741:	f4                   	hlt    
 8049742:	66 90                	xchg   %ax,%ax
 8049744:	66 90                	xchg   %ax,%ax
 8049746:	66 90                	xchg   %ax,%ax
 8049748:	66 90                	xchg   %ax,%ax
 804974a:	66 90                	xchg   %ax,%ax
 804974c:	66 90                	xchg   %ax,%ax
 804974e:	66 90                	xchg   %ax,%ax

08049750 <__x86.get_pc_thunk.bx>:
 8049750:	8b 1c 24             	mov    (%esp),%ebx
 8049753:	c3                   	ret    
 8049754:	66 90                	xchg   %ax,%ax
 8049756:	66 90                	xchg   %ax,%ax
 8049758:	66 90                	xchg   %ax,%ax
 804975a:	66 90                	xchg   %ax,%ax
 804975c:	66 90                	xchg   %ax,%ax
 804975e:	66 90                	xchg   %ax,%ax

08049760 <deregister_tm_clones>:
 8049760:	b8 3b 41 05 08       	mov    $0x805413b,%eax
 8049765:	2d 38 41 05 08       	sub    $0x8054138,%eax
 804976a:	83 f8 06             	cmp    $0x6,%eax
 804976d:	77 01                	ja     8049770 <deregister_tm_clones+0x10>
 804976f:	c3                   	ret    
 8049770:	b8 00 00 00 00       	mov    $0x0,%eax
 8049775:	85 c0                	test   %eax,%eax
 8049777:	74 f6                	je     804976f <deregister_tm_clones+0xf>
 8049779:	55                   	push   %ebp
 804977a:	89 e5                	mov    %esp,%ebp
 804977c:	83 ec 18             	sub    $0x18,%esp
 804977f:	c7 04 24 38 41 05 08 	movl   $0x8054138,(%esp)
 8049786:	ff d0                	call   *%eax
 8049788:	c9                   	leave  
 8049789:	c3                   	ret    
 804978a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

08049790 <register_tm_clones>:
 8049790:	b8 38 41 05 08       	mov    $0x8054138,%eax
 8049795:	2d 38 41 05 08       	sub    $0x8054138,%eax
 804979a:	c1 f8 02             	sar    $0x2,%eax
 804979d:	89 c2                	mov    %eax,%edx
 804979f:	c1 ea 1f             	shr    $0x1f,%edx
 80497a2:	01 d0                	add    %edx,%eax
 80497a4:	d1 f8                	sar    %eax
 80497a6:	75 01                	jne    80497a9 <register_tm_clones+0x19>
 80497a8:	c3                   	ret    
 80497a9:	ba 00 00 00 00       	mov    $0x0,%edx
 80497ae:	85 d2                	test   %edx,%edx
 80497b0:	74 f6                	je     80497a8 <register_tm_clones+0x18>
 80497b2:	55                   	push   %ebp
 80497b3:	89 e5                	mov    %esp,%ebp
 80497b5:	83 ec 18             	sub    $0x18,%esp
 80497b8:	89 44 24 04          	mov    %eax,0x4(%esp)
 80497bc:	c7 04 24 38 41 05 08 	movl   $0x8054138,(%esp)
 80497c3:	ff d2                	call   *%edx
 80497c5:	c9                   	leave  
 80497c6:	c3                   	ret    
 80497c7:	89 f6                	mov    %esi,%esi
 80497c9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

080497d0 <__do_global_dtors_aux>:
 80497d0:	80 3d 4c 42 05 08 00 	cmpb   $0x0,0x805424c
 80497d7:	75 13                	jne    80497ec <__do_global_dtors_aux+0x1c>
 80497d9:	55                   	push   %ebp
 80497da:	89 e5                	mov    %esp,%ebp
 80497dc:	83 ec 08             	sub    $0x8,%esp
 80497df:	e8 7c ff ff ff       	call   8049760 <deregister_tm_clones>
 80497e4:	c6 05 4c 42 05 08 01 	movb   $0x1,0x805424c
 80497eb:	c9                   	leave  
 80497ec:	f3 c3                	repz ret 
 80497ee:	66 90                	xchg   %ax,%ax

080497f0 <frame_dummy>:
 80497f0:	a1 f0 3e 05 08       	mov    0x8053ef0,%eax
 80497f5:	85 c0                	test   %eax,%eax
 80497f7:	74 1f                	je     8049818 <frame_dummy+0x28>
 80497f9:	b8 00 00 00 00       	mov    $0x0,%eax
 80497fe:	85 c0                	test   %eax,%eax
 8049800:	74 16                	je     8049818 <frame_dummy+0x28>
 8049802:	55                   	push   %ebp
 8049803:	89 e5                	mov    %esp,%ebp
 8049805:	83 ec 18             	sub    $0x18,%esp
 8049808:	c7 04 24 f0 3e 05 08 	movl   $0x8053ef0,(%esp)
 804980f:	ff d0                	call   *%eax
 8049811:	c9                   	leave  
 8049812:	e9 79 ff ff ff       	jmp    8049790 <register_tm_clones>
 8049817:	90                   	nop
 8049818:	e9 73 ff ff ff       	jmp    8049790 <register_tm_clones>

0804981d <main>:
#include "flower.h"

using namespace std;

int main(int argc, char* argv[])
{
 804981d:	55                   	push   %ebp
 804981e:	89 e5                	mov    %esp,%ebp
 8049820:	56                   	push   %esi
 8049821:	53                   	push   %ebx
 8049822:	83 e4 f0             	and    $0xfffffff0,%esp
 8049825:	83 ec 50             	sub    $0x50,%esp
	const int canvas_width = 128;
 8049828:	c7 44 24 28 80 00 00 	movl   $0x80,0x28(%esp)
 804982f:	00 
	const int canvas_height = 128;
 8049830:	c7 44 24 2c 80 00 00 	movl   $0x80,0x2c(%esp)
 8049837:	00 

	PNG canvas;
 8049838:	8d 44 24 34          	lea    0x34(%esp),%eax
 804983c:	89 04 24             	mov    %eax,(%esp)
 804983f:	e8 76 09 00 00       	call   804a1ba <_ZN3PNGC1Ev>
	canvas.resize(canvas_width, canvas_height);
 8049844:	c7 44 24 08 80 00 00 	movl   $0x80,0x8(%esp)
 804984b:	00 
 804984c:	c7 44 24 04 80 00 00 	movl   $0x80,0x4(%esp)
 8049853:	00 
 8049854:	8d 44 24 34          	lea    0x34(%esp),%eax
 8049858:	89 04 24             	mov    %eax,(%esp)
 804985b:	e8 e8 19 00 00       	call   804b248 <_ZN3PNG6resizeEjj>

	const Vector2 flower_center(canvas_width/2, canvas_height/2);
 8049860:	dd 05 40 fc 04 08    	fldl   0x804fc40
 8049866:	dd 5c 24 0c          	fstpl  0xc(%esp)
 804986a:	dd 05 40 fc 04 08    	fldl   0x804fc40
 8049870:	dd 5c 24 04          	fstpl  0x4(%esp)
 8049874:	8d 44 24 40          	lea    0x40(%esp),%eax
 8049878:	89 04 24             	mov    %eax,(%esp)
 804987b:	e8 d4 1c 00 00       	call   804b554 <_ZN7Vector2C1Edd>

	Drawable* flower = new Flower(flower_center);
 8049880:	c7 04 24 10 00 00 00 	movl   $0x10,(%esp)
 8049887:	e8 94 fc ff ff       	call   8049520 <_Znwj@plt>
 804988c:	89 c3                	mov    %eax,%ebx
 804988e:	8d 44 24 40          	lea    0x40(%esp),%eax
 8049892:	89 44 24 04          	mov    %eax,0x4(%esp)
 8049896:	89 1c 24             	mov    %ebx,(%esp)
 8049899:	e8 a4 22 00 00       	call   804bb42 <_ZN6FlowerC1ERK7Vector2>
 804989e:	89 5c 24 30          	mov    %ebx,0x30(%esp)

	/* TODO: For some reason this flower is not drawing correctly?  The stem,
	 * pistil, and leaf are all being drawn as big giant X's. */
	flower->draw(&canvas);
 80498a2:	8b 44 24 30          	mov    0x30(%esp),%eax
 80498a6:	8b 00                	mov    (%eax),%eax
 80498a8:	83 c0 08             	add    $0x8,%eax
 80498ab:	8b 00                	mov    (%eax),%eax
 80498ad:	8d 54 24 34          	lea    0x34(%esp),%edx
 80498b1:	89 54 24 04          	mov    %edx,0x4(%esp)
 80498b5:	8b 54 24 30          	mov    0x30(%esp),%edx
 80498b9:	89 14 24             	mov    %edx,(%esp)
 80498bc:	ff d0                	call   *%eax

	canvas.writeToFile("test_slicing.png");
 80498be:	8d 44 24 23          	lea    0x23(%esp),%eax
 80498c2:	89 04 24             	mov    %eax,(%esp)
 80498c5:	e8 c6 fd ff ff       	call   8049690 <_ZNSaIcEC1Ev@plt>
 80498ca:	8d 44 24 23          	lea    0x23(%esp),%eax
 80498ce:	89 44 24 08          	mov    %eax,0x8(%esp)
 80498d2:	c7 44 24 04 28 fc 04 	movl   $0x804fc28,0x4(%esp)
 80498d9:	08 
 80498da:	8d 44 24 24          	lea    0x24(%esp),%eax
 80498de:	89 04 24             	mov    %eax,(%esp)
 80498e1:	e8 ea fb ff ff       	call   80494d0 <_ZNSsC1EPKcRKSaIcE@plt>
 80498e6:	8d 44 24 24          	lea    0x24(%esp),%eax
 80498ea:	89 44 24 04          	mov    %eax,0x4(%esp)
 80498ee:	8d 44 24 34          	lea    0x34(%esp),%eax
 80498f2:	89 04 24             	mov    %eax,(%esp)
 80498f5:	e8 96 13 00 00       	call   804ac90 <_ZN3PNG11writeToFileERKSs>
 80498fa:	8d 44 24 24          	lea    0x24(%esp),%eax
 80498fe:	89 04 24             	mov    %eax,(%esp)
 8049901:	e8 3a fb ff ff       	call   8049440 <_ZNSsD1Ev@plt>
 8049906:	8d 44 24 23          	lea    0x23(%esp),%eax
 804990a:	89 04 24             	mov    %eax,(%esp)
 804990d:	e8 6e fc ff ff       	call   8049580 <_ZNSaIcED1Ev@plt>

	delete flower;
 8049912:	83 7c 24 30 00       	cmpl   $0x0,0x30(%esp)
 8049917:	74 14                	je     804992d <main+0x110>
 8049919:	8b 44 24 30          	mov    0x30(%esp),%eax
 804991d:	8b 00                	mov    (%eax),%eax
 804991f:	83 c0 04             	add    $0x4,%eax
 8049922:	8b 00                	mov    (%eax),%eax
 8049924:	8b 54 24 30          	mov    0x30(%esp),%edx
 8049928:	89 14 24             	mov    %edx,(%esp)
 804992b:	ff d0                	call   *%eax
	return 0;
 804992d:	bb 00 00 00 00       	mov    $0x0,%ebx
 8049932:	8d 44 24 34          	lea    0x34(%esp),%eax
 8049936:	89 04 24             	mov    %eax,(%esp)
 8049939:	e8 70 09 00 00       	call   804a2ae <_ZN3PNGD1Ev>
 804993e:	89 d8                	mov    %ebx,%eax
 8049940:	eb 46                	jmp    8049988 <main+0x16b>
 8049942:	89 c6                	mov    %eax,%esi
	PNG canvas;
	canvas.resize(canvas_width, canvas_height);

	const Vector2 flower_center(canvas_width/2, canvas_height/2);

	Drawable* flower = new Flower(flower_center);
 8049944:	89 1c 24             	mov    %ebx,(%esp)
 8049947:	e8 f4 f9 ff ff       	call   8049340 <_ZdlPv@plt>
 804994c:	89 f3                	mov    %esi,%ebx
 804994e:	eb 22                	jmp    8049972 <main+0x155>
 8049950:	89 c3                	mov    %eax,%ebx

	/* TODO: For some reason this flower is not drawing correctly?  The stem,
	 * pistil, and leaf are all being drawn as big giant X's. */
	flower->draw(&canvas);

	canvas.writeToFile("test_slicing.png");
 8049952:	8d 44 24 24          	lea    0x24(%esp),%eax
 8049956:	89 04 24             	mov    %eax,(%esp)
 8049959:	e8 e2 fa ff ff       	call   8049440 <_ZNSsD1Ev@plt>
 804995e:	eb 02                	jmp    8049962 <main+0x145>
 8049960:	89 c3                	mov    %eax,%ebx
 8049962:	8d 44 24 23          	lea    0x23(%esp),%eax
 8049966:	89 04 24             	mov    %eax,(%esp)
 8049969:	e8 12 fc ff ff       	call   8049580 <_ZNSaIcED1Ev@plt>
 804996e:	eb 02                	jmp    8049972 <main+0x155>
 8049970:	89 c3                	mov    %eax,%ebx

	delete flower;
	return 0;
 8049972:	8d 44 24 34          	lea    0x34(%esp),%eax
 8049976:	89 04 24             	mov    %eax,(%esp)
 8049979:	e8 30 09 00 00       	call   804a2ae <_ZN3PNGD1Ev>
 804997e:	89 d8                	mov    %ebx,%eax
 8049980:	89 04 24             	mov    %eax,(%esp)
 8049983:	e8 48 fd ff ff       	call   80496d0 <_Unwind_Resume@plt>
}
 8049988:	8d 65 f8             	lea    -0x8(%ebp),%esp
 804998b:	5b                   	pop    %ebx
 804998c:	5e                   	pop    %esi
 804998d:	5d                   	pop    %ebp
 804998e:	c3                   	ret    

0804998f <_Z41__static_initialization_and_destruction_0ii>:
 804998f:	55                   	push   %ebp
 8049990:	89 e5                	mov    %esp,%ebp
 8049992:	83 ec 18             	sub    $0x18,%esp
 8049995:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
 8049999:	75 31                	jne    80499cc <_Z41__static_initialization_and_destruction_0ii+0x3d>
 804999b:	81 7d 0c ff ff 00 00 	cmpl   $0xffff,0xc(%ebp)
 80499a2:	75 28                	jne    80499cc <_Z41__static_initialization_and_destruction_0ii+0x3d>
  extern wostream wclog;	/// Linked to standard error (buffered)
#endif
  //@}

  // For construction of filebuffers for cout, cin, cerr, clog et. al.
  static ios_base::Init __ioinit;
 80499a4:	c7 04 24 4d 42 05 08 	movl   $0x805424d,(%esp)
 80499ab:	e8 c0 f9 ff ff       	call   8049370 <_ZNSt8ios_base4InitC1Ev@plt>
 80499b0:	c7 44 24 08 34 41 05 	movl   $0x8054134,0x8(%esp)
 80499b7:	08 
 80499b8:	c7 44 24 04 4d 42 05 	movl   $0x805424d,0x4(%esp)
 80499bf:	08 
 80499c0:	c7 04 24 00 94 04 08 	movl   $0x8049400,(%esp)
 80499c7:	e8 24 f9 ff ff       	call   80492f0 <__cxa_atexit@plt>
 80499cc:	c9                   	leave  
 80499cd:	c3                   	ret    

080499ce <_GLOBAL__sub_I_main>:
 80499ce:	55                   	push   %ebp
 80499cf:	89 e5                	mov    %esp,%ebp
 80499d1:	83 ec 18             	sub    $0x18,%esp
 80499d4:	c7 44 24 04 ff ff 00 	movl   $0xffff,0x4(%esp)
 80499db:	00 
 80499dc:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
 80499e3:	e8 a7 ff ff ff       	call   804998f <_Z41__static_initialization_and_destruction_0ii>
 80499e8:	c9                   	leave  
 80499e9:	c3                   	ret    

080499ea <_ZN9RGBAPixelC1Ev>:
 * @author Chase Geigle
 * @date Spring 2012
 */
#include "rgbapixel.h"

RGBAPixel::RGBAPixel() : red(255), green(255), blue(255), alpha(255)
 80499ea:	55                   	push   %ebp
 80499eb:	89 e5                	mov    %esp,%ebp
 80499ed:	8b 45 08             	mov    0x8(%ebp),%eax
 80499f0:	c6 00 ff             	movb   $0xff,(%eax)
 80499f3:	8b 45 08             	mov    0x8(%ebp),%eax
 80499f6:	c6 40 01 ff          	movb   $0xff,0x1(%eax)
 80499fa:	8b 45 08             	mov    0x8(%ebp),%eax
 80499fd:	c6 40 02 ff          	movb   $0xff,0x2(%eax)
 8049a01:	8b 45 08             	mov    0x8(%ebp),%eax
 8049a04:	c6 40 03 ff          	movb   $0xff,0x3(%eax)
{
	/* nothing */
}
 8049a08:	5d                   	pop    %ebp
 8049a09:	c3                   	ret    

08049a0a <_ZN9RGBAPixelC1Ehhh>:

RGBAPixel::RGBAPixel(unsigned char r, unsigned char g, unsigned char b)
 8049a0a:	55                   	push   %ebp
 8049a0b:	89 e5                	mov    %esp,%ebp
 8049a0d:	83 ec 0c             	sub    $0xc,%esp
 8049a10:	8b 4d 0c             	mov    0xc(%ebp),%ecx
 8049a13:	8b 55 10             	mov    0x10(%ebp),%edx
 8049a16:	8b 45 14             	mov    0x14(%ebp),%eax
 8049a19:	88 4d fc             	mov    %cl,-0x4(%ebp)
 8049a1c:	88 55 f8             	mov    %dl,-0x8(%ebp)
 8049a1f:	88 45 f4             	mov    %al,-0xc(%ebp)
	: red(r), green(g), blue(b), alpha(255)
 8049a22:	8b 45 08             	mov    0x8(%ebp),%eax
 8049a25:	0f b6 55 fc          	movzbl -0x4(%ebp),%edx
 8049a29:	88 10                	mov    %dl,(%eax)
 8049a2b:	8b 45 08             	mov    0x8(%ebp),%eax
 8049a2e:	0f b6 55 f8          	movzbl -0x8(%ebp),%edx
 8049a32:	88 50 01             	mov    %dl,0x1(%eax)
 8049a35:	8b 45 08             	mov    0x8(%ebp),%eax
 8049a38:	0f b6 55 f4          	movzbl -0xc(%ebp),%edx
 8049a3c:	88 50 02             	mov    %dl,0x2(%eax)
 8049a3f:	8b 45 08             	mov    0x8(%ebp),%eax
 8049a42:	c6 40 03 ff          	movb   $0xff,0x3(%eax)
{
	/* nothing */
}
 8049a46:	c9                   	leave  
 8049a47:	c3                   	ret    

08049a48 <_ZN9RGBAPixelC1Ehhhh>:

RGBAPixel::RGBAPixel(unsigned char r, unsigned char g, unsigned char b,
 8049a48:	55                   	push   %ebp
 8049a49:	89 e5                	mov    %esp,%ebp
 8049a4b:	53                   	push   %ebx
 8049a4c:	83 ec 10             	sub    $0x10,%esp
 8049a4f:	8b 5d 0c             	mov    0xc(%ebp),%ebx
 8049a52:	8b 4d 10             	mov    0x10(%ebp),%ecx
 8049a55:	8b 55 14             	mov    0x14(%ebp),%edx
 8049a58:	8b 45 18             	mov    0x18(%ebp),%eax
 8049a5b:	88 5d f8             	mov    %bl,-0x8(%ebp)
 8049a5e:	88 4d f4             	mov    %cl,-0xc(%ebp)
 8049a61:	88 55 f0             	mov    %dl,-0x10(%ebp)
 8049a64:	88 45 ec             	mov    %al,-0x14(%ebp)
		unsigned char a) : red(r), green(g), blue(b), alpha(a)
 8049a67:	8b 45 08             	mov    0x8(%ebp),%eax
 8049a6a:	0f b6 55 f8          	movzbl -0x8(%ebp),%edx
 8049a6e:	88 10                	mov    %dl,(%eax)
 8049a70:	8b 45 08             	mov    0x8(%ebp),%eax
 8049a73:	0f b6 55 f4          	movzbl -0xc(%ebp),%edx
 8049a77:	88 50 01             	mov    %dl,0x1(%eax)
 8049a7a:	8b 45 08             	mov    0x8(%ebp),%eax
 8049a7d:	0f b6 55 f0          	movzbl -0x10(%ebp),%edx
 8049a81:	88 50 02             	mov    %dl,0x2(%eax)
 8049a84:	8b 45 08             	mov    0x8(%ebp),%eax
 8049a87:	0f b6 55 ec          	movzbl -0x14(%ebp),%edx
 8049a8b:	88 50 03             	mov    %dl,0x3(%eax)
{
	/* nothing */
}
 8049a8e:	83 c4 10             	add    $0x10,%esp
 8049a91:	5b                   	pop    %ebx
 8049a92:	5d                   	pop    %ebp
 8049a93:	c3                   	ret    

08049a94 <_ZNK9RGBAPixeleqERKS_>:

bool RGBAPixel::operator==(RGBAPixel const & other) const
{
 8049a94:	55                   	push   %ebp
 8049a95:	89 e5                	mov    %esp,%ebp
	return red == other.red && green == other.green && blue == other.blue &&
 8049a97:	8b 45 08             	mov    0x8(%ebp),%eax
 8049a9a:	0f b6 10             	movzbl (%eax),%edx
 8049a9d:	8b 45 0c             	mov    0xc(%ebp),%eax
 8049aa0:	0f b6 00             	movzbl (%eax),%eax
 8049aa3:	38 c2                	cmp    %al,%dl
 8049aa5:	75 3d                	jne    8049ae4 <_ZNK9RGBAPixeleqERKS_+0x50>
 8049aa7:	8b 45 08             	mov    0x8(%ebp),%eax
 8049aaa:	0f b6 50 01          	movzbl 0x1(%eax),%edx
 8049aae:	8b 45 0c             	mov    0xc(%ebp),%eax
 8049ab1:	0f b6 40 01          	movzbl 0x1(%eax),%eax
 8049ab5:	38 c2                	cmp    %al,%dl
 8049ab7:	75 2b                	jne    8049ae4 <_ZNK9RGBAPixeleqERKS_+0x50>
 8049ab9:	8b 45 08             	mov    0x8(%ebp),%eax
 8049abc:	0f b6 50 02          	movzbl 0x2(%eax),%edx
 8049ac0:	8b 45 0c             	mov    0xc(%ebp),%eax
 8049ac3:	0f b6 40 02          	movzbl 0x2(%eax),%eax
 8049ac7:	38 c2                	cmp    %al,%dl
 8049ac9:	75 19                	jne    8049ae4 <_ZNK9RGBAPixeleqERKS_+0x50>
		alpha == other.alpha;
 8049acb:	8b 45 08             	mov    0x8(%ebp),%eax
 8049ace:	0f b6 50 03          	movzbl 0x3(%eax),%edx
 8049ad2:	8b 45 0c             	mov    0xc(%ebp),%eax
 8049ad5:	0f b6 40 03          	movzbl 0x3(%eax),%eax
	/* nothing */
}

bool RGBAPixel::operator==(RGBAPixel const & other) const
{
	return red == other.red && green == other.green && blue == other.blue &&
 8049ad9:	38 c2                	cmp    %al,%dl
 8049adb:	75 07                	jne    8049ae4 <_ZNK9RGBAPixeleqERKS_+0x50>
 8049add:	b8 01 00 00 00       	mov    $0x1,%eax
 8049ae2:	eb 05                	jmp    8049ae9 <_ZNK9RGBAPixeleqERKS_+0x55>
 8049ae4:	b8 00 00 00 00       	mov    $0x0,%eax
		alpha == other.alpha;
}
 8049ae9:	5d                   	pop    %ebp
 8049aea:	c3                   	ret    
 8049aeb:	90                   	nop

08049aec <_ZNK9RGBAPixelneERKS_>:

bool RGBAPixel::operator!=(RGBAPixel const & other) const
{
 8049aec:	55                   	push   %ebp
 8049aed:	89 e5                	mov    %esp,%ebp
 8049aef:	83 ec 08             	sub    $0x8,%esp
	return !(*this == other);
 8049af2:	8b 45 0c             	mov    0xc(%ebp),%eax
 8049af5:	89 44 24 04          	mov    %eax,0x4(%esp)
 8049af9:	8b 45 08             	mov    0x8(%ebp),%eax
 8049afc:	89 04 24             	mov    %eax,(%esp)
 8049aff:	e8 90 ff ff ff       	call   8049a94 <_ZNK9RGBAPixeleqERKS_>
 8049b04:	83 f0 01             	xor    $0x1,%eax
}
 8049b07:	c9                   	leave  
 8049b08:	c3                   	ret    
 8049b09:	90                   	nop

08049b0a <_ZNK9RGBAPixelltERKS_>:

bool RGBAPixel::operator<(RGBAPixel const & other) const
{
 8049b0a:	55                   	push   %ebp
 8049b0b:	89 e5                	mov    %esp,%ebp
	if (red != other.red)
 8049b0d:	8b 45 08             	mov    0x8(%ebp),%eax
 8049b10:	0f b6 10             	movzbl (%eax),%edx
 8049b13:	8b 45 0c             	mov    0xc(%ebp),%eax
 8049b16:	0f b6 00             	movzbl (%eax),%eax
 8049b19:	38 c2                	cmp    %al,%dl
 8049b1b:	74 13                	je     8049b30 <_ZNK9RGBAPixelltERKS_+0x26>
		return red < other.red;
 8049b1d:	8b 45 08             	mov    0x8(%ebp),%eax
 8049b20:	0f b6 10             	movzbl (%eax),%edx
 8049b23:	8b 45 0c             	mov    0xc(%ebp),%eax
 8049b26:	0f b6 00             	movzbl (%eax),%eax
 8049b29:	38 c2                	cmp    %al,%dl
 8049b2b:	0f 92 c0             	setb   %al
 8049b2e:	eb 3a                	jmp    8049b6a <_ZNK9RGBAPixelltERKS_+0x60>
	if (green != other.green)
 8049b30:	8b 45 08             	mov    0x8(%ebp),%eax
 8049b33:	0f b6 50 01          	movzbl 0x1(%eax),%edx
 8049b37:	8b 45 0c             	mov    0xc(%ebp),%eax
 8049b3a:	0f b6 40 01          	movzbl 0x1(%eax),%eax
 8049b3e:	38 c2                	cmp    %al,%dl
 8049b40:	74 15                	je     8049b57 <_ZNK9RGBAPixelltERKS_+0x4d>
		return green < other.green;
 8049b42:	8b 45 08             	mov    0x8(%ebp),%eax
 8049b45:	0f b6 50 01          	movzbl 0x1(%eax),%edx
 8049b49:	8b 45 0c             	mov    0xc(%ebp),%eax
 8049b4c:	0f b6 40 01          	movzbl 0x1(%eax),%eax
 8049b50:	38 c2                	cmp    %al,%dl
 8049b52:	0f 92 c0             	setb   %al
 8049b55:	eb 13                	jmp    8049b6a <_ZNK9RGBAPixelltERKS_+0x60>
	return blue < other.blue;
 8049b57:	8b 45 08             	mov    0x8(%ebp),%eax
 8049b5a:	0f b6 50 02          	movzbl 0x2(%eax),%edx
 8049b5e:	8b 45 0c             	mov    0xc(%ebp),%eax
 8049b61:	0f b6 40 02          	movzbl 0x2(%eax),%eax
 8049b65:	38 c2                	cmp    %al,%dl
 8049b67:	0f 92 c0             	setb   %al
}
 8049b6a:	5d                   	pop    %ebp
 8049b6b:	c3                   	ret    

08049b6c <_ZlsRSoRK9RGBAPixel>:

std::ostream & operator<<(std::ostream & out, RGBAPixel const & pixel)
{
 8049b6c:	55                   	push   %ebp
 8049b6d:	89 e5                	mov    %esp,%ebp
 8049b6f:	57                   	push   %edi
 8049b70:	56                   	push   %esi
 8049b71:	53                   	push   %ebx
 8049b72:	83 ec 1c             	sub    $0x1c,%esp
	out << "(" << (int) pixel.red << "," << (int) pixel.green << ","
		<< (int) pixel.blue << ")";
 8049b75:	8b 45 0c             	mov    0xc(%ebp),%eax
 8049b78:	0f b6 40 02          	movzbl 0x2(%eax),%eax
 8049b7c:	0f b6 d8             	movzbl %al,%ebx
	return blue < other.blue;
}

std::ostream & operator<<(std::ostream & out, RGBAPixel const & pixel)
{
	out << "(" << (int) pixel.red << "," << (int) pixel.green << ","
 8049b7f:	8b 45 0c             	mov    0xc(%ebp),%eax
 8049b82:	0f b6 40 01          	movzbl 0x1(%eax),%eax
 8049b86:	0f b6 f0             	movzbl %al,%esi
 8049b89:	8b 45 0c             	mov    0xc(%ebp),%eax
 8049b8c:	0f b6 00             	movzbl (%eax),%eax
 8049b8f:	0f b6 f8             	movzbl %al,%edi
 8049b92:	c7 44 24 04 48 fc 04 	movl   $0x804fc48,0x4(%esp)
 8049b99:	08 
 8049b9a:	8b 45 08             	mov    0x8(%ebp),%eax
 8049b9d:	89 04 24             	mov    %eax,(%esp)
 8049ba0:	e8 6b f8 ff ff       	call   8049410 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>
 8049ba5:	89 7c 24 04          	mov    %edi,0x4(%esp)
 8049ba9:	89 04 24             	mov    %eax,(%esp)
 8049bac:	e8 2f f7 ff ff       	call   80492e0 <_ZNSolsEi@plt>
 8049bb1:	c7 44 24 04 4a fc 04 	movl   $0x804fc4a,0x4(%esp)
 8049bb8:	08 
 8049bb9:	89 04 24             	mov    %eax,(%esp)
 8049bbc:	e8 4f f8 ff ff       	call   8049410 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>
 8049bc1:	89 74 24 04          	mov    %esi,0x4(%esp)
 8049bc5:	89 04 24             	mov    %eax,(%esp)
 8049bc8:	e8 13 f7 ff ff       	call   80492e0 <_ZNSolsEi@plt>
 8049bcd:	c7 44 24 04 4a fc 04 	movl   $0x804fc4a,0x4(%esp)
 8049bd4:	08 
 8049bd5:	89 04 24             	mov    %eax,(%esp)
 8049bd8:	e8 33 f8 ff ff       	call   8049410 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>
		<< (int) pixel.blue << ")";
 8049bdd:	89 5c 24 04          	mov    %ebx,0x4(%esp)
 8049be1:	89 04 24             	mov    %eax,(%esp)
 8049be4:	e8 f7 f6 ff ff       	call   80492e0 <_ZNSolsEi@plt>
 8049be9:	c7 44 24 04 4c fc 04 	movl   $0x804fc4c,0x4(%esp)
 8049bf0:	08 
 8049bf1:	89 04 24             	mov    %eax,(%esp)
 8049bf4:	e8 17 f8 ff ff       	call   8049410 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>
	if (pixel.alpha != 255)
 8049bf9:	8b 45 0c             	mov    0xc(%ebp),%eax
 8049bfc:	0f b6 40 03          	movzbl 0x3(%eax),%eax
 8049c00:	3c ff                	cmp    $0xff,%al
 8049c02:	74 29                	je     8049c2d <_ZlsRSoRK9RGBAPixel+0xc1>
		out << " a:" << pixel.alpha;
 8049c04:	8b 45 0c             	mov    0xc(%ebp),%eax
 8049c07:	0f b6 40 03          	movzbl 0x3(%eax),%eax
 8049c0b:	0f b6 d8             	movzbl %al,%ebx
 8049c0e:	c7 44 24 04 4e fc 04 	movl   $0x804fc4e,0x4(%esp)
 8049c15:	08 
 8049c16:	8b 45 08             	mov    0x8(%ebp),%eax
 8049c19:	89 04 24             	mov    %eax,(%esp)
 8049c1c:	e8 ef f7 ff ff       	call   8049410 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>
 8049c21:	89 5c 24 04          	mov    %ebx,0x4(%esp)
 8049c25:	89 04 24             	mov    %eax,(%esp)
 8049c28:	e8 73 f7 ff ff       	call   80493a0 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_h@plt>
	return out;
 8049c2d:	8b 45 08             	mov    0x8(%ebp),%eax
}
 8049c30:	83 c4 1c             	add    $0x1c,%esp
 8049c33:	5b                   	pop    %ebx
 8049c34:	5e                   	pop    %esi
 8049c35:	5f                   	pop    %edi
 8049c36:	5d                   	pop    %ebp
 8049c37:	c3                   	ret    

08049c38 <_ZNK3PNG6_pixelEjj>:
{
	cerr << "[EasyPNG]: " << err << endl;
}

RGBAPixel & PNG::_pixel(size_t x, size_t y) const
{
 8049c38:	55                   	push   %ebp
 8049c39:	89 e5                	mov    %esp,%ebp
	return _pixels[_width * y + x];
 8049c3b:	8b 45 08             	mov    0x8(%ebp),%eax
 8049c3e:	8b 50 08             	mov    0x8(%eax),%edx
 8049c41:	8b 45 08             	mov    0x8(%ebp),%eax
 8049c44:	8b 00                	mov    (%eax),%eax
 8049c46:	0f af 45 10          	imul   0x10(%ebp),%eax
 8049c4a:	89 c1                	mov    %eax,%ecx
 8049c4c:	8b 45 0c             	mov    0xc(%ebp),%eax
 8049c4f:	01 c8                	add    %ecx,%eax
 8049c51:	c1 e0 02             	shl    $0x2,%eax
 8049c54:	01 d0                	add    %edx,%eax
}
 8049c56:	5d                   	pop    %ebp
 8049c57:	c3                   	ret    

08049c58 <_ZN3PNG6_clearEv>:

void PNG::_clear()
{
 8049c58:	55                   	push   %ebp
 8049c59:	89 e5                	mov    %esp,%ebp
 8049c5b:	83 ec 18             	sub    $0x18,%esp
	delete [] _pixels;
 8049c5e:	8b 45 08             	mov    0x8(%ebp),%eax
 8049c61:	8b 40 08             	mov    0x8(%eax),%eax
 8049c64:	85 c0                	test   %eax,%eax
 8049c66:	74 0e                	je     8049c76 <_ZN3PNG6_clearEv+0x1e>
 8049c68:	8b 45 08             	mov    0x8(%ebp),%eax
 8049c6b:	8b 40 08             	mov    0x8(%eax),%eax
 8049c6e:	89 04 24             	mov    %eax,(%esp)
 8049c71:	e8 3a f9 ff ff       	call   80495b0 <_ZdaPv@plt>
	_pixels = NULL;
 8049c76:	8b 45 08             	mov    0x8(%ebp),%eax
 8049c79:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
 8049c80:	c9                   	leave  
 8049c81:	c3                   	ret    

08049c82 <_ZN3PNG5_copyERKS_>:

void PNG::_copy(PNG const & other)
{
 8049c82:	55                   	push   %ebp
 8049c83:	89 e5                	mov    %esp,%ebp
 8049c85:	57                   	push   %edi
 8049c86:	56                   	push   %esi
 8049c87:	53                   	push   %ebx
 8049c88:	83 ec 2c             	sub    $0x2c,%esp
	_width = other._width;
 8049c8b:	8b 45 0c             	mov    0xc(%ebp),%eax
 8049c8e:	8b 10                	mov    (%eax),%edx
 8049c90:	8b 45 08             	mov    0x8(%ebp),%eax
 8049c93:	89 10                	mov    %edx,(%eax)
	_height = other._height;
 8049c95:	8b 45 0c             	mov    0xc(%ebp),%eax
 8049c98:	8b 50 04             	mov    0x4(%eax),%edx
 8049c9b:	8b 45 08             	mov    0x8(%ebp),%eax
 8049c9e:	89 50 04             	mov    %edx,0x4(%eax)
	_pixels = new RGBAPixel[_height * _width];
 8049ca1:	8b 45 08             	mov    0x8(%ebp),%eax
 8049ca4:	8b 50 04             	mov    0x4(%eax),%edx
 8049ca7:	8b 45 08             	mov    0x8(%ebp),%eax
 8049caa:	8b 00                	mov    (%eax),%eax
 8049cac:	0f af d0             	imul   %eax,%edx
 8049caf:	89 d6                	mov    %edx,%esi
 8049cb1:	81 fe 00 00 c0 1f    	cmp    $0x1fc00000,%esi
 8049cb7:	77 09                	ja     8049cc2 <_ZN3PNG5_copyERKS_+0x40>
 8049cb9:	8d 04 b5 00 00 00 00 	lea    0x0(,%esi,4),%eax
 8049cc0:	eb 05                	jmp    8049cc7 <_ZN3PNG5_copyERKS_+0x45>
 8049cc2:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 8049cc7:	89 04 24             	mov    %eax,(%esp)
 8049cca:	e8 81 f8 ff ff       	call   8049550 <_Znaj@plt>
 8049ccf:	89 c3                	mov    %eax,%ebx
 8049cd1:	89 d8                	mov    %ebx,%eax
 8049cd3:	8d 56 ff             	lea    -0x1(%esi),%edx
 8049cd6:	89 d7                	mov    %edx,%edi
 8049cd8:	89 c6                	mov    %eax,%esi
 8049cda:	eb 0e                	jmp    8049cea <_ZN3PNG5_copyERKS_+0x68>
 8049cdc:	89 34 24             	mov    %esi,(%esp)
 8049cdf:	e8 06 fd ff ff       	call   80499ea <_ZN9RGBAPixelC1Ev>
 8049ce4:	83 c6 04             	add    $0x4,%esi
 8049ce7:	83 ef 01             	sub    $0x1,%edi
 8049cea:	83 ff ff             	cmp    $0xffffffff,%edi
 8049ced:	75 ed                	jne    8049cdc <_ZN3PNG5_copyERKS_+0x5a>
 8049cef:	8b 45 08             	mov    0x8(%ebp),%eax
 8049cf2:	89 58 08             	mov    %ebx,0x8(%eax)
	for (size_t y = 0; y < _height; y++)
 8049cf5:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
 8049cfc:	eb 53                	jmp    8049d51 <_ZN3PNG5_copyERKS_+0xcf>
	{
		for (size_t x = 0; x < _width; x++)
 8049cfe:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
 8049d05:	eb 3c                	jmp    8049d43 <_ZN3PNG5_copyERKS_+0xc1>
		{
			_pixel(x,y) = other._pixel(x,y);
 8049d07:	8b 45 e0             	mov    -0x20(%ebp),%eax
 8049d0a:	89 44 24 08          	mov    %eax,0x8(%esp)
 8049d0e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
 8049d11:	89 44 24 04          	mov    %eax,0x4(%esp)
 8049d15:	8b 45 08             	mov    0x8(%ebp),%eax
 8049d18:	89 04 24             	mov    %eax,(%esp)
 8049d1b:	e8 18 ff ff ff       	call   8049c38 <_ZNK3PNG6_pixelEjj>
 8049d20:	89 c3                	mov    %eax,%ebx
 8049d22:	8b 45 e0             	mov    -0x20(%ebp),%eax
 8049d25:	89 44 24 08          	mov    %eax,0x8(%esp)
 8049d29:	8b 45 e4             	mov    -0x1c(%ebp),%eax
 8049d2c:	89 44 24 04          	mov    %eax,0x4(%esp)
 8049d30:	8b 45 0c             	mov    0xc(%ebp),%eax
 8049d33:	89 04 24             	mov    %eax,(%esp)
 8049d36:	e8 fd fe ff ff       	call   8049c38 <_ZNK3PNG6_pixelEjj>
 8049d3b:	8b 00                	mov    (%eax),%eax
 8049d3d:	89 03                	mov    %eax,(%ebx)
	_width = other._width;
	_height = other._height;
	_pixels = new RGBAPixel[_height * _width];
	for (size_t y = 0; y < _height; y++)
	{
		for (size_t x = 0; x < _width; x++)
 8049d3f:	83 45 e4 01          	addl   $0x1,-0x1c(%ebp)
 8049d43:	8b 45 08             	mov    0x8(%ebp),%eax
 8049d46:	8b 00                	mov    (%eax),%eax
 8049d48:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
 8049d4b:	77 ba                	ja     8049d07 <_ZN3PNG5_copyERKS_+0x85>
void PNG::_copy(PNG const & other)
{
	_width = other._width;
	_height = other._height;
	_pixels = new RGBAPixel[_height * _width];
	for (size_t y = 0; y < _height; y++)
 8049d4d:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
 8049d51:	8b 45 08             	mov    0x8(%ebp),%eax
 8049d54:	8b 40 04             	mov    0x4(%eax),%eax
 8049d57:	3b 45 e0             	cmp    -0x20(%ebp),%eax
 8049d5a:	77 a2                	ja     8049cfe <_ZN3PNG5_copyERKS_+0x7c>
 8049d5c:	eb 14                	jmp    8049d72 <_ZN3PNG5_copyERKS_+0xf0>
 8049d5e:	89 c6                	mov    %eax,%esi

void PNG::_copy(PNG const & other)
{
	_width = other._width;
	_height = other._height;
	_pixels = new RGBAPixel[_height * _width];
 8049d60:	89 1c 24             	mov    %ebx,(%esp)
 8049d63:	e8 48 f8 ff ff       	call   80495b0 <_ZdaPv@plt>
 8049d68:	89 f0                	mov    %esi,%eax
 8049d6a:	89 04 24             	mov    %eax,(%esp)
 8049d6d:	e8 5e f9 ff ff       	call   80496d0 <_Unwind_Resume@plt>
		for (size_t x = 0; x < _width; x++)
		{
			_pixel(x,y) = other._pixel(x,y);
		}
	}
}
 8049d72:	83 c4 2c             	add    $0x2c,%esp
 8049d75:	5b                   	pop    %ebx
 8049d76:	5e                   	pop    %esi
 8049d77:	5f                   	pop    %edi
 8049d78:	5d                   	pop    %ebp
 8049d79:	c3                   	ret    

08049d7a <_ZN3PNG6_blankEv>:

void PNG::_blank()
{
 8049d7a:	55                   	push   %ebp
 8049d7b:	89 e5                	mov    %esp,%ebp
 8049d7d:	83 ec 1c             	sub    $0x1c,%esp
	for (size_t y = 0; y < _height; y++)
 8049d80:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
 8049d87:	eb 52                	jmp    8049ddb <_ZN3PNG6_blankEv+0x61>
	{
		for (size_t x = 0; x < _width; x++)
 8049d89:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
 8049d90:	eb 3b                	jmp    8049dcd <_ZN3PNG6_blankEv+0x53>
		{
			RGBAPixel & curr = _pixel(x,y);
 8049d92:	8b 45 f4             	mov    -0xc(%ebp),%eax
 8049d95:	89 44 24 08          	mov    %eax,0x8(%esp)
 8049d99:	8b 45 f8             	mov    -0x8(%ebp),%eax
 8049d9c:	89 44 24 04          	mov    %eax,0x4(%esp)
 8049da0:	8b 45 08             	mov    0x8(%ebp),%eax
 8049da3:	89 04 24             	mov    %eax,(%esp)
 8049da6:	e8 8d fe ff ff       	call   8049c38 <_ZNK3PNG6_pixelEjj>
 8049dab:	89 45 fc             	mov    %eax,-0x4(%ebp)
			curr.red = 255;
 8049dae:	8b 45 fc             	mov    -0x4(%ebp),%eax
 8049db1:	c6 00 ff             	movb   $0xff,(%eax)
			curr.green = 255;
 8049db4:	8b 45 fc             	mov    -0x4(%ebp),%eax
 8049db7:	c6 40 01 ff          	movb   $0xff,0x1(%eax)
			curr.blue = 255;
 8049dbb:	8b 45 fc             	mov    -0x4(%ebp),%eax
 8049dbe:	c6 40 02 ff          	movb   $0xff,0x2(%eax)
			curr.alpha = 255;
 8049dc2:	8b 45 fc             	mov    -0x4(%ebp),%eax
 8049dc5:	c6 40 03 ff          	movb   $0xff,0x3(%eax)

void PNG::_blank()
{
	for (size_t y = 0; y < _height; y++)
	{
		for (size_t x = 0; x < _width; x++)
 8049dc9:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
 8049dcd:	8b 45 08             	mov    0x8(%ebp),%eax
 8049dd0:	8b 00                	mov    (%eax),%eax
 8049dd2:	3b 45 f8             	cmp    -0x8(%ebp),%eax
 8049dd5:	77 bb                	ja     8049d92 <_ZN3PNG6_blankEv+0x18>
	}
}

void PNG::_blank()
{
	for (size_t y = 0; y < _height; y++)
 8049dd7:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
 8049ddb:	8b 45 08             	mov    0x8(%ebp),%eax
 8049dde:	8b 40 04             	mov    0x4(%eax),%eax
 8049de1:	3b 45 f4             	cmp    -0xc(%ebp),%eax
 8049de4:	77 a3                	ja     8049d89 <_ZN3PNG6_blankEv+0xf>
			curr.green = 255;
			curr.blue = 255;
			curr.alpha = 255;
		}
	}
}
 8049de6:	c9                   	leave  
 8049de7:	c3                   	ret    

08049de8 <_ZN3PNG5_initEv>:

void PNG::_init()
{
 8049de8:	55                   	push   %ebp
 8049de9:	89 e5                	mov    %esp,%ebp
 8049deb:	57                   	push   %edi
 8049dec:	56                   	push   %esi
 8049ded:	53                   	push   %ebx
 8049dee:	83 ec 1c             	sub    $0x1c,%esp
	if (_pixels != NULL)
 8049df1:	8b 45 08             	mov    0x8(%ebp),%eax
 8049df4:	8b 40 08             	mov    0x8(%eax),%eax
 8049df7:	85 c0                	test   %eax,%eax
 8049df9:	74 0b                	je     8049e06 <_ZN3PNG5_initEv+0x1e>
		_clear();
 8049dfb:	8b 45 08             	mov    0x8(%ebp),%eax
 8049dfe:	89 04 24             	mov    %eax,(%esp)
 8049e01:	e8 52 fe ff ff       	call   8049c58 <_ZN3PNG6_clearEv>
	_width = 1;
 8049e06:	8b 45 08             	mov    0x8(%ebp),%eax
 8049e09:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
	_height = 1;
 8049e0f:	8b 45 08             	mov    0x8(%ebp),%eax
 8049e12:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
	_pixels = new RGBAPixel[1];
 8049e19:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
 8049e20:	e8 2b f7 ff ff       	call   8049550 <_Znaj@plt>
 8049e25:	89 c3                	mov    %eax,%ebx
 8049e27:	89 d8                	mov    %ebx,%eax
 8049e29:	bf 00 00 00 00       	mov    $0x0,%edi
 8049e2e:	89 c6                	mov    %eax,%esi
 8049e30:	eb 0e                	jmp    8049e40 <_ZN3PNG5_initEv+0x58>
 8049e32:	89 34 24             	mov    %esi,(%esp)
 8049e35:	e8 b0 fb ff ff       	call   80499ea <_ZN9RGBAPixelC1Ev>
 8049e3a:	83 c6 04             	add    $0x4,%esi
 8049e3d:	83 ef 01             	sub    $0x1,%edi
 8049e40:	83 ff ff             	cmp    $0xffffffff,%edi
 8049e43:	75 ed                	jne    8049e32 <_ZN3PNG5_initEv+0x4a>
 8049e45:	8b 45 08             	mov    0x8(%ebp),%eax
 8049e48:	89 58 08             	mov    %ebx,0x8(%eax)
	_blank();
 8049e4b:	8b 45 08             	mov    0x8(%ebp),%eax
 8049e4e:	89 04 24             	mov    %eax,(%esp)
 8049e51:	e8 24 ff ff ff       	call   8049d7a <_ZN3PNG6_blankEv>
 8049e56:	eb 14                	jmp    8049e6c <_ZN3PNG5_initEv+0x84>
 8049e58:	89 c6                	mov    %eax,%esi
{
	if (_pixels != NULL)
		_clear();
	_width = 1;
	_height = 1;
	_pixels = new RGBAPixel[1];
 8049e5a:	89 1c 24             	mov    %ebx,(%esp)
 8049e5d:	e8 4e f7 ff ff       	call   80495b0 <_ZdaPv@plt>
 8049e62:	89 f0                	mov    %esi,%eax
 8049e64:	89 04 24             	mov    %eax,(%esp)
 8049e67:	e8 64 f8 ff ff       	call   80496d0 <_Unwind_Resume@plt>
	_blank();
}
 8049e6c:	83 c4 1c             	add    $0x1c,%esp
 8049e6f:	5b                   	pop    %ebx
 8049e70:	5e                   	pop    %esi
 8049e71:	5f                   	pop    %edi
 8049e72:	5d                   	pop    %ebp
 8049e73:	c3                   	ret    

08049e74 <_ZNK3PNG13_min_clamp_xyERjS0_>:

void PNG::_min_clamp_xy(size_t & width_arg, size_t & height_arg) const
{
 8049e74:	55                   	push   %ebp
 8049e75:	89 e5                	mov    %esp,%ebp
 8049e77:	83 ec 18             	sub    $0x18,%esp
	_min_clamp_x(width_arg);
 8049e7a:	8b 45 0c             	mov    0xc(%ebp),%eax
 8049e7d:	89 44 24 04          	mov    %eax,0x4(%esp)
 8049e81:	8b 45 08             	mov    0x8(%ebp),%eax
 8049e84:	89 04 24             	mov    %eax,(%esp)
 8049e87:	e8 14 00 00 00       	call   8049ea0 <_ZNK3PNG12_min_clamp_xERj>
	_min_clamp_y(height_arg);
 8049e8c:	8b 45 10             	mov    0x10(%ebp),%eax
 8049e8f:	89 44 24 04          	mov    %eax,0x4(%esp)
 8049e93:	8b 45 08             	mov    0x8(%ebp),%eax
 8049e96:	89 04 24             	mov    %eax,(%esp)
 8049e99:	e8 90 00 00 00       	call   8049f2e <_ZNK3PNG12_min_clamp_yERj>
}
 8049e9e:	c9                   	leave  
 8049e9f:	c3                   	ret    

08049ea0 <_ZNK3PNG12_min_clamp_xERj>:

void PNG::_min_clamp_x(size_t & width_arg) const
{
 8049ea0:	55                   	push   %ebp
 8049ea1:	89 e5                	mov    %esp,%ebp
 8049ea3:	53                   	push   %ebx
 8049ea4:	83 ec 24             	sub    $0x24,%esp
	if (width_arg <= 0)
 8049ea7:	8b 45 0c             	mov    0xc(%ebp),%eax
 8049eaa:	8b 00                	mov    (%eax),%eax
 8049eac:	85 c0                	test   %eax,%eax
 8049eae:	75 77                	jne    8049f27 <_ZNK3PNG12_min_clamp_xERj+0x87>
	{
		epng_err("Warning: specified non-positive width, default of 1 being used");
 8049eb0:	8d 45 f3             	lea    -0xd(%ebp),%eax
 8049eb3:	89 04 24             	mov    %eax,(%esp)
 8049eb6:	e8 d5 f7 ff ff       	call   8049690 <_ZNSaIcEC1Ev@plt>
 8049ebb:	8d 45 f3             	lea    -0xd(%ebp),%eax
 8049ebe:	89 44 24 08          	mov    %eax,0x8(%esp)
 8049ec2:	c7 44 24 04 60 fc 04 	movl   $0x804fc60,0x4(%esp)
 8049ec9:	08 
 8049eca:	8d 45 f4             	lea    -0xc(%ebp),%eax
 8049ecd:	89 04 24             	mov    %eax,(%esp)
 8049ed0:	e8 fb f5 ff ff       	call   80494d0 <_ZNSsC1EPKcRKSaIcE@plt>
 8049ed5:	8d 45 f4             	lea    -0xc(%ebp),%eax
 8049ed8:	89 04 24             	mov    %eax,(%esp)
 8049edb:	e8 97 15 00 00       	call   804b477 <_Z8epng_errRKSs>
 8049ee0:	8d 45 f4             	lea    -0xc(%ebp),%eax
 8049ee3:	89 04 24             	mov    %eax,(%esp)
 8049ee6:	e8 55 f5 ff ff       	call   8049440 <_ZNSsD1Ev@plt>
 8049eeb:	8d 45 f3             	lea    -0xd(%ebp),%eax
 8049eee:	89 04 24             	mov    %eax,(%esp)
 8049ef1:	e8 8a f6 ff ff       	call   8049580 <_ZNSaIcED1Ev@plt>
		width_arg = 1;
 8049ef6:	8b 45 0c             	mov    0xc(%ebp),%eax
 8049ef9:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
 8049eff:	eb 26                	jmp    8049f27 <_ZNK3PNG12_min_clamp_xERj+0x87>
 8049f01:	89 c3                	mov    %eax,%ebx

void PNG::_min_clamp_x(size_t & width_arg) const
{
	if (width_arg <= 0)
	{
		epng_err("Warning: specified non-positive width, default of 1 being used");
 8049f03:	8d 45 f4             	lea    -0xc(%ebp),%eax
 8049f06:	89 04 24             	mov    %eax,(%esp)
 8049f09:	e8 32 f5 ff ff       	call   8049440 <_ZNSsD1Ev@plt>
 8049f0e:	eb 02                	jmp    8049f12 <_ZNK3PNG12_min_clamp_xERj+0x72>
 8049f10:	89 c3                	mov    %eax,%ebx
 8049f12:	8d 45 f3             	lea    -0xd(%ebp),%eax
 8049f15:	89 04 24             	mov    %eax,(%esp)
 8049f18:	e8 63 f6 ff ff       	call   8049580 <_ZNSaIcED1Ev@plt>
 8049f1d:	89 d8                	mov    %ebx,%eax
 8049f1f:	89 04 24             	mov    %eax,(%esp)
 8049f22:	e8 a9 f7 ff ff       	call   80496d0 <_Unwind_Resume@plt>
		width_arg = 1;
	}

}
 8049f27:	83 c4 24             	add    $0x24,%esp
 8049f2a:	5b                   	pop    %ebx
 8049f2b:	5d                   	pop    %ebp
 8049f2c:	c3                   	ret    
 8049f2d:	90                   	nop

08049f2e <_ZNK3PNG12_min_clamp_yERj>:

void PNG::_min_clamp_y(size_t & height_arg) const
{
 8049f2e:	55                   	push   %ebp
 8049f2f:	89 e5                	mov    %esp,%ebp
 8049f31:	53                   	push   %ebx
 8049f32:	83 ec 24             	sub    $0x24,%esp
	if (height_arg <= 0)
 8049f35:	8b 45 0c             	mov    0xc(%ebp),%eax
 8049f38:	8b 00                	mov    (%eax),%eax
 8049f3a:	85 c0                	test   %eax,%eax
 8049f3c:	75 77                	jne    8049fb5 <_ZNK3PNG12_min_clamp_yERj+0x87>
	{
		epng_err("Warning: specified non-positive height, default of 1 being used");
 8049f3e:	8d 45 f3             	lea    -0xd(%ebp),%eax
 8049f41:	89 04 24             	mov    %eax,(%esp)
 8049f44:	e8 47 f7 ff ff       	call   8049690 <_ZNSaIcEC1Ev@plt>
 8049f49:	8d 45 f3             	lea    -0xd(%ebp),%eax
 8049f4c:	89 44 24 08          	mov    %eax,0x8(%esp)
 8049f50:	c7 44 24 04 a0 fc 04 	movl   $0x804fca0,0x4(%esp)
 8049f57:	08 
 8049f58:	8d 45 f4             	lea    -0xc(%ebp),%eax
 8049f5b:	89 04 24             	mov    %eax,(%esp)
 8049f5e:	e8 6d f5 ff ff       	call   80494d0 <_ZNSsC1EPKcRKSaIcE@plt>
 8049f63:	8d 45 f4             	lea    -0xc(%ebp),%eax
 8049f66:	89 04 24             	mov    %eax,(%esp)
 8049f69:	e8 09 15 00 00       	call   804b477 <_Z8epng_errRKSs>
 8049f6e:	8d 45 f4             	lea    -0xc(%ebp),%eax
 8049f71:	89 04 24             	mov    %eax,(%esp)
 8049f74:	e8 c7 f4 ff ff       	call   8049440 <_ZNSsD1Ev@plt>
 8049f79:	8d 45 f3             	lea    -0xd(%ebp),%eax
 8049f7c:	89 04 24             	mov    %eax,(%esp)
 8049f7f:	e8 fc f5 ff ff       	call   8049580 <_ZNSaIcED1Ev@plt>
		height_arg = 1;
 8049f84:	8b 45 0c             	mov    0xc(%ebp),%eax
 8049f87:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
 8049f8d:	eb 26                	jmp    8049fb5 <_ZNK3PNG12_min_clamp_yERj+0x87>
 8049f8f:	89 c3                	mov    %eax,%ebx

void PNG::_min_clamp_y(size_t & height_arg) const
{
	if (height_arg <= 0)
	{
		epng_err("Warning: specified non-positive height, default of 1 being used");
 8049f91:	8d 45 f4             	lea    -0xc(%ebp),%eax
 8049f94:	89 04 24             	mov    %eax,(%esp)
 8049f97:	e8 a4 f4 ff ff       	call   8049440 <_ZNSsD1Ev@plt>
 8049f9c:	eb 02                	jmp    8049fa0 <_ZNK3PNG12_min_clamp_yERj+0x72>
 8049f9e:	89 c3                	mov    %eax,%ebx
 8049fa0:	8d 45 f3             	lea    -0xd(%ebp),%eax
 8049fa3:	89 04 24             	mov    %eax,(%esp)
 8049fa6:	e8 d5 f5 ff ff       	call   8049580 <_ZNSaIcED1Ev@plt>
 8049fab:	89 d8                	mov    %ebx,%eax
 8049fad:	89 04 24             	mov    %eax,(%esp)
 8049fb0:	e8 1b f7 ff ff       	call   80496d0 <_Unwind_Resume@plt>
		height_arg = 1;
	}
}
 8049fb5:	83 c4 24             	add    $0x24,%esp
 8049fb8:	5b                   	pop    %ebx
 8049fb9:	5d                   	pop    %ebp
 8049fba:	c3                   	ret    
 8049fbb:	90                   	nop

08049fbc <_ZNK3PNG9_clamp_xyERjS0_>:

void PNG::_clamp_xy(size_t & x, size_t & y) const
{
 8049fbc:	55                   	push   %ebp
 8049fbd:	89 e5                	mov    %esp,%ebp
 8049fbf:	56                   	push   %esi
 8049fc0:	53                   	push   %ebx
 8049fc1:	81 ec e0 00 00 00    	sub    $0xe0,%esp
	size_t i = x;
 8049fc7:	8b 45 0c             	mov    0xc(%ebp),%eax
 8049fca:	8b 00                	mov    (%eax),%eax
 8049fcc:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
	size_t j = y;
 8049fd2:	8b 45 10             	mov    0x10(%ebp),%eax
 8049fd5:	8b 00                	mov    (%eax),%eax
 8049fd7:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
	if (x >= _width)
 8049fdd:	8b 45 0c             	mov    0xc(%ebp),%eax
 8049fe0:	8b 10                	mov    (%eax),%edx
 8049fe2:	8b 45 08             	mov    0x8(%ebp),%eax
 8049fe5:	8b 00                	mov    (%eax),%eax
 8049fe7:	39 c2                	cmp    %eax,%edx
 8049fe9:	72 0d                	jb     8049ff8 <_ZNK3PNG9_clamp_xyERjS0_+0x3c>
		x = _width - 1;
 8049feb:	8b 45 08             	mov    0x8(%ebp),%eax
 8049fee:	8b 00                	mov    (%eax),%eax
 8049ff0:	8d 50 ff             	lea    -0x1(%eax),%edx
 8049ff3:	8b 45 0c             	mov    0xc(%ebp),%eax
 8049ff6:	89 10                	mov    %edx,(%eax)
	if (y >= _height)
 8049ff8:	8b 45 10             	mov    0x10(%ebp),%eax
 8049ffb:	8b 10                	mov    (%eax),%edx
 8049ffd:	8b 45 08             	mov    0x8(%ebp),%eax
 804a000:	8b 40 04             	mov    0x4(%eax),%eax
 804a003:	39 c2                	cmp    %eax,%edx
 804a005:	72 0e                	jb     804a015 <_ZNK3PNG9_clamp_xyERjS0_+0x59>
		y = _height - 1;
 804a007:	8b 45 08             	mov    0x8(%ebp),%eax
 804a00a:	8b 40 04             	mov    0x4(%eax),%eax
 804a00d:	8d 50 ff             	lea    -0x1(%eax),%edx
 804a010:	8b 45 10             	mov    0x10(%ebp),%eax
 804a013:	89 10                	mov    %edx,(%eax)

	if (i != x || j != y)
 804a015:	8b 45 0c             	mov    0xc(%ebp),%eax
 804a018:	8b 00                	mov    (%eax),%eax
 804a01a:	3b 85 34 ff ff ff    	cmp    -0xcc(%ebp),%eax
 804a020:	75 11                	jne    804a033 <_ZNK3PNG9_clamp_xyERjS0_+0x77>
 804a022:	8b 45 10             	mov    0x10(%ebp),%eax
 804a025:	8b 00                	mov    (%eax),%eax
 804a027:	3b 85 38 ff ff ff    	cmp    -0xc8(%ebp),%eax
 804a02d:	0f 84 7f 01 00 00    	je     804a1b2 <_ZNK3PNG9_clamp_xyERjS0_+0x1f6>
	{
		stringstream ss;
 804a033:	c7 44 24 04 08 00 00 	movl   $0x8,0x4(%esp)
 804a03a:	00 
 804a03b:	c7 04 24 10 00 00 00 	movl   $0x10,(%esp)
 804a042:	e8 23 14 00 00       	call   804b46a <_ZStorSt13_Ios_OpenmodeS_>
 804a047:	89 44 24 04          	mov    %eax,0x4(%esp)
 804a04b:	8d 85 3c ff ff ff    	lea    -0xc4(%ebp),%eax
 804a051:	89 04 24             	mov    %eax,(%esp)
 804a054:	e8 97 f4 ff ff       	call   80494f0 <_ZNSt18basic_stringstreamIcSt11char_traitsIcESaIcEEC1ESt13_Ios_Openmode@plt>
		ss << "Warning: attempted to access non-existent pixel "
			<< "(" << i << ", " << j << ");" << endl
			<< "            Truncating request to fit in the range [0,"
			<< (_width - 1) << "] x [0," << (_height - 1) << "]." << endl;
 804a059:	8b 45 08             	mov    0x8(%ebp),%eax
 804a05c:	8b 40 04             	mov    0x4(%eax),%eax
 804a05f:	8d 58 ff             	lea    -0x1(%eax),%ebx
 804a062:	8b 45 08             	mov    0x8(%ebp),%eax
 804a065:	8b 00                	mov    (%eax),%eax
 804a067:	8d 70 ff             	lea    -0x1(%eax),%esi
		y = _height - 1;

	if (i != x || j != y)
	{
		stringstream ss;
		ss << "Warning: attempted to access non-existent pixel "
 804a06a:	c7 44 24 04 e0 fc 04 	movl   $0x804fce0,0x4(%esp)
 804a071:	08 
 804a072:	8d 85 3c ff ff ff    	lea    -0xc4(%ebp),%eax
 804a078:	83 c0 08             	add    $0x8,%eax
 804a07b:	89 04 24             	mov    %eax,(%esp)
 804a07e:	e8 8d f3 ff ff       	call   8049410 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>
			<< "(" << i << ", " << j << ");" << endl
 804a083:	c7 44 24 04 11 fd 04 	movl   $0x804fd11,0x4(%esp)
 804a08a:	08 
 804a08b:	89 04 24             	mov    %eax,(%esp)
 804a08e:	e8 7d f3 ff ff       	call   8049410 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>
 804a093:	8b 95 34 ff ff ff    	mov    -0xcc(%ebp),%edx
 804a099:	89 54 24 04          	mov    %edx,0x4(%esp)
 804a09d:	89 04 24             	mov    %eax,(%esp)
 804a0a0:	e8 5b f4 ff ff       	call   8049500 <_ZNSolsEj@plt>
 804a0a5:	c7 44 24 04 13 fd 04 	movl   $0x804fd13,0x4(%esp)
 804a0ac:	08 
 804a0ad:	89 04 24             	mov    %eax,(%esp)
 804a0b0:	e8 5b f3 ff ff       	call   8049410 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>
 804a0b5:	8b 95 38 ff ff ff    	mov    -0xc8(%ebp),%edx
 804a0bb:	89 54 24 04          	mov    %edx,0x4(%esp)
 804a0bf:	89 04 24             	mov    %eax,(%esp)
 804a0c2:	e8 39 f4 ff ff       	call   8049500 <_ZNSolsEj@plt>
 804a0c7:	c7 44 24 04 16 fd 04 	movl   $0x804fd16,0x4(%esp)
 804a0ce:	08 
 804a0cf:	89 04 24             	mov    %eax,(%esp)
 804a0d2:	e8 39 f3 ff ff       	call   8049410 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>
 804a0d7:	c7 44 24 04 20 96 04 	movl   $0x8049620,0x4(%esp)
 804a0de:	08 
 804a0df:	89 04 24             	mov    %eax,(%esp)
 804a0e2:	e8 d9 f4 ff ff       	call   80495c0 <_ZNSolsEPFRSoS_E@plt>
			<< "            Truncating request to fit in the range [0,"
 804a0e7:	c7 44 24 04 1c fd 04 	movl   $0x804fd1c,0x4(%esp)
 804a0ee:	08 
 804a0ef:	89 04 24             	mov    %eax,(%esp)
 804a0f2:	e8 19 f3 ff ff       	call   8049410 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>
			<< (_width - 1) << "] x [0," << (_height - 1) << "]." << endl;
 804a0f7:	89 74 24 04          	mov    %esi,0x4(%esp)
 804a0fb:	89 04 24             	mov    %eax,(%esp)
 804a0fe:	e8 fd f3 ff ff       	call   8049500 <_ZNSolsEj@plt>
 804a103:	c7 44 24 04 53 fd 04 	movl   $0x804fd53,0x4(%esp)
 804a10a:	08 
 804a10b:	89 04 24             	mov    %eax,(%esp)
 804a10e:	e8 fd f2 ff ff       	call   8049410 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>
 804a113:	89 5c 24 04          	mov    %ebx,0x4(%esp)
 804a117:	89 04 24             	mov    %eax,(%esp)
 804a11a:	e8 e1 f3 ff ff       	call   8049500 <_ZNSolsEj@plt>
 804a11f:	c7 44 24 04 5b fd 04 	movl   $0x804fd5b,0x4(%esp)
 804a126:	08 
 804a127:	89 04 24             	mov    %eax,(%esp)
 804a12a:	e8 e1 f2 ff ff       	call   8049410 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>
 804a12f:	c7 44 24 04 20 96 04 	movl   $0x8049620,0x4(%esp)
 804a136:	08 
 804a137:	89 04 24             	mov    %eax,(%esp)
 804a13a:	e8 81 f4 ff ff       	call   80495c0 <_ZNSolsEPFRSoS_E@plt>
		epng_err(ss.str());  
 804a13f:	8d 85 30 ff ff ff    	lea    -0xd0(%ebp),%eax
 804a145:	8d 95 3c ff ff ff    	lea    -0xc4(%ebp),%edx
 804a14b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804a14f:	89 04 24             	mov    %eax,(%esp)
 804a152:	e8 69 f5 ff ff       	call   80496c0 <_ZNKSt18basic_stringstreamIcSt11char_traitsIcESaIcEE3strEv@plt>
 804a157:	83 ec 04             	sub    $0x4,%esp
 804a15a:	8d 85 30 ff ff ff    	lea    -0xd0(%ebp),%eax
 804a160:	89 04 24             	mov    %eax,(%esp)
 804a163:	e8 0f 13 00 00       	call   804b477 <_Z8epng_errRKSs>
 804a168:	8d 85 30 ff ff ff    	lea    -0xd0(%ebp),%eax
 804a16e:	89 04 24             	mov    %eax,(%esp)
 804a171:	e8 ca f2 ff ff       	call   8049440 <_ZNSsD1Ev@plt>
 804a176:	8d 85 3c ff ff ff    	lea    -0xc4(%ebp),%eax
 804a17c:	89 04 24             	mov    %eax,(%esp)
 804a17f:	e8 cc f4 ff ff       	call   8049650 <_ZNSt18basic_stringstreamIcSt11char_traitsIcESaIcEED1Ev@plt>
	}
}
 804a184:	eb 2c                	jmp    804a1b2 <_ZNK3PNG9_clamp_xyERjS0_+0x1f6>
 804a186:	89 c3                	mov    %eax,%ebx
		stringstream ss;
		ss << "Warning: attempted to access non-existent pixel "
			<< "(" << i << ", " << j << ");" << endl
			<< "            Truncating request to fit in the range [0,"
			<< (_width - 1) << "] x [0," << (_height - 1) << "]." << endl;
		epng_err(ss.str());  
 804a188:	8d 85 30 ff ff ff    	lea    -0xd0(%ebp),%eax
 804a18e:	89 04 24             	mov    %eax,(%esp)
 804a191:	e8 aa f2 ff ff       	call   8049440 <_ZNSsD1Ev@plt>
 804a196:	eb 02                	jmp    804a19a <_ZNK3PNG9_clamp_xyERjS0_+0x1de>
 804a198:	89 c3                	mov    %eax,%ebx
 804a19a:	8d 85 3c ff ff ff    	lea    -0xc4(%ebp),%eax
 804a1a0:	89 04 24             	mov    %eax,(%esp)
 804a1a3:	e8 a8 f4 ff ff       	call   8049650 <_ZNSt18basic_stringstreamIcSt11char_traitsIcESaIcEED1Ev@plt>
 804a1a8:	89 d8                	mov    %ebx,%eax
 804a1aa:	89 04 24             	mov    %eax,(%esp)
 804a1ad:	e8 1e f5 ff ff       	call   80496d0 <_Unwind_Resume@plt>
	}
}
 804a1b2:	8d 65 f8             	lea    -0x8(%ebp),%esp
 804a1b5:	5b                   	pop    %ebx
 804a1b6:	5e                   	pop    %esi
 804a1b7:	5d                   	pop    %ebp
 804a1b8:	c3                   	ret    
 804a1b9:	90                   	nop

0804a1ba <_ZN3PNGC1Ev>:

PNG::PNG()
 804a1ba:	55                   	push   %ebp
 804a1bb:	89 e5                	mov    %esp,%ebp
 804a1bd:	83 ec 18             	sub    $0x18,%esp
{
	_pixels = NULL;
 804a1c0:	8b 45 08             	mov    0x8(%ebp),%eax
 804a1c3:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
	_init();
 804a1ca:	8b 45 08             	mov    0x8(%ebp),%eax
 804a1cd:	89 04 24             	mov    %eax,(%esp)
 804a1d0:	e8 13 fc ff ff       	call   8049de8 <_ZN3PNG5_initEv>
}
 804a1d5:	c9                   	leave  
 804a1d6:	c3                   	ret    
 804a1d7:	90                   	nop

0804a1d8 <_ZN3PNGC1Ejj>:

PNG::PNG(size_t width_arg, size_t height_arg)
 804a1d8:	55                   	push   %ebp
 804a1d9:	89 e5                	mov    %esp,%ebp
 804a1db:	57                   	push   %edi
 804a1dc:	56                   	push   %esi
 804a1dd:	53                   	push   %ebx
 804a1de:	83 ec 1c             	sub    $0x1c,%esp
{
	_width = width_arg;
 804a1e1:	8b 45 08             	mov    0x8(%ebp),%eax
 804a1e4:	8b 55 0c             	mov    0xc(%ebp),%edx
 804a1e7:	89 10                	mov    %edx,(%eax)
	_height = height_arg;
 804a1e9:	8b 45 08             	mov    0x8(%ebp),%eax
 804a1ec:	8b 55 10             	mov    0x10(%ebp),%edx
 804a1ef:	89 50 04             	mov    %edx,0x4(%eax)
	_pixels = new RGBAPixel[_height * _width];
 804a1f2:	8b 45 08             	mov    0x8(%ebp),%eax
 804a1f5:	8b 50 04             	mov    0x4(%eax),%edx
 804a1f8:	8b 45 08             	mov    0x8(%ebp),%eax
 804a1fb:	8b 00                	mov    (%eax),%eax
 804a1fd:	0f af d0             	imul   %eax,%edx
 804a200:	89 d6                	mov    %edx,%esi
 804a202:	81 fe 00 00 c0 1f    	cmp    $0x1fc00000,%esi
 804a208:	77 09                	ja     804a213 <_ZN3PNGC1Ejj+0x3b>
 804a20a:	8d 04 b5 00 00 00 00 	lea    0x0(,%esi,4),%eax
 804a211:	eb 05                	jmp    804a218 <_ZN3PNGC1Ejj+0x40>
 804a213:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 804a218:	89 04 24             	mov    %eax,(%esp)
 804a21b:	e8 30 f3 ff ff       	call   8049550 <_Znaj@plt>
 804a220:	89 c3                	mov    %eax,%ebx
 804a222:	89 d8                	mov    %ebx,%eax
 804a224:	8d 56 ff             	lea    -0x1(%esi),%edx
 804a227:	89 d7                	mov    %edx,%edi
 804a229:	89 c6                	mov    %eax,%esi
 804a22b:	eb 0e                	jmp    804a23b <_ZN3PNGC1Ejj+0x63>
 804a22d:	89 34 24             	mov    %esi,(%esp)
 804a230:	e8 b5 f7 ff ff       	call   80499ea <_ZN9RGBAPixelC1Ev>
 804a235:	83 c6 04             	add    $0x4,%esi
 804a238:	83 ef 01             	sub    $0x1,%edi
 804a23b:	83 ff ff             	cmp    $0xffffffff,%edi
 804a23e:	75 ed                	jne    804a22d <_ZN3PNGC1Ejj+0x55>
 804a240:	8b 45 08             	mov    0x8(%ebp),%eax
 804a243:	89 58 08             	mov    %ebx,0x8(%eax)
	_blank();
 804a246:	8b 45 08             	mov    0x8(%ebp),%eax
 804a249:	89 04 24             	mov    %eax,(%esp)
 804a24c:	e8 29 fb ff ff       	call   8049d7a <_ZN3PNG6_blankEv>
 804a251:	eb 14                	jmp    804a267 <_ZN3PNGC1Ejj+0x8f>
 804a253:	89 c6                	mov    %eax,%esi

PNG::PNG(size_t width_arg, size_t height_arg)
{
	_width = width_arg;
	_height = height_arg;
	_pixels = new RGBAPixel[_height * _width];
 804a255:	89 1c 24             	mov    %ebx,(%esp)
 804a258:	e8 53 f3 ff ff       	call   80495b0 <_ZdaPv@plt>
 804a25d:	89 f0                	mov    %esi,%eax
 804a25f:	89 04 24             	mov    %eax,(%esp)
 804a262:	e8 69 f4 ff ff       	call   80496d0 <_Unwind_Resume@plt>
	_blank();
}
 804a267:	83 c4 1c             	add    $0x1c,%esp
 804a26a:	5b                   	pop    %ebx
 804a26b:	5e                   	pop    %esi
 804a26c:	5f                   	pop    %edi
 804a26d:	5d                   	pop    %ebp
 804a26e:	c3                   	ret    
 804a26f:	90                   	nop

0804a270 <_ZN3PNGC1ERKSs>:

PNG::PNG(string const & file_name)
 804a270:	55                   	push   %ebp
 804a271:	89 e5                	mov    %esp,%ebp
 804a273:	83 ec 18             	sub    $0x18,%esp
{
	_pixels = NULL;
 804a276:	8b 45 08             	mov    0x8(%ebp),%eax
 804a279:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
	_read_file(file_name);
 804a280:	8b 45 0c             	mov    0xc(%ebp),%eax
 804a283:	89 44 24 04          	mov    %eax,0x4(%esp)
 804a287:	8b 45 08             	mov    0x8(%ebp),%eax
 804a28a:	89 04 24             	mov    %eax,(%esp)
 804a28d:	e8 2e 02 00 00       	call   804a4c0 <_ZN3PNG10_read_fileERKSs>
}
 804a292:	c9                   	leave  
 804a293:	c3                   	ret    

0804a294 <_ZN3PNGC1ERKS_>:

PNG::PNG(PNG const & other)
 804a294:	55                   	push   %ebp
 804a295:	89 e5                	mov    %esp,%ebp
 804a297:	83 ec 18             	sub    $0x18,%esp
{
	_copy(other);
 804a29a:	8b 45 0c             	mov    0xc(%ebp),%eax
 804a29d:	89 44 24 04          	mov    %eax,0x4(%esp)
 804a2a1:	8b 45 08             	mov    0x8(%ebp),%eax
 804a2a4:	89 04 24             	mov    %eax,(%esp)
 804a2a7:	e8 d6 f9 ff ff       	call   8049c82 <_ZN3PNG5_copyERKS_>
}
 804a2ac:	c9                   	leave  
 804a2ad:	c3                   	ret    

0804a2ae <_ZN3PNGD1Ev>:

PNG::~PNG()
 804a2ae:	55                   	push   %ebp
 804a2af:	89 e5                	mov    %esp,%ebp
 804a2b1:	83 ec 18             	sub    $0x18,%esp
{
	_clear();
 804a2b4:	8b 45 08             	mov    0x8(%ebp),%eax
 804a2b7:	89 04 24             	mov    %eax,(%esp)
 804a2ba:	e8 99 f9 ff ff       	call   8049c58 <_ZN3PNG6_clearEv>
}
 804a2bf:	c9                   	leave  
 804a2c0:	c3                   	ret    
 804a2c1:	90                   	nop

0804a2c2 <_ZN3PNGaSERKS_>:

PNG const & PNG::operator=(PNG const & other)
{
 804a2c2:	55                   	push   %ebp
 804a2c3:	89 e5                	mov    %esp,%ebp
 804a2c5:	83 ec 18             	sub    $0x18,%esp
	if (this != &other)
 804a2c8:	8b 45 08             	mov    0x8(%ebp),%eax
 804a2cb:	3b 45 0c             	cmp    0xc(%ebp),%eax
 804a2ce:	74 1d                	je     804a2ed <_ZN3PNGaSERKS_+0x2b>
	{
		_clear();
 804a2d0:	8b 45 08             	mov    0x8(%ebp),%eax
 804a2d3:	89 04 24             	mov    %eax,(%esp)
 804a2d6:	e8 7d f9 ff ff       	call   8049c58 <_ZN3PNG6_clearEv>
		_copy(other);
 804a2db:	8b 45 0c             	mov    0xc(%ebp),%eax
 804a2de:	89 44 24 04          	mov    %eax,0x4(%esp)
 804a2e2:	8b 45 08             	mov    0x8(%ebp),%eax
 804a2e5:	89 04 24             	mov    %eax,(%esp)
 804a2e8:	e8 95 f9 ff ff       	call   8049c82 <_ZN3PNG5_copyERKS_>
	}
	return *this;
 804a2ed:	8b 45 08             	mov    0x8(%ebp),%eax
}
 804a2f0:	c9                   	leave  
 804a2f1:	c3                   	ret    

0804a2f2 <_ZNK3PNG12_pixels_sameERK9RGBAPixelS2_>:

bool PNG::_pixels_same( const RGBAPixel & first, const RGBAPixel & second ) const {
 804a2f2:	55                   	push   %ebp
 804a2f3:	89 e5                	mov    %esp,%ebp
    return first.red == second.red && first.green == second.green && first.blue == second.blue && first.alpha == second.alpha;
 804a2f5:	8b 45 0c             	mov    0xc(%ebp),%eax
 804a2f8:	0f b6 10             	movzbl (%eax),%edx
 804a2fb:	8b 45 10             	mov    0x10(%ebp),%eax
 804a2fe:	0f b6 00             	movzbl (%eax),%eax
 804a301:	38 c2                	cmp    %al,%dl
 804a303:	75 3d                	jne    804a342 <_ZNK3PNG12_pixels_sameERK9RGBAPixelS2_+0x50>
 804a305:	8b 45 0c             	mov    0xc(%ebp),%eax
 804a308:	0f b6 50 01          	movzbl 0x1(%eax),%edx
 804a30c:	8b 45 10             	mov    0x10(%ebp),%eax
 804a30f:	0f b6 40 01          	movzbl 0x1(%eax),%eax
 804a313:	38 c2                	cmp    %al,%dl
 804a315:	75 2b                	jne    804a342 <_ZNK3PNG12_pixels_sameERK9RGBAPixelS2_+0x50>
 804a317:	8b 45 0c             	mov    0xc(%ebp),%eax
 804a31a:	0f b6 50 02          	movzbl 0x2(%eax),%edx
 804a31e:	8b 45 10             	mov    0x10(%ebp),%eax
 804a321:	0f b6 40 02          	movzbl 0x2(%eax),%eax
 804a325:	38 c2                	cmp    %al,%dl
 804a327:	75 19                	jne    804a342 <_ZNK3PNG12_pixels_sameERK9RGBAPixelS2_+0x50>
 804a329:	8b 45 0c             	mov    0xc(%ebp),%eax
 804a32c:	0f b6 50 03          	movzbl 0x3(%eax),%edx
 804a330:	8b 45 10             	mov    0x10(%ebp),%eax
 804a333:	0f b6 40 03          	movzbl 0x3(%eax),%eax
 804a337:	38 c2                	cmp    %al,%dl
 804a339:	75 07                	jne    804a342 <_ZNK3PNG12_pixels_sameERK9RGBAPixelS2_+0x50>
 804a33b:	b8 01 00 00 00       	mov    $0x1,%eax
 804a340:	eb 05                	jmp    804a347 <_ZNK3PNG12_pixels_sameERK9RGBAPixelS2_+0x55>
 804a342:	b8 00 00 00 00       	mov    $0x0,%eax
}
 804a347:	5d                   	pop    %ebp
 804a348:	c3                   	ret    
 804a349:	90                   	nop

0804a34a <_ZNK3PNGeqERKS_>:

bool PNG::operator==(PNG const & other) const
{
 804a34a:	55                   	push   %ebp
 804a34b:	89 e5                	mov    %esp,%ebp
 804a34d:	53                   	push   %ebx
 804a34e:	83 ec 1c             	sub    $0x1c,%esp
	if (_width != other._width || _height != other._height)
 804a351:	8b 45 08             	mov    0x8(%ebp),%eax
 804a354:	8b 10                	mov    (%eax),%edx
 804a356:	8b 45 0c             	mov    0xc(%ebp),%eax
 804a359:	8b 00                	mov    (%eax),%eax
 804a35b:	39 c2                	cmp    %eax,%edx
 804a35d:	75 10                	jne    804a36f <_ZNK3PNGeqERKS_+0x25>
 804a35f:	8b 45 08             	mov    0x8(%ebp),%eax
 804a362:	8b 50 04             	mov    0x4(%eax),%edx
 804a365:	8b 45 0c             	mov    0xc(%ebp),%eax
 804a368:	8b 40 04             	mov    0x4(%eax),%eax
 804a36b:	39 c2                	cmp    %eax,%edx
 804a36d:	74 0a                	je     804a379 <_ZNK3PNGeqERKS_+0x2f>
		return false;
 804a36f:	b8 00 00 00 00       	mov    $0x0,%eax
 804a374:	e9 89 00 00 00       	jmp    804a402 <_ZNK3PNGeqERKS_+0xb8>
	for (size_t y = 0; y < _height; y++)
 804a379:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
 804a380:	eb 70                	jmp    804a3f2 <_ZNK3PNGeqERKS_+0xa8>
	{
		for (size_t x = 0; x < _width; x++)
 804a382:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
 804a389:	eb 59                	jmp    804a3e4 <_ZNK3PNGeqERKS_+0x9a>
		{
            if( !_pixels_same( _pixel( x, y ), other._pixel( x, y ) ) )
 804a38b:	8b 45 f4             	mov    -0xc(%ebp),%eax
 804a38e:	89 44 24 08          	mov    %eax,0x8(%esp)
 804a392:	8b 45 f8             	mov    -0x8(%ebp),%eax
 804a395:	89 44 24 04          	mov    %eax,0x4(%esp)
 804a399:	8b 45 0c             	mov    0xc(%ebp),%eax
 804a39c:	89 04 24             	mov    %eax,(%esp)
 804a39f:	e8 94 f8 ff ff       	call   8049c38 <_ZNK3PNG6_pixelEjj>
 804a3a4:	89 c3                	mov    %eax,%ebx
 804a3a6:	8b 45 f4             	mov    -0xc(%ebp),%eax
 804a3a9:	89 44 24 08          	mov    %eax,0x8(%esp)
 804a3ad:	8b 45 f8             	mov    -0x8(%ebp),%eax
 804a3b0:	89 44 24 04          	mov    %eax,0x4(%esp)
 804a3b4:	8b 45 08             	mov    0x8(%ebp),%eax
 804a3b7:	89 04 24             	mov    %eax,(%esp)
 804a3ba:	e8 79 f8 ff ff       	call   8049c38 <_ZNK3PNG6_pixelEjj>
 804a3bf:	89 5c 24 08          	mov    %ebx,0x8(%esp)
 804a3c3:	89 44 24 04          	mov    %eax,0x4(%esp)
 804a3c7:	8b 45 08             	mov    0x8(%ebp),%eax
 804a3ca:	89 04 24             	mov    %eax,(%esp)
 804a3cd:	e8 20 ff ff ff       	call   804a2f2 <_ZNK3PNG12_pixels_sameERK9RGBAPixelS2_>
 804a3d2:	83 f0 01             	xor    $0x1,%eax
 804a3d5:	84 c0                	test   %al,%al
 804a3d7:	74 07                	je     804a3e0 <_ZNK3PNGeqERKS_+0x96>
				return false;
 804a3d9:	b8 00 00 00 00       	mov    $0x0,%eax
 804a3de:	eb 22                	jmp    804a402 <_ZNK3PNGeqERKS_+0xb8>
{
	if (_width != other._width || _height != other._height)
		return false;
	for (size_t y = 0; y < _height; y++)
	{
		for (size_t x = 0; x < _width; x++)
 804a3e0:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
 804a3e4:	8b 45 08             	mov    0x8(%ebp),%eax
 804a3e7:	8b 00                	mov    (%eax),%eax
 804a3e9:	3b 45 f8             	cmp    -0x8(%ebp),%eax
 804a3ec:	77 9d                	ja     804a38b <_ZNK3PNGeqERKS_+0x41>

bool PNG::operator==(PNG const & other) const
{
	if (_width != other._width || _height != other._height)
		return false;
	for (size_t y = 0; y < _height; y++)
 804a3ee:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
 804a3f2:	8b 45 08             	mov    0x8(%ebp),%eax
 804a3f5:	8b 40 04             	mov    0x4(%eax),%eax
 804a3f8:	3b 45 f4             	cmp    -0xc(%ebp),%eax
 804a3fb:	77 85                	ja     804a382 <_ZNK3PNGeqERKS_+0x38>
		{
            if( !_pixels_same( _pixel( x, y ), other._pixel( x, y ) ) )
				return false;
		}
	}
	return true;
 804a3fd:	b8 01 00 00 00       	mov    $0x1,%eax
}
 804a402:	83 c4 1c             	add    $0x1c,%esp
 804a405:	5b                   	pop    %ebx
 804a406:	5d                   	pop    %ebp
 804a407:	c3                   	ret    

0804a408 <_ZNK3PNGneERKS_>:

bool PNG::operator!=(PNG const & other) const
{
 804a408:	55                   	push   %ebp
 804a409:	89 e5                	mov    %esp,%ebp
 804a40b:	83 ec 08             	sub    $0x8,%esp
	return !(*this == other);
 804a40e:	8b 45 0c             	mov    0xc(%ebp),%eax
 804a411:	89 44 24 04          	mov    %eax,0x4(%esp)
 804a415:	8b 45 08             	mov    0x8(%ebp),%eax
 804a418:	89 04 24             	mov    %eax,(%esp)
 804a41b:	e8 2a ff ff ff       	call   804a34a <_ZNK3PNGeqERKS_>
 804a420:	83 f0 01             	xor    $0x1,%eax
}
 804a423:	c9                   	leave  
 804a424:	c3                   	ret    
 804a425:	90                   	nop

0804a426 <_ZN3PNGclEjj>:

RGBAPixel * PNG::operator()(size_t x, size_t y)
{
 804a426:	55                   	push   %ebp
 804a427:	89 e5                	mov    %esp,%ebp
 804a429:	83 ec 18             	sub    $0x18,%esp
	_clamp_xy(x, y);
 804a42c:	8d 45 10             	lea    0x10(%ebp),%eax
 804a42f:	89 44 24 08          	mov    %eax,0x8(%esp)
 804a433:	8d 45 0c             	lea    0xc(%ebp),%eax
 804a436:	89 44 24 04          	mov    %eax,0x4(%esp)
 804a43a:	8b 45 08             	mov    0x8(%ebp),%eax
 804a43d:	89 04 24             	mov    %eax,(%esp)
 804a440:	e8 77 fb ff ff       	call   8049fbc <_ZNK3PNG9_clamp_xyERjS0_>
	return &(_pixel(x,y));
 804a445:	8b 55 10             	mov    0x10(%ebp),%edx
 804a448:	8b 45 0c             	mov    0xc(%ebp),%eax
 804a44b:	89 54 24 08          	mov    %edx,0x8(%esp)
 804a44f:	89 44 24 04          	mov    %eax,0x4(%esp)
 804a453:	8b 45 08             	mov    0x8(%ebp),%eax
 804a456:	89 04 24             	mov    %eax,(%esp)
 804a459:	e8 da f7 ff ff       	call   8049c38 <_ZNK3PNG6_pixelEjj>
}
 804a45e:	c9                   	leave  
 804a45f:	c3                   	ret    

0804a460 <_ZNK3PNGclEjj>:

RGBAPixel const * PNG::operator()(size_t x, size_t y) const
{
 804a460:	55                   	push   %ebp
 804a461:	89 e5                	mov    %esp,%ebp
 804a463:	83 ec 18             	sub    $0x18,%esp
	_clamp_xy(x, y);
 804a466:	8d 45 10             	lea    0x10(%ebp),%eax
 804a469:	89 44 24 08          	mov    %eax,0x8(%esp)
 804a46d:	8d 45 0c             	lea    0xc(%ebp),%eax
 804a470:	89 44 24 04          	mov    %eax,0x4(%esp)
 804a474:	8b 45 08             	mov    0x8(%ebp),%eax
 804a477:	89 04 24             	mov    %eax,(%esp)
 804a47a:	e8 3d fb ff ff       	call   8049fbc <_ZNK3PNG9_clamp_xyERjS0_>
	return &(_pixel(x,y));
 804a47f:	8b 55 10             	mov    0x10(%ebp),%edx
 804a482:	8b 45 0c             	mov    0xc(%ebp),%eax
 804a485:	89 54 24 08          	mov    %edx,0x8(%esp)
 804a489:	89 44 24 04          	mov    %eax,0x4(%esp)
 804a48d:	8b 45 08             	mov    0x8(%ebp),%eax
 804a490:	89 04 24             	mov    %eax,(%esp)
 804a493:	e8 a0 f7 ff ff       	call   8049c38 <_ZNK3PNG6_pixelEjj>
}
 804a498:	c9                   	leave  
 804a499:	c3                   	ret    

0804a49a <_ZN3PNG12readFromFileERKSs>:

bool PNG::readFromFile(string const & file_name)
{
 804a49a:	55                   	push   %ebp
 804a49b:	89 e5                	mov    %esp,%ebp
 804a49d:	83 ec 18             	sub    $0x18,%esp
	_clear();
 804a4a0:	8b 45 08             	mov    0x8(%ebp),%eax
 804a4a3:	89 04 24             	mov    %eax,(%esp)
 804a4a6:	e8 ad f7 ff ff       	call   8049c58 <_ZN3PNG6_clearEv>
	return _read_file(file_name);
 804a4ab:	8b 45 0c             	mov    0xc(%ebp),%eax
 804a4ae:	89 44 24 04          	mov    %eax,0x4(%esp)
 804a4b2:	8b 45 08             	mov    0x8(%ebp),%eax
 804a4b5:	89 04 24             	mov    %eax,(%esp)
 804a4b8:	e8 03 00 00 00       	call   804a4c0 <_ZN3PNG10_read_fileERKSs>
}
 804a4bd:	c9                   	leave  
 804a4be:	c3                   	ret    
 804a4bf:	90                   	nop

0804a4c0 <_ZN3PNG10_read_fileERKSs>:

// TODO: clean up error handling, too much dupe code right now
bool PNG::_read_file(string const & file_name)
{
 804a4c0:	55                   	push   %ebp
 804a4c1:	89 e5                	mov    %esp,%ebp
 804a4c3:	57                   	push   %edi
 804a4c4:	56                   	push   %esi
 804a4c5:	53                   	push   %ebx
 804a4c6:	83 ec 6c             	sub    $0x6c,%esp
 804a4c9:	8b 45 08             	mov    0x8(%ebp),%eax
 804a4cc:	89 45 a4             	mov    %eax,-0x5c(%ebp)
 804a4cf:	8b 45 0c             	mov    0xc(%ebp),%eax
 804a4d2:	89 45 a0             	mov    %eax,-0x60(%ebp)
 804a4d5:	65 a1 14 00 00 00    	mov    %gs:0x14,%eax
 804a4db:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 804a4de:	31 c0                	xor    %eax,%eax
	// unfortunately, we need to break down to the C-code level here, since
	// libpng is written in C itself

	// we need to open the file in binary mode
	FILE * fp = fopen(file_name.c_str(), "rb");
 804a4e0:	8b 45 a0             	mov    -0x60(%ebp),%eax
 804a4e3:	89 04 24             	mov    %eax,(%esp)
 804a4e6:	e8 45 ee ff ff       	call   8049330 <_ZNKSs5c_strEv@plt>
 804a4eb:	c7 44 24 04 5e fd 04 	movl   $0x804fd5e,0x4(%esp)
 804a4f2:	08 
 804a4f3:	89 04 24             	mov    %eax,(%esp)
 804a4f6:	e8 b5 ef ff ff       	call   80494b0 <fopen@plt>
 804a4fb:	89 45 c8             	mov    %eax,-0x38(%ebp)
	if (!fp)
 804a4fe:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
 804a502:	75 3d                	jne    804a541 <_ZN3PNG10_read_fileERKSs+0x81>
	{
		epng_err("Failed to open " + file_name);
 804a504:	8d 45 b8             	lea    -0x48(%ebp),%eax
 804a507:	8b 55 a0             	mov    -0x60(%ebp),%edx
 804a50a:	89 54 24 08          	mov    %edx,0x8(%esp)
 804a50e:	c7 44 24 04 61 fd 04 	movl   $0x804fd61,0x4(%esp)
 804a515:	08 
 804a516:	89 04 24             	mov    %eax,(%esp)
 804a519:	e8 94 0f 00 00       	call   804b4b2 <_ZStplIcSt11char_traitsIcESaIcEESbIT_T0_T1_EPKS3_RKS6_>
 804a51e:	83 ec 04             	sub    $0x4,%esp
 804a521:	8d 45 b8             	lea    -0x48(%ebp),%eax
 804a524:	89 04 24             	mov    %eax,(%esp)
 804a527:	e8 4b 0f 00 00       	call   804b477 <_Z8epng_errRKSs>
 804a52c:	8d 45 b8             	lea    -0x48(%ebp),%eax
 804a52f:	89 04 24             	mov    %eax,(%esp)
 804a532:	e8 09 ef ff ff       	call   8049440 <_ZNSsD1Ev@plt>
		return false;
 804a537:	b8 00 00 00 00       	mov    $0x0,%eax
 804a53c:	e9 43 06 00 00       	jmp    804ab84 <_ZN3PNG10_read_fileERKSs+0x6c4>
	}

	// read in the header (max size of 8), use it to validate this as a PNG file
	png_byte header[8];
	fread(header, 1, 8, fp);
 804a541:	8b 45 c8             	mov    -0x38(%ebp),%eax
 804a544:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804a548:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
 804a54f:	00 
 804a550:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
 804a557:	00 
 804a558:	8d 45 dc             	lea    -0x24(%ebp),%eax
 804a55b:	89 04 24             	mov    %eax,(%esp)
 804a55e:	e8 0d f1 ff ff       	call   8049670 <fread@plt>
	if (png_sig_cmp(header, 0, 8))
 804a563:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
 804a56a:	00 
 804a56b:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
 804a572:	00 
 804a573:	8d 45 dc             	lea    -0x24(%ebp),%eax
 804a576:	89 04 24             	mov    %eax,(%esp)
 804a579:	e8 92 ed ff ff       	call   8049310 <png_sig_cmp@plt>
 804a57e:	85 c0                	test   %eax,%eax
 804a580:	0f 95 c0             	setne  %al
 804a583:	84 c0                	test   %al,%al
 804a585:	74 66                	je     804a5ed <_ZN3PNG10_read_fileERKSs+0x12d>
	{
		epng_err("File is not a valid PNG file");
 804a587:	8d 45 b4             	lea    -0x4c(%ebp),%eax
 804a58a:	89 04 24             	mov    %eax,(%esp)
 804a58d:	e8 fe f0 ff ff       	call   8049690 <_ZNSaIcEC1Ev@plt>
 804a592:	8d 45 b4             	lea    -0x4c(%ebp),%eax
 804a595:	89 44 24 08          	mov    %eax,0x8(%esp)
 804a599:	c7 44 24 04 71 fd 04 	movl   $0x804fd71,0x4(%esp)
 804a5a0:	08 
 804a5a1:	8d 45 b8             	lea    -0x48(%ebp),%eax
 804a5a4:	89 04 24             	mov    %eax,(%esp)
 804a5a7:	e8 24 ef ff ff       	call   80494d0 <_ZNSsC1EPKcRKSaIcE@plt>
 804a5ac:	8d 45 b8             	lea    -0x48(%ebp),%eax
 804a5af:	89 04 24             	mov    %eax,(%esp)
 804a5b2:	e8 c0 0e 00 00       	call   804b477 <_Z8epng_errRKSs>
 804a5b7:	8d 45 b8             	lea    -0x48(%ebp),%eax
 804a5ba:	89 04 24             	mov    %eax,(%esp)
 804a5bd:	e8 7e ee ff ff       	call   8049440 <_ZNSsD1Ev@plt>
 804a5c2:	8d 45 b4             	lea    -0x4c(%ebp),%eax
 804a5c5:	89 04 24             	mov    %eax,(%esp)
 804a5c8:	e8 b3 ef ff ff       	call   8049580 <_ZNSaIcED1Ev@plt>
		fclose(fp);
 804a5cd:	8b 45 c8             	mov    -0x38(%ebp),%eax
 804a5d0:	89 04 24             	mov    %eax,(%esp)
 804a5d3:	e8 98 ee ff ff       	call   8049470 <fclose@plt>
		_init();
 804a5d8:	8b 45 a4             	mov    -0x5c(%ebp),%eax
 804a5db:	89 04 24             	mov    %eax,(%esp)
 804a5de:	e8 05 f8 ff ff       	call   8049de8 <_ZN3PNG5_initEv>
		return false;
 804a5e3:	b8 00 00 00 00       	mov    $0x0,%eax
 804a5e8:	e9 97 05 00 00       	jmp    804ab84 <_ZN3PNG10_read_fileERKSs+0x6c4>
	}

	// set up libpng structs for reading info
	png_structp png_ptr = png_create_read_struct(PNG_LIBPNG_VER_STRING, NULL, NULL, NULL); if (!png_ptr)
 804a5ed:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
 804a5f4:	00 
 804a5f5:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
 804a5fc:	00 
 804a5fd:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
 804a604:	00 
 804a605:	c7 04 24 8e fd 04 08 	movl   $0x804fd8e,(%esp)
 804a60c:	e8 bf ef ff ff       	call   80495d0 <png_create_read_struct@plt>
 804a611:	89 45 b0             	mov    %eax,-0x50(%ebp)
 804a614:	8b 45 b0             	mov    -0x50(%ebp),%eax
 804a617:	85 c0                	test   %eax,%eax
 804a619:	75 66                	jne    804a681 <_ZN3PNG10_read_fileERKSs+0x1c1>
	{
		epng_err("Failed to create read struct");
 804a61b:	8d 45 b4             	lea    -0x4c(%ebp),%eax
 804a61e:	89 04 24             	mov    %eax,(%esp)
 804a621:	e8 6a f0 ff ff       	call   8049690 <_ZNSaIcEC1Ev@plt>
 804a626:	8d 45 b4             	lea    -0x4c(%ebp),%eax
 804a629:	89 44 24 08          	mov    %eax,0x8(%esp)
 804a62d:	c7 44 24 04 95 fd 04 	movl   $0x804fd95,0x4(%esp)
 804a634:	08 
 804a635:	8d 45 b8             	lea    -0x48(%ebp),%eax
 804a638:	89 04 24             	mov    %eax,(%esp)
 804a63b:	e8 90 ee ff ff       	call   80494d0 <_ZNSsC1EPKcRKSaIcE@plt>
 804a640:	8d 45 b8             	lea    -0x48(%ebp),%eax
 804a643:	89 04 24             	mov    %eax,(%esp)
 804a646:	e8 2c 0e 00 00       	call   804b477 <_Z8epng_errRKSs>
 804a64b:	8d 45 b8             	lea    -0x48(%ebp),%eax
 804a64e:	89 04 24             	mov    %eax,(%esp)
 804a651:	e8 ea ed ff ff       	call   8049440 <_ZNSsD1Ev@plt>
 804a656:	8d 45 b4             	lea    -0x4c(%ebp),%eax
 804a659:	89 04 24             	mov    %eax,(%esp)
 804a65c:	e8 1f ef ff ff       	call   8049580 <_ZNSaIcED1Ev@plt>
		fclose(fp);
 804a661:	8b 45 c8             	mov    -0x38(%ebp),%eax
 804a664:	89 04 24             	mov    %eax,(%esp)
 804a667:	e8 04 ee ff ff       	call   8049470 <fclose@plt>
		_init();
 804a66c:	8b 45 a4             	mov    -0x5c(%ebp),%eax
 804a66f:	89 04 24             	mov    %eax,(%esp)
 804a672:	e8 71 f7 ff ff       	call   8049de8 <_ZN3PNG5_initEv>
		return false;
 804a677:	b8 00 00 00 00       	mov    $0x0,%eax
 804a67c:	e9 03 05 00 00       	jmp    804ab84 <_ZN3PNG10_read_fileERKSs+0x6c4>
	}

	png_infop info_ptr = png_create_info_struct(png_ptr);
 804a681:	8b 45 b0             	mov    -0x50(%ebp),%eax
 804a684:	89 04 24             	mov    %eax,(%esp)
 804a687:	e8 04 ed ff ff       	call   8049390 <png_create_info_struct@plt>
 804a68c:	89 45 b4             	mov    %eax,-0x4c(%ebp)
	if (!info_ptr)
 804a68f:	8b 45 b4             	mov    -0x4c(%ebp),%eax
 804a692:	85 c0                	test   %eax,%eax
 804a694:	0f 85 81 00 00 00    	jne    804a71b <_ZN3PNG10_read_fileERKSs+0x25b>
	{
		epng_err("Failed to create info struct");
 804a69a:	8d 45 ac             	lea    -0x54(%ebp),%eax
 804a69d:	89 04 24             	mov    %eax,(%esp)
 804a6a0:	e8 eb ef ff ff       	call   8049690 <_ZNSaIcEC1Ev@plt>
 804a6a5:	8d 45 ac             	lea    -0x54(%ebp),%eax
 804a6a8:	89 44 24 08          	mov    %eax,0x8(%esp)
 804a6ac:	c7 44 24 04 b2 fd 04 	movl   $0x804fdb2,0x4(%esp)
 804a6b3:	08 
 804a6b4:	8d 45 b8             	lea    -0x48(%ebp),%eax
 804a6b7:	89 04 24             	mov    %eax,(%esp)
 804a6ba:	e8 11 ee ff ff       	call   80494d0 <_ZNSsC1EPKcRKSaIcE@plt>
 804a6bf:	8d 45 b8             	lea    -0x48(%ebp),%eax
 804a6c2:	89 04 24             	mov    %eax,(%esp)
 804a6c5:	e8 ad 0d 00 00       	call   804b477 <_Z8epng_errRKSs>
 804a6ca:	8d 45 b8             	lea    -0x48(%ebp),%eax
 804a6cd:	89 04 24             	mov    %eax,(%esp)
 804a6d0:	e8 6b ed ff ff       	call   8049440 <_ZNSsD1Ev@plt>
 804a6d5:	8d 45 ac             	lea    -0x54(%ebp),%eax
 804a6d8:	89 04 24             	mov    %eax,(%esp)
 804a6db:	e8 a0 ee ff ff       	call   8049580 <_ZNSaIcED1Ev@plt>
		png_destroy_read_struct(&png_ptr, NULL, NULL);
 804a6e0:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
 804a6e7:	00 
 804a6e8:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
 804a6ef:	00 
 804a6f0:	8d 45 b0             	lea    -0x50(%ebp),%eax
 804a6f3:	89 04 24             	mov    %eax,(%esp)
 804a6f6:	e8 d5 eb ff ff       	call   80492d0 <png_destroy_read_struct@plt>
		fclose(fp);
 804a6fb:	8b 45 c8             	mov    -0x38(%ebp),%eax
 804a6fe:	89 04 24             	mov    %eax,(%esp)
 804a701:	e8 6a ed ff ff       	call   8049470 <fclose@plt>
		_init();
 804a706:	8b 45 a4             	mov    -0x5c(%ebp),%eax
 804a709:	89 04 24             	mov    %eax,(%esp)
 804a70c:	e8 d7 f6 ff ff       	call   8049de8 <_ZN3PNG5_initEv>
		return false;
 804a711:	b8 00 00 00 00       	mov    $0x0,%eax
 804a716:	e9 69 04 00 00       	jmp    804ab84 <_ZN3PNG10_read_fileERKSs+0x6c4>
	}

	// set error handling to not abort the entire program
	if (setjmp(png_jmpbuf(png_ptr)))
 804a71b:	8b 45 b0             	mov    -0x50(%ebp),%eax
 804a71e:	89 04 24             	mov    %eax,(%esp)
 804a721:	e8 5a ed ff ff       	call   8049480 <_setjmp@plt>
 804a726:	85 c0                	test   %eax,%eax
 804a728:	0f 95 c0             	setne  %al
 804a72b:	84 c0                	test   %al,%al
 804a72d:	0f 84 80 00 00 00    	je     804a7b3 <_ZN3PNG10_read_fileERKSs+0x2f3>
	{
		epng_err("Error initializing libpng io");
 804a733:	8d 45 ac             	lea    -0x54(%ebp),%eax
 804a736:	89 04 24             	mov    %eax,(%esp)
 804a739:	e8 52 ef ff ff       	call   8049690 <_ZNSaIcEC1Ev@plt>
 804a73e:	8d 45 ac             	lea    -0x54(%ebp),%eax
 804a741:	89 44 24 08          	mov    %eax,0x8(%esp)
 804a745:	c7 44 24 04 cf fd 04 	movl   $0x804fdcf,0x4(%esp)
 804a74c:	08 
 804a74d:	8d 45 b8             	lea    -0x48(%ebp),%eax
 804a750:	89 04 24             	mov    %eax,(%esp)
 804a753:	e8 78 ed ff ff       	call   80494d0 <_ZNSsC1EPKcRKSaIcE@plt>
 804a758:	8d 45 b8             	lea    -0x48(%ebp),%eax
 804a75b:	89 04 24             	mov    %eax,(%esp)
 804a75e:	e8 14 0d 00 00       	call   804b477 <_Z8epng_errRKSs>
 804a763:	8d 45 b8             	lea    -0x48(%ebp),%eax
 804a766:	89 04 24             	mov    %eax,(%esp)
 804a769:	e8 d2 ec ff ff       	call   8049440 <_ZNSsD1Ev@plt>
 804a76e:	8d 45 ac             	lea    -0x54(%ebp),%eax
 804a771:	89 04 24             	mov    %eax,(%esp)
 804a774:	e8 07 ee ff ff       	call   8049580 <_ZNSaIcED1Ev@plt>
		png_destroy_read_struct(&png_ptr, &info_ptr, NULL);
 804a779:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
 804a780:	00 
 804a781:	8d 45 b4             	lea    -0x4c(%ebp),%eax
 804a784:	89 44 24 04          	mov    %eax,0x4(%esp)
 804a788:	8d 45 b0             	lea    -0x50(%ebp),%eax
 804a78b:	89 04 24             	mov    %eax,(%esp)
 804a78e:	e8 3d eb ff ff       	call   80492d0 <png_destroy_read_struct@plt>
		fclose(fp);
 804a793:	8b 45 c8             	mov    -0x38(%ebp),%eax
 804a796:	89 04 24             	mov    %eax,(%esp)
 804a799:	e8 d2 ec ff ff       	call   8049470 <fclose@plt>
		_init();
 804a79e:	8b 45 a4             	mov    -0x5c(%ebp),%eax
 804a7a1:	89 04 24             	mov    %eax,(%esp)
 804a7a4:	e8 3f f6 ff ff       	call   8049de8 <_ZN3PNG5_initEv>
		return false;
 804a7a9:	b8 00 00 00 00       	mov    $0x0,%eax
 804a7ae:	e9 d1 03 00 00       	jmp    804ab84 <_ZN3PNG10_read_fileERKSs+0x6c4>
	}

	// initialize png reading
	png_init_io(png_ptr, fp);
 804a7b3:	8b 45 b0             	mov    -0x50(%ebp),%eax
 804a7b6:	8b 55 c8             	mov    -0x38(%ebp),%edx
 804a7b9:	89 54 24 04          	mov    %edx,0x4(%esp)
 804a7bd:	89 04 24             	mov    %eax,(%esp)
 804a7c0:	e8 8b ec ff ff       	call   8049450 <png_init_io@plt>
	// let it know we've already read the first 8 bytes
	png_set_sig_bytes(png_ptr, 8);
 804a7c5:	8b 45 b0             	mov    -0x50(%ebp),%eax
 804a7c8:	c7 44 24 04 08 00 00 	movl   $0x8,0x4(%esp)
 804a7cf:	00 
 804a7d0:	89 04 24             	mov    %eax,(%esp)
 804a7d3:	e8 b8 ec ff ff       	call   8049490 <png_set_sig_bytes@plt>

	// read in the basic image info
	png_read_info(png_ptr, info_ptr);
 804a7d8:	8b 55 b4             	mov    -0x4c(%ebp),%edx
 804a7db:	8b 45 b0             	mov    -0x50(%ebp),%eax
 804a7de:	89 54 24 04          	mov    %edx,0x4(%esp)
 804a7e2:	89 04 24             	mov    %eax,(%esp)
 804a7e5:	e8 f6 ee ff ff       	call   80496e0 <png_read_info@plt>

	// convert to 8 bits
	png_byte bit_depth = png_get_bit_depth(png_ptr, info_ptr);
 804a7ea:	8b 55 b4             	mov    -0x4c(%ebp),%edx
 804a7ed:	8b 45 b0             	mov    -0x50(%ebp),%eax
 804a7f0:	89 54 24 04          	mov    %edx,0x4(%esp)
 804a7f4:	89 04 24             	mov    %eax,(%esp)
 804a7f7:	e8 04 ee ff ff       	call   8049600 <png_get_bit_depth@plt>
 804a7fc:	88 45 ad             	mov    %al,-0x53(%ebp)
	if (bit_depth == 16)
 804a7ff:	80 7d ad 10          	cmpb   $0x10,-0x53(%ebp)
 804a803:	75 0b                	jne    804a810 <_ZN3PNG10_read_fileERKSs+0x350>
		png_set_strip_16(png_ptr);
 804a805:	8b 45 b0             	mov    -0x50(%ebp),%eax
 804a808:	89 04 24             	mov    %eax,(%esp)
 804a80b:	e8 30 ee ff ff       	call   8049640 <png_set_strip_16@plt>

	// verify this is in RGBA format, and if not, convert it to RGBA
	png_byte color_type = png_get_color_type(png_ptr, info_ptr);
 804a810:	8b 55 b4             	mov    -0x4c(%ebp),%edx
 804a813:	8b 45 b0             	mov    -0x50(%ebp),%eax
 804a816:	89 54 24 04          	mov    %edx,0x4(%esp)
 804a81a:	89 04 24             	mov    %eax,(%esp)
 804a81d:	e8 be ec ff ff       	call   80494e0 <png_get_color_type@plt>
 804a822:	88 45 ae             	mov    %al,-0x52(%ebp)
	if (color_type != PNG_COLOR_TYPE_RGBA && color_type != PNG_COLOR_TYPE_RGB)
 804a825:	80 7d ae 06          	cmpb   $0x6,-0x52(%ebp)
 804a829:	74 3f                	je     804a86a <_ZN3PNG10_read_fileERKSs+0x3aa>
 804a82b:	80 7d ae 02          	cmpb   $0x2,-0x52(%ebp)
 804a82f:	74 39                	je     804a86a <_ZN3PNG10_read_fileERKSs+0x3aa>
	{
		if (color_type == PNG_COLOR_TYPE_GRAY || color_type == PNG_COLOR_TYPE_GRAY_ALPHA) {
 804a831:	80 7d ae 00          	cmpb   $0x0,-0x52(%ebp)
 804a835:	74 06                	je     804a83d <_ZN3PNG10_read_fileERKSs+0x37d>
 804a837:	80 7d ae 04          	cmpb   $0x4,-0x52(%ebp)
 804a83b:	75 1c                	jne    804a859 <_ZN3PNG10_read_fileERKSs+0x399>
			if (bit_depth < 8)
 804a83d:	80 7d ad 07          	cmpb   $0x7,-0x53(%ebp)
 804a841:	77 0b                	ja     804a84e <_ZN3PNG10_read_fileERKSs+0x38e>
				png_set_expand(png_ptr);
 804a843:	8b 45 b0             	mov    -0x50(%ebp),%eax
 804a846:	89 04 24             	mov    %eax,(%esp)
 804a849:	e8 32 ee ff ff       	call   8049680 <png_set_expand@plt>
			png_set_gray_to_rgb(png_ptr);
 804a84e:	8b 45 b0             	mov    -0x50(%ebp),%eax
 804a851:	89 04 24             	mov    %eax,(%esp)
 804a854:	e8 b7 ed ff ff       	call   8049610 <png_set_gray_to_rgb@plt>
		}
		if (color_type == PNG_COLOR_TYPE_PALETTE)
 804a859:	80 7d ae 03          	cmpb   $0x3,-0x52(%ebp)
 804a85d:	75 0b                	jne    804a86a <_ZN3PNG10_read_fileERKSs+0x3aa>
			png_set_palette_to_rgb(png_ptr);
 804a85f:	8b 45 b0             	mov    -0x50(%ebp),%eax
 804a862:	89 04 24             	mov    %eax,(%esp)
 804a865:	e8 16 eb ff ff       	call   8049380 <png_set_palette_to_rgb@plt>
	}
	// convert tRNS to alpha channel
	if (png_get_valid(png_ptr, info_ptr, PNG_INFO_tRNS))
 804a86a:	8b 55 b4             	mov    -0x4c(%ebp),%edx
 804a86d:	8b 45 b0             	mov    -0x50(%ebp),%eax
 804a870:	c7 44 24 08 10 00 00 	movl   $0x10,0x8(%esp)
 804a877:	00 
 804a878:	89 54 24 04          	mov    %edx,0x4(%esp)
 804a87c:	89 04 24             	mov    %eax,(%esp)
 804a87f:	e8 1c ea ff ff       	call   80492a0 <png_get_valid@plt>
 804a884:	85 c0                	test   %eax,%eax
 804a886:	0f 95 c0             	setne  %al
 804a889:	84 c0                	test   %al,%al
 804a88b:	74 0b                	je     804a898 <_ZN3PNG10_read_fileERKSs+0x3d8>
		png_set_tRNS_to_alpha(png_ptr);
 804a88d:	8b 45 b0             	mov    -0x50(%ebp),%eax
 804a890:	89 04 24             	mov    %eax,(%esp)
 804a893:	e8 18 ee ff ff       	call   80496b0 <png_set_tRNS_to_alpha@plt>

	_width = png_get_image_width(png_ptr, info_ptr);
 804a898:	8b 55 b4             	mov    -0x4c(%ebp),%edx
 804a89b:	8b 45 b0             	mov    -0x50(%ebp),%eax
 804a89e:	89 54 24 04          	mov    %edx,0x4(%esp)
 804a8a2:	89 04 24             	mov    %eax,(%esp)
 804a8a5:	e8 46 eb ff ff       	call   80493f0 <png_get_image_width@plt>
 804a8aa:	8b 55 a4             	mov    -0x5c(%ebp),%edx
 804a8ad:	89 02                	mov    %eax,(%edx)
	_height = png_get_image_height(png_ptr, info_ptr);
 804a8af:	8b 55 b4             	mov    -0x4c(%ebp),%edx
 804a8b2:	8b 45 b0             	mov    -0x50(%ebp),%eax
 804a8b5:	89 54 24 04          	mov    %edx,0x4(%esp)
 804a8b9:	89 04 24             	mov    %eax,(%esp)
 804a8bc:	e8 0f eb ff ff       	call   80493d0 <png_get_image_height@plt>
 804a8c1:	8b 55 a4             	mov    -0x5c(%ebp),%edx
 804a8c4:	89 42 04             	mov    %eax,0x4(%edx)

	png_read_update_info(png_ptr, info_ptr);
 804a8c7:	8b 55 b4             	mov    -0x4c(%ebp),%edx
 804a8ca:	8b 45 b0             	mov    -0x50(%ebp),%eax
 804a8cd:	89 54 24 04          	mov    %edx,0x4(%esp)
 804a8d1:	89 04 24             	mov    %eax,(%esp)
 804a8d4:	e8 b7 ec ff ff       	call   8049590 <png_read_update_info@plt>

	// begin reading in the image
	if (setjmp(png_jmpbuf(png_ptr)))
 804a8d9:	8b 45 b0             	mov    -0x50(%ebp),%eax
 804a8dc:	89 04 24             	mov    %eax,(%esp)
 804a8df:	e8 9c eb ff ff       	call   8049480 <_setjmp@plt>
 804a8e4:	85 c0                	test   %eax,%eax
 804a8e6:	0f 95 c0             	setne  %al
 804a8e9:	84 c0                	test   %al,%al
 804a8eb:	0f 84 80 00 00 00    	je     804a971 <_ZN3PNG10_read_fileERKSs+0x4b1>
	{
		epng_err("Error reading image with libpng");
 804a8f1:	8d 45 ac             	lea    -0x54(%ebp),%eax
 804a8f4:	89 04 24             	mov    %eax,(%esp)
 804a8f7:	e8 94 ed ff ff       	call   8049690 <_ZNSaIcEC1Ev@plt>
 804a8fc:	8d 45 ac             	lea    -0x54(%ebp),%eax
 804a8ff:	89 44 24 08          	mov    %eax,0x8(%esp)
 804a903:	c7 44 24 04 ec fd 04 	movl   $0x804fdec,0x4(%esp)
 804a90a:	08 
 804a90b:	8d 45 b8             	lea    -0x48(%ebp),%eax
 804a90e:	89 04 24             	mov    %eax,(%esp)
 804a911:	e8 ba eb ff ff       	call   80494d0 <_ZNSsC1EPKcRKSaIcE@plt>
 804a916:	8d 45 b8             	lea    -0x48(%ebp),%eax
 804a919:	89 04 24             	mov    %eax,(%esp)
 804a91c:	e8 56 0b 00 00       	call   804b477 <_Z8epng_errRKSs>
 804a921:	8d 45 b8             	lea    -0x48(%ebp),%eax
 804a924:	89 04 24             	mov    %eax,(%esp)
 804a927:	e8 14 eb ff ff       	call   8049440 <_ZNSsD1Ev@plt>
 804a92c:	8d 45 ac             	lea    -0x54(%ebp),%eax
 804a92f:	89 04 24             	mov    %eax,(%esp)
 804a932:	e8 49 ec ff ff       	call   8049580 <_ZNSaIcED1Ev@plt>
		png_destroy_read_struct(&png_ptr, &info_ptr, NULL);
 804a937:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
 804a93e:	00 
 804a93f:	8d 45 b4             	lea    -0x4c(%ebp),%eax
 804a942:	89 44 24 04          	mov    %eax,0x4(%esp)
 804a946:	8d 45 b0             	lea    -0x50(%ebp),%eax
 804a949:	89 04 24             	mov    %eax,(%esp)
 804a94c:	e8 7f e9 ff ff       	call   80492d0 <png_destroy_read_struct@plt>
		fclose(fp);
 804a951:	8b 45 c8             	mov    -0x38(%ebp),%eax
 804a954:	89 04 24             	mov    %eax,(%esp)
 804a957:	e8 14 eb ff ff       	call   8049470 <fclose@plt>
		_init();
 804a95c:	8b 45 a4             	mov    -0x5c(%ebp),%eax
 804a95f:	89 04 24             	mov    %eax,(%esp)
 804a962:	e8 81 f4 ff ff       	call   8049de8 <_ZN3PNG5_initEv>
		return false;
 804a967:	b8 00 00 00 00       	mov    $0x0,%eax
 804a96c:	e9 13 02 00 00       	jmp    804ab84 <_ZN3PNG10_read_fileERKSs+0x6c4>
	}


	int bpr = png_get_rowbytes(png_ptr, info_ptr); // number of bytes in a row
 804a971:	8b 55 b4             	mov    -0x4c(%ebp),%edx
 804a974:	8b 45 b0             	mov    -0x50(%ebp),%eax
 804a977:	89 54 24 04          	mov    %edx,0x4(%esp)
 804a97b:	89 04 24             	mov    %eax,(%esp)
 804a97e:	e8 7d ed ff ff       	call   8049700 <png_get_rowbytes@plt>
 804a983:	89 45 cc             	mov    %eax,-0x34(%ebp)
	int numchannels = png_get_channels(png_ptr, info_ptr);
 804a986:	8b 55 b4             	mov    -0x4c(%ebp),%edx
 804a989:	8b 45 b0             	mov    -0x50(%ebp),%eax
 804a98c:	89 54 24 04          	mov    %edx,0x4(%esp)
 804a990:	89 04 24             	mov    %eax,(%esp)
 804a993:	e8 08 eb ff ff       	call   80494a0 <png_get_channels@plt>
 804a998:	0f b6 c0             	movzbl %al,%eax
 804a99b:	89 45 d0             	mov    %eax,-0x30(%ebp)

	// initialie our image storage
	_pixels = new RGBAPixel[_height * _width];
 804a99e:	8b 45 a4             	mov    -0x5c(%ebp),%eax
 804a9a1:	8b 50 04             	mov    0x4(%eax),%edx
 804a9a4:	8b 45 a4             	mov    -0x5c(%ebp),%eax
 804a9a7:	8b 00                	mov    (%eax),%eax
 804a9a9:	89 d6                	mov    %edx,%esi
 804a9ab:	0f af f0             	imul   %eax,%esi
 804a9ae:	81 fe 00 00 c0 1f    	cmp    $0x1fc00000,%esi
 804a9b4:	77 09                	ja     804a9bf <_ZN3PNG10_read_fileERKSs+0x4ff>
 804a9b6:	8d 04 b5 00 00 00 00 	lea    0x0(,%esi,4),%eax
 804a9bd:	eb 05                	jmp    804a9c4 <_ZN3PNG10_read_fileERKSs+0x504>
 804a9bf:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 804a9c4:	89 04 24             	mov    %eax,(%esp)
 804a9c7:	e8 84 eb ff ff       	call   8049550 <_Znaj@plt>
 804a9cc:	89 c3                	mov    %eax,%ebx
 804a9ce:	89 d8                	mov    %ebx,%eax
 804a9d0:	8d 56 ff             	lea    -0x1(%esi),%edx
 804a9d3:	89 d7                	mov    %edx,%edi
 804a9d5:	89 c6                	mov    %eax,%esi
 804a9d7:	eb 0e                	jmp    804a9e7 <_ZN3PNG10_read_fileERKSs+0x527>
 804a9d9:	89 34 24             	mov    %esi,(%esp)
 804a9dc:	e8 09 f0 ff ff       	call   80499ea <_ZN9RGBAPixelC1Ev>
 804a9e1:	83 c6 04             	add    $0x4,%esi
 804a9e4:	83 ef 01             	sub    $0x1,%edi
 804a9e7:	83 ff ff             	cmp    $0xffffffff,%edi
 804a9ea:	75 ed                	jne    804a9d9 <_ZN3PNG10_read_fileERKSs+0x519>
 804a9ec:	8b 45 a4             	mov    -0x5c(%ebp),%eax
 804a9ef:	89 58 08             	mov    %ebx,0x8(%eax)
	png_byte * row = new png_byte[bpr];
 804a9f2:	8b 45 cc             	mov    -0x34(%ebp),%eax
 804a9f5:	89 04 24             	mov    %eax,(%esp)
 804a9f8:	e8 53 eb ff ff       	call   8049550 <_Znaj@plt>
 804a9fd:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	for (size_t y = 0; y < _height; y++)
 804aa00:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
 804aa07:	e9 1b 01 00 00       	jmp    804ab27 <_ZN3PNG10_read_fileERKSs+0x667>
	{
		png_read_row(png_ptr, row, NULL);
 804aa0c:	8b 45 b0             	mov    -0x50(%ebp),%eax
 804aa0f:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
 804aa16:	00 
 804aa17:	8b 55 d4             	mov    -0x2c(%ebp),%edx
 804aa1a:	89 54 24 04          	mov    %edx,0x4(%esp)
 804aa1e:	89 04 24             	mov    %eax,(%esp)
 804aa21:	e8 0a eb ff ff       	call   8049530 <png_read_row@plt>
		png_byte * pix = row;
 804aa26:	8b 45 d4             	mov    -0x2c(%ebp),%eax
 804aa29:	89 45 c0             	mov    %eax,-0x40(%ebp)
		for (size_t x = 0; x < _width; x++)
 804aa2c:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
 804aa33:	e9 dd 00 00 00       	jmp    804ab15 <_ZN3PNG10_read_fileERKSs+0x655>
		{
			RGBAPixel & pixel = _pixel(x,y);
 804aa38:	8b 45 bc             	mov    -0x44(%ebp),%eax
 804aa3b:	89 44 24 08          	mov    %eax,0x8(%esp)
 804aa3f:	8b 45 c4             	mov    -0x3c(%ebp),%eax
 804aa42:	89 44 24 04          	mov    %eax,0x4(%esp)
 804aa46:	8b 45 a4             	mov    -0x5c(%ebp),%eax
 804aa49:	89 04 24             	mov    %eax,(%esp)
 804aa4c:	e8 e7 f1 ff ff       	call   8049c38 <_ZNK3PNG6_pixelEjj>
 804aa51:	89 45 d8             	mov    %eax,-0x28(%ebp)
			if (numchannels == 1 || numchannels == 2)
 804aa54:	83 7d d0 01          	cmpl   $0x1,-0x30(%ebp)
 804aa58:	74 06                	je     804aa60 <_ZN3PNG10_read_fileERKSs+0x5a0>
 804aa5a:	83 7d d0 02          	cmpl   $0x2,-0x30(%ebp)
 804aa5e:	75 4f                	jne    804aaaf <_ZN3PNG10_read_fileERKSs+0x5ef>
			{
				// monochrome
				unsigned char color = (unsigned char) *pix++;
 804aa60:	8b 45 c0             	mov    -0x40(%ebp),%eax
 804aa63:	8d 50 01             	lea    0x1(%eax),%edx
 804aa66:	89 55 c0             	mov    %edx,-0x40(%ebp)
 804aa69:	0f b6 00             	movzbl (%eax),%eax
 804aa6c:	88 45 af             	mov    %al,-0x51(%ebp)
				pixel.red = color;
 804aa6f:	8b 45 d8             	mov    -0x28(%ebp),%eax
 804aa72:	0f b6 55 af          	movzbl -0x51(%ebp),%edx
 804aa76:	88 10                	mov    %dl,(%eax)
				pixel.green = color;
 804aa78:	8b 45 d8             	mov    -0x28(%ebp),%eax
 804aa7b:	0f b6 55 af          	movzbl -0x51(%ebp),%edx
 804aa7f:	88 50 01             	mov    %dl,0x1(%eax)
				pixel.blue = color;
 804aa82:	8b 45 d8             	mov    -0x28(%ebp),%eax
 804aa85:	0f b6 55 af          	movzbl -0x51(%ebp),%edx
 804aa89:	88 50 02             	mov    %dl,0x2(%eax)
				if (numchannels == 2)
 804aa8c:	83 7d d0 02          	cmpl   $0x2,-0x30(%ebp)
 804aa90:	75 14                	jne    804aaa6 <_ZN3PNG10_read_fileERKSs+0x5e6>
					pixel.alpha = (unsigned char) *pix++;
 804aa92:	8b 45 c0             	mov    -0x40(%ebp),%eax
 804aa95:	8d 50 01             	lea    0x1(%eax),%edx
 804aa98:	89 55 c0             	mov    %edx,-0x40(%ebp)
 804aa9b:	0f b6 10             	movzbl (%eax),%edx
 804aa9e:	8b 45 d8             	mov    -0x28(%ebp),%eax
 804aaa1:	88 50 03             	mov    %dl,0x3(%eax)
				else
					pixel.alpha = 255;
 804aaa4:	eb 6b                	jmp    804ab11 <_ZN3PNG10_read_fileERKSs+0x651>
 804aaa6:	8b 45 d8             	mov    -0x28(%ebp),%eax
 804aaa9:	c6 40 03 ff          	movb   $0xff,0x3(%eax)
 804aaad:	eb 62                	jmp    804ab11 <_ZN3PNG10_read_fileERKSs+0x651>
			} 
			else if (numchannels == 3 || numchannels == 4) 
 804aaaf:	83 7d d0 03          	cmpl   $0x3,-0x30(%ebp)
 804aab3:	74 06                	je     804aabb <_ZN3PNG10_read_fileERKSs+0x5fb>
 804aab5:	83 7d d0 04          	cmpl   $0x4,-0x30(%ebp)
 804aab9:	75 56                	jne    804ab11 <_ZN3PNG10_read_fileERKSs+0x651>
			{
				pixel.red = (unsigned char) *pix++;
 804aabb:	8b 45 c0             	mov    -0x40(%ebp),%eax
 804aabe:	8d 50 01             	lea    0x1(%eax),%edx
 804aac1:	89 55 c0             	mov    %edx,-0x40(%ebp)
 804aac4:	0f b6 10             	movzbl (%eax),%edx
 804aac7:	8b 45 d8             	mov    -0x28(%ebp),%eax
 804aaca:	88 10                	mov    %dl,(%eax)
				pixel.green = (unsigned char) *pix++;
 804aacc:	8b 45 c0             	mov    -0x40(%ebp),%eax
 804aacf:	8d 50 01             	lea    0x1(%eax),%edx
 804aad2:	89 55 c0             	mov    %edx,-0x40(%ebp)
 804aad5:	0f b6 10             	movzbl (%eax),%edx
 804aad8:	8b 45 d8             	mov    -0x28(%ebp),%eax
 804aadb:	88 50 01             	mov    %dl,0x1(%eax)
				pixel.blue = (unsigned char) *pix++;
 804aade:	8b 45 c0             	mov    -0x40(%ebp),%eax
 804aae1:	8d 50 01             	lea    0x1(%eax),%edx
 804aae4:	89 55 c0             	mov    %edx,-0x40(%ebp)
 804aae7:	0f b6 10             	movzbl (%eax),%edx
 804aaea:	8b 45 d8             	mov    -0x28(%ebp),%eax
 804aaed:	88 50 02             	mov    %dl,0x2(%eax)
				if (numchannels == 4)
 804aaf0:	83 7d d0 04          	cmpl   $0x4,-0x30(%ebp)
 804aaf4:	75 14                	jne    804ab0a <_ZN3PNG10_read_fileERKSs+0x64a>
					pixel.alpha = (unsigned char) *pix++;
 804aaf6:	8b 45 c0             	mov    -0x40(%ebp),%eax
 804aaf9:	8d 50 01             	lea    0x1(%eax),%edx
 804aafc:	89 55 c0             	mov    %edx,-0x40(%ebp)
 804aaff:	0f b6 10             	movzbl (%eax),%edx
 804ab02:	8b 45 d8             	mov    -0x28(%ebp),%eax
 804ab05:	88 50 03             	mov    %dl,0x3(%eax)
 804ab08:	eb 07                	jmp    804ab11 <_ZN3PNG10_read_fileERKSs+0x651>
				else
					pixel.alpha = 255;
 804ab0a:	8b 45 d8             	mov    -0x28(%ebp),%eax
 804ab0d:	c6 40 03 ff          	movb   $0xff,0x3(%eax)
	png_byte * row = new png_byte[bpr];
	for (size_t y = 0; y < _height; y++)
	{
		png_read_row(png_ptr, row, NULL);
		png_byte * pix = row;
		for (size_t x = 0; x < _width; x++)
 804ab11:	83 45 c4 01          	addl   $0x1,-0x3c(%ebp)
 804ab15:	8b 45 a4             	mov    -0x5c(%ebp),%eax
 804ab18:	8b 00                	mov    (%eax),%eax
 804ab1a:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
 804ab1d:	0f 87 15 ff ff ff    	ja     804aa38 <_ZN3PNG10_read_fileERKSs+0x578>
	int numchannels = png_get_channels(png_ptr, info_ptr);

	// initialie our image storage
	_pixels = new RGBAPixel[_height * _width];
	png_byte * row = new png_byte[bpr];
	for (size_t y = 0; y < _height; y++)
 804ab23:	83 45 bc 01          	addl   $0x1,-0x44(%ebp)
 804ab27:	8b 45 a4             	mov    -0x5c(%ebp),%eax
 804ab2a:	8b 40 04             	mov    0x4(%eax),%eax
 804ab2d:	3b 45 bc             	cmp    -0x44(%ebp),%eax
 804ab30:	0f 87 d6 fe ff ff    	ja     804aa0c <_ZN3PNG10_read_fileERKSs+0x54c>
					pixel.alpha = 255;
			}
		}
	}
	// cleanup
	delete [] row;
 804ab36:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
 804ab3a:	74 0b                	je     804ab47 <_ZN3PNG10_read_fileERKSs+0x687>
 804ab3c:	8b 45 d4             	mov    -0x2c(%ebp),%eax
 804ab3f:	89 04 24             	mov    %eax,(%esp)
 804ab42:	e8 69 ea ff ff       	call   80495b0 <_ZdaPv@plt>
	png_read_end(png_ptr, NULL);
 804ab47:	8b 45 b0             	mov    -0x50(%ebp),%eax
 804ab4a:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
 804ab51:	00 
 804ab52:	89 04 24             	mov    %eax,(%esp)
 804ab55:	e8 e6 e9 ff ff       	call   8049540 <png_read_end@plt>
	png_destroy_read_struct(&png_ptr, &info_ptr, NULL);
 804ab5a:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
 804ab61:	00 
 804ab62:	8d 45 b4             	lea    -0x4c(%ebp),%eax
 804ab65:	89 44 24 04          	mov    %eax,0x4(%esp)
 804ab69:	8d 45 b0             	lea    -0x50(%ebp),%eax
 804ab6c:	89 04 24             	mov    %eax,(%esp)
 804ab6f:	e8 5c e7 ff ff       	call   80492d0 <png_destroy_read_struct@plt>
	fclose(fp);
 804ab74:	8b 45 c8             	mov    -0x38(%ebp),%eax
 804ab77:	89 04 24             	mov    %eax,(%esp)
 804ab7a:	e8 f1 e8 ff ff       	call   8049470 <fclose@plt>
	return true;
 804ab7f:	b8 01 00 00 00       	mov    $0x1,%eax
}
 804ab84:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
 804ab87:	65 33 0d 14 00 00 00 	xor    %gs:0x14,%ecx
 804ab8e:	0f 84 f3 00 00 00    	je     804ac87 <_ZN3PNG10_read_fileERKSs+0x7c7>
 804ab94:	e9 e9 00 00 00       	jmp    804ac82 <_ZN3PNG10_read_fileERKSs+0x7c2>
 804ab99:	89 c3                	mov    %eax,%ebx

	// we need to open the file in binary mode
	FILE * fp = fopen(file_name.c_str(), "rb");
	if (!fp)
	{
		epng_err("Failed to open " + file_name);
 804ab9b:	8d 45 b8             	lea    -0x48(%ebp),%eax
 804ab9e:	89 04 24             	mov    %eax,(%esp)
 804aba1:	e8 9a e8 ff ff       	call   8049440 <_ZNSsD1Ev@plt>
 804aba6:	89 d8                	mov    %ebx,%eax
 804aba8:	89 04 24             	mov    %eax,(%esp)
 804abab:	e8 20 eb ff ff       	call   80496d0 <_Unwind_Resume@plt>
 804abb0:	89 c3                	mov    %eax,%ebx
	// read in the header (max size of 8), use it to validate this as a PNG file
	png_byte header[8];
	fread(header, 1, 8, fp);
	if (png_sig_cmp(header, 0, 8))
	{
		epng_err("File is not a valid PNG file");
 804abb2:	8d 45 b8             	lea    -0x48(%ebp),%eax
 804abb5:	89 04 24             	mov    %eax,(%esp)
 804abb8:	e8 83 e8 ff ff       	call   8049440 <_ZNSsD1Ev@plt>
 804abbd:	eb 02                	jmp    804abc1 <_ZN3PNG10_read_fileERKSs+0x701>
 804abbf:	89 c3                	mov    %eax,%ebx
 804abc1:	8d 45 b4             	lea    -0x4c(%ebp),%eax
 804abc4:	89 04 24             	mov    %eax,(%esp)
 804abc7:	e8 b4 e9 ff ff       	call   8049580 <_ZNSaIcED1Ev@plt>
 804abcc:	89 d8                	mov    %ebx,%eax
 804abce:	89 04 24             	mov    %eax,(%esp)
 804abd1:	e8 fa ea ff ff       	call   80496d0 <_Unwind_Resume@plt>
 804abd6:	89 c3                	mov    %eax,%ebx
	}

	// set up libpng structs for reading info
	png_structp png_ptr = png_create_read_struct(PNG_LIBPNG_VER_STRING, NULL, NULL, NULL); if (!png_ptr)
	{
		epng_err("Failed to create read struct");
 804abd8:	8d 45 b8             	lea    -0x48(%ebp),%eax
 804abdb:	89 04 24             	mov    %eax,(%esp)
 804abde:	e8 5d e8 ff ff       	call   8049440 <_ZNSsD1Ev@plt>
 804abe3:	eb 02                	jmp    804abe7 <_ZN3PNG10_read_fileERKSs+0x727>
 804abe5:	89 c3                	mov    %eax,%ebx
 804abe7:	8d 45 b4             	lea    -0x4c(%ebp),%eax
 804abea:	89 04 24             	mov    %eax,(%esp)
 804abed:	e8 8e e9 ff ff       	call   8049580 <_ZNSaIcED1Ev@plt>
 804abf2:	89 d8                	mov    %ebx,%eax
 804abf4:	89 04 24             	mov    %eax,(%esp)
 804abf7:	e8 d4 ea ff ff       	call   80496d0 <_Unwind_Resume@plt>
 804abfc:	89 c3                	mov    %eax,%ebx
	}

	png_infop info_ptr = png_create_info_struct(png_ptr);
	if (!info_ptr)
	{
		epng_err("Failed to create info struct");
 804abfe:	8d 45 b8             	lea    -0x48(%ebp),%eax
 804ac01:	89 04 24             	mov    %eax,(%esp)
 804ac04:	e8 37 e8 ff ff       	call   8049440 <_ZNSsD1Ev@plt>
 804ac09:	eb 02                	jmp    804ac0d <_ZN3PNG10_read_fileERKSs+0x74d>
 804ac0b:	89 c3                	mov    %eax,%ebx
 804ac0d:	8d 45 ac             	lea    -0x54(%ebp),%eax
 804ac10:	89 04 24             	mov    %eax,(%esp)
 804ac13:	e8 68 e9 ff ff       	call   8049580 <_ZNSaIcED1Ev@plt>
 804ac18:	89 d8                	mov    %ebx,%eax
 804ac1a:	89 04 24             	mov    %eax,(%esp)
 804ac1d:	e8 ae ea ff ff       	call   80496d0 <_Unwind_Resume@plt>
 804ac22:	89 c3                	mov    %eax,%ebx
	}

	// set error handling to not abort the entire program
	if (setjmp(png_jmpbuf(png_ptr)))
	{
		epng_err("Error initializing libpng io");
 804ac24:	8d 45 b8             	lea    -0x48(%ebp),%eax
 804ac27:	89 04 24             	mov    %eax,(%esp)
 804ac2a:	e8 11 e8 ff ff       	call   8049440 <_ZNSsD1Ev@plt>
 804ac2f:	eb 02                	jmp    804ac33 <_ZN3PNG10_read_fileERKSs+0x773>
 804ac31:	89 c3                	mov    %eax,%ebx
 804ac33:	8d 45 ac             	lea    -0x54(%ebp),%eax
 804ac36:	89 04 24             	mov    %eax,(%esp)
 804ac39:	e8 42 e9 ff ff       	call   8049580 <_ZNSaIcED1Ev@plt>
 804ac3e:	89 d8                	mov    %ebx,%eax
 804ac40:	89 04 24             	mov    %eax,(%esp)
 804ac43:	e8 88 ea ff ff       	call   80496d0 <_Unwind_Resume@plt>
 804ac48:	89 c3                	mov    %eax,%ebx
	png_read_update_info(png_ptr, info_ptr);

	// begin reading in the image
	if (setjmp(png_jmpbuf(png_ptr)))
	{
		epng_err("Error reading image with libpng");
 804ac4a:	8d 45 b8             	lea    -0x48(%ebp),%eax
 804ac4d:	89 04 24             	mov    %eax,(%esp)
 804ac50:	e8 eb e7 ff ff       	call   8049440 <_ZNSsD1Ev@plt>
 804ac55:	eb 02                	jmp    804ac59 <_ZN3PNG10_read_fileERKSs+0x799>
 804ac57:	89 c3                	mov    %eax,%ebx
 804ac59:	8d 45 ac             	lea    -0x54(%ebp),%eax
 804ac5c:	89 04 24             	mov    %eax,(%esp)
 804ac5f:	e8 1c e9 ff ff       	call   8049580 <_ZNSaIcED1Ev@plt>
 804ac64:	89 d8                	mov    %ebx,%eax
 804ac66:	89 04 24             	mov    %eax,(%esp)
 804ac69:	e8 62 ea ff ff       	call   80496d0 <_Unwind_Resume@plt>
 804ac6e:	89 c6                	mov    %eax,%esi

	int bpr = png_get_rowbytes(png_ptr, info_ptr); // number of bytes in a row
	int numchannels = png_get_channels(png_ptr, info_ptr);

	// initialie our image storage
	_pixels = new RGBAPixel[_height * _width];
 804ac70:	89 1c 24             	mov    %ebx,(%esp)
 804ac73:	e8 38 e9 ff ff       	call   80495b0 <_ZdaPv@plt>
 804ac78:	89 f0                	mov    %esi,%eax
 804ac7a:	89 04 24             	mov    %eax,(%esp)
 804ac7d:	e8 4e ea ff ff       	call   80496d0 <_Unwind_Resume@plt>
	delete [] row;
	png_read_end(png_ptr, NULL);
	png_destroy_read_struct(&png_ptr, &info_ptr, NULL);
	fclose(fp);
	return true;
}
 804ac82:	e8 e9 e8 ff ff       	call   8049570 <__stack_chk_fail@plt>
 804ac87:	8d 65 f4             	lea    -0xc(%ebp),%esp
 804ac8a:	5b                   	pop    %ebx
 804ac8b:	5e                   	pop    %esi
 804ac8c:	5f                   	pop    %edi
 804ac8d:	5d                   	pop    %ebp
 804ac8e:	c3                   	ret    
 804ac8f:	90                   	nop

0804ac90 <_ZN3PNG11writeToFileERKSs>:

bool PNG::writeToFile(string const & file_name)
{
 804ac90:	55                   	push   %ebp
 804ac91:	89 e5                	mov    %esp,%ebp
 804ac93:	53                   	push   %ebx
 804ac94:	83 ec 64             	sub    $0x64,%esp
	FILE * fp = fopen(file_name.c_str(), "wb");
 804ac97:	8b 45 0c             	mov    0xc(%ebp),%eax
 804ac9a:	89 04 24             	mov    %eax,(%esp)
 804ac9d:	e8 8e e6 ff ff       	call   8049330 <_ZNKSs5c_strEv@plt>
 804aca2:	c7 44 24 04 0c fe 04 	movl   $0x804fe0c,0x4(%esp)
 804aca9:	08 
 804acaa:	89 04 24             	mov    %eax,(%esp)
 804acad:	e8 fe e7 ff ff       	call   80494b0 <fopen@plt>
 804acb2:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (!fp)
 804acb5:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
 804acb9:	75 3d                	jne    804acf8 <_ZN3PNG11writeToFileERKSs+0x68>
	{
		epng_err("Failed to open file " + file_name);
 804acbb:	8d 45 dc             	lea    -0x24(%ebp),%eax
 804acbe:	8b 55 0c             	mov    0xc(%ebp),%edx
 804acc1:	89 54 24 08          	mov    %edx,0x8(%esp)
 804acc5:	c7 44 24 04 0f fe 04 	movl   $0x804fe0f,0x4(%esp)
 804accc:	08 
 804accd:	89 04 24             	mov    %eax,(%esp)
 804acd0:	e8 dd 07 00 00       	call   804b4b2 <_ZStplIcSt11char_traitsIcESaIcEESbIT_T0_T1_EPKS3_RKS6_>
 804acd5:	83 ec 04             	sub    $0x4,%esp
 804acd8:	8d 45 dc             	lea    -0x24(%ebp),%eax
 804acdb:	89 04 24             	mov    %eax,(%esp)
 804acde:	e8 94 07 00 00       	call   804b477 <_Z8epng_errRKSs>
 804ace3:	8d 45 dc             	lea    -0x24(%ebp),%eax
 804ace6:	89 04 24             	mov    %eax,(%esp)
 804ace9:	e8 52 e7 ff ff       	call   8049440 <_ZNSsD1Ev@plt>
		return false;
 804acee:	b8 00 00 00 00       	mov    $0x0,%eax
 804acf3:	e9 34 05 00 00       	jmp    804b22c <_ZN3PNG11writeToFileERKSs+0x59c>
	}

	png_structp png_ptr = png_create_write_struct(PNG_LIBPNG_VER_STRING, NULL, NULL, NULL);
 804acf8:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
 804acff:	00 
 804ad00:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
 804ad07:	00 
 804ad08:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
 804ad0f:	00 
 804ad10:	c7 04 24 8e fd 04 08 	movl   $0x804fd8e,(%esp)
 804ad17:	e8 94 e6 ff ff       	call   80493b0 <png_create_write_struct@plt>
 804ad1c:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if (!png_ptr)
 804ad1f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
 804ad22:	85 c0                	test   %eax,%eax
 804ad24:	75 5b                	jne    804ad81 <_ZN3PNG11writeToFileERKSs+0xf1>
	{
		epng_err("Failed to create png struct");
 804ad26:	8d 45 d8             	lea    -0x28(%ebp),%eax
 804ad29:	89 04 24             	mov    %eax,(%esp)
 804ad2c:	e8 5f e9 ff ff       	call   8049690 <_ZNSaIcEC1Ev@plt>
 804ad31:	8d 45 d8             	lea    -0x28(%ebp),%eax
 804ad34:	89 44 24 08          	mov    %eax,0x8(%esp)
 804ad38:	c7 44 24 04 24 fe 04 	movl   $0x804fe24,0x4(%esp)
 804ad3f:	08 
 804ad40:	8d 45 dc             	lea    -0x24(%ebp),%eax
 804ad43:	89 04 24             	mov    %eax,(%esp)
 804ad46:	e8 85 e7 ff ff       	call   80494d0 <_ZNSsC1EPKcRKSaIcE@plt>
 804ad4b:	8d 45 dc             	lea    -0x24(%ebp),%eax
 804ad4e:	89 04 24             	mov    %eax,(%esp)
 804ad51:	e8 21 07 00 00       	call   804b477 <_Z8epng_errRKSs>
 804ad56:	8d 45 dc             	lea    -0x24(%ebp),%eax
 804ad59:	89 04 24             	mov    %eax,(%esp)
 804ad5c:	e8 df e6 ff ff       	call   8049440 <_ZNSsD1Ev@plt>
 804ad61:	8d 45 d8             	lea    -0x28(%ebp),%eax
 804ad64:	89 04 24             	mov    %eax,(%esp)
 804ad67:	e8 14 e8 ff ff       	call   8049580 <_ZNSaIcED1Ev@plt>
		fclose(fp);
 804ad6c:	8b 45 e8             	mov    -0x18(%ebp),%eax
 804ad6f:	89 04 24             	mov    %eax,(%esp)
 804ad72:	e8 f9 e6 ff ff       	call   8049470 <fclose@plt>
		return false;
 804ad77:	b8 00 00 00 00       	mov    $0x0,%eax
 804ad7c:	e9 ab 04 00 00       	jmp    804b22c <_ZN3PNG11writeToFileERKSs+0x59c>
	}

	png_infop info_ptr = png_create_info_struct(png_ptr);
 804ad81:	8b 45 d4             	mov    -0x2c(%ebp),%eax
 804ad84:	89 04 24             	mov    %eax,(%esp)
 804ad87:	e8 04 e6 ff ff       	call   8049390 <png_create_info_struct@plt>
 804ad8c:	89 45 d8             	mov    %eax,-0x28(%ebp)
	if (!info_ptr)
 804ad8f:	8b 45 d8             	mov    -0x28(%ebp),%eax
 804ad92:	85 c0                	test   %eax,%eax
 804ad94:	75 6e                	jne    804ae04 <_ZN3PNG11writeToFileERKSs+0x174>
	{
		epng_err("Failed to create png info struct");
 804ad96:	8d 45 d3             	lea    -0x2d(%ebp),%eax
 804ad99:	89 04 24             	mov    %eax,(%esp)
 804ad9c:	e8 ef e8 ff ff       	call   8049690 <_ZNSaIcEC1Ev@plt>
 804ada1:	8d 45 d3             	lea    -0x2d(%ebp),%eax
 804ada4:	89 44 24 08          	mov    %eax,0x8(%esp)
 804ada8:	c7 44 24 04 40 fe 04 	movl   $0x804fe40,0x4(%esp)
 804adaf:	08 
 804adb0:	8d 45 dc             	lea    -0x24(%ebp),%eax
 804adb3:	89 04 24             	mov    %eax,(%esp)
 804adb6:	e8 15 e7 ff ff       	call   80494d0 <_ZNSsC1EPKcRKSaIcE@plt>
 804adbb:	8d 45 dc             	lea    -0x24(%ebp),%eax
 804adbe:	89 04 24             	mov    %eax,(%esp)
 804adc1:	e8 b1 06 00 00       	call   804b477 <_Z8epng_errRKSs>
 804adc6:	8d 45 dc             	lea    -0x24(%ebp),%eax
 804adc9:	89 04 24             	mov    %eax,(%esp)
 804adcc:	e8 6f e6 ff ff       	call   8049440 <_ZNSsD1Ev@plt>
 804add1:	8d 45 d3             	lea    -0x2d(%ebp),%eax
 804add4:	89 04 24             	mov    %eax,(%esp)
 804add7:	e8 a4 e7 ff ff       	call   8049580 <_ZNSaIcED1Ev@plt>
		png_destroy_write_struct(&png_ptr, NULL);
 804addc:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
 804ade3:	00 
 804ade4:	8d 45 d4             	lea    -0x2c(%ebp),%eax
 804ade7:	89 04 24             	mov    %eax,(%esp)
 804adea:	e8 d1 e6 ff ff       	call   80494c0 <png_destroy_write_struct@plt>
		fclose(fp);
 804adef:	8b 45 e8             	mov    -0x18(%ebp),%eax
 804adf2:	89 04 24             	mov    %eax,(%esp)
 804adf5:	e8 76 e6 ff ff       	call   8049470 <fclose@plt>
		return false;
 804adfa:	b8 00 00 00 00       	mov    $0x0,%eax
 804adff:	e9 28 04 00 00       	jmp    804b22c <_ZN3PNG11writeToFileERKSs+0x59c>
	}

	if (setjmp(png_jmpbuf(png_ptr)))
 804ae04:	8b 45 d4             	mov    -0x2c(%ebp),%eax
 804ae07:	89 04 24             	mov    %eax,(%esp)
 804ae0a:	e8 71 e6 ff ff       	call   8049480 <_setjmp@plt>
 804ae0f:	85 c0                	test   %eax,%eax
 804ae11:	0f 95 c0             	setne  %al
 804ae14:	84 c0                	test   %al,%al
 804ae16:	74 6d                	je     804ae85 <_ZN3PNG11writeToFileERKSs+0x1f5>
	{
		epng_err("Error initializing libpng io");
 804ae18:	8d 45 d3             	lea    -0x2d(%ebp),%eax
 804ae1b:	89 04 24             	mov    %eax,(%esp)
 804ae1e:	e8 6d e8 ff ff       	call   8049690 <_ZNSaIcEC1Ev@plt>
 804ae23:	8d 45 d3             	lea    -0x2d(%ebp),%eax
 804ae26:	89 44 24 08          	mov    %eax,0x8(%esp)
 804ae2a:	c7 44 24 04 cf fd 04 	movl   $0x804fdcf,0x4(%esp)
 804ae31:	08 
 804ae32:	8d 45 dc             	lea    -0x24(%ebp),%eax
 804ae35:	89 04 24             	mov    %eax,(%esp)
 804ae38:	e8 93 e6 ff ff       	call   80494d0 <_ZNSsC1EPKcRKSaIcE@plt>
 804ae3d:	8d 45 dc             	lea    -0x24(%ebp),%eax
 804ae40:	89 04 24             	mov    %eax,(%esp)
 804ae43:	e8 2f 06 00 00       	call   804b477 <_Z8epng_errRKSs>
 804ae48:	8d 45 dc             	lea    -0x24(%ebp),%eax
 804ae4b:	89 04 24             	mov    %eax,(%esp)
 804ae4e:	e8 ed e5 ff ff       	call   8049440 <_ZNSsD1Ev@plt>
 804ae53:	8d 45 d3             	lea    -0x2d(%ebp),%eax
 804ae56:	89 04 24             	mov    %eax,(%esp)
 804ae59:	e8 22 e7 ff ff       	call   8049580 <_ZNSaIcED1Ev@plt>
		png_destroy_write_struct(&png_ptr, &info_ptr);
 804ae5e:	8d 45 d8             	lea    -0x28(%ebp),%eax
 804ae61:	89 44 24 04          	mov    %eax,0x4(%esp)
 804ae65:	8d 45 d4             	lea    -0x2c(%ebp),%eax
 804ae68:	89 04 24             	mov    %eax,(%esp)
 804ae6b:	e8 50 e6 ff ff       	call   80494c0 <png_destroy_write_struct@plt>
		fclose(fp);
 804ae70:	8b 45 e8             	mov    -0x18(%ebp),%eax
 804ae73:	89 04 24             	mov    %eax,(%esp)
 804ae76:	e8 f5 e5 ff ff       	call   8049470 <fclose@plt>
		return false;
 804ae7b:	b8 00 00 00 00       	mov    $0x0,%eax
 804ae80:	e9 a7 03 00 00       	jmp    804b22c <_ZN3PNG11writeToFileERKSs+0x59c>
	}

	png_init_io(png_ptr, fp);
 804ae85:	8b 45 d4             	mov    -0x2c(%ebp),%eax
 804ae88:	8b 55 e8             	mov    -0x18(%ebp),%edx
 804ae8b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804ae8f:	89 04 24             	mov    %eax,(%esp)
 804ae92:	e8 b9 e5 ff ff       	call   8049450 <png_init_io@plt>

	// write header
	if (setjmp(png_jmpbuf(png_ptr)))
 804ae97:	8b 45 d4             	mov    -0x2c(%ebp),%eax
 804ae9a:	89 04 24             	mov    %eax,(%esp)
 804ae9d:	e8 de e5 ff ff       	call   8049480 <_setjmp@plt>
 804aea2:	85 c0                	test   %eax,%eax
 804aea4:	0f 95 c0             	setne  %al
 804aea7:	84 c0                	test   %al,%al
 804aea9:	74 6d                	je     804af18 <_ZN3PNG11writeToFileERKSs+0x288>
	{
		epng_err("Error writing image header");
 804aeab:	8d 45 d3             	lea    -0x2d(%ebp),%eax
 804aeae:	89 04 24             	mov    %eax,(%esp)
 804aeb1:	e8 da e7 ff ff       	call   8049690 <_ZNSaIcEC1Ev@plt>
 804aeb6:	8d 45 d3             	lea    -0x2d(%ebp),%eax
 804aeb9:	89 44 24 08          	mov    %eax,0x8(%esp)
 804aebd:	c7 44 24 04 61 fe 04 	movl   $0x804fe61,0x4(%esp)
 804aec4:	08 
 804aec5:	8d 45 dc             	lea    -0x24(%ebp),%eax
 804aec8:	89 04 24             	mov    %eax,(%esp)
 804aecb:	e8 00 e6 ff ff       	call   80494d0 <_ZNSsC1EPKcRKSaIcE@plt>
 804aed0:	8d 45 dc             	lea    -0x24(%ebp),%eax
 804aed3:	89 04 24             	mov    %eax,(%esp)
 804aed6:	e8 9c 05 00 00       	call   804b477 <_Z8epng_errRKSs>
 804aedb:	8d 45 dc             	lea    -0x24(%ebp),%eax
 804aede:	89 04 24             	mov    %eax,(%esp)
 804aee1:	e8 5a e5 ff ff       	call   8049440 <_ZNSsD1Ev@plt>
 804aee6:	8d 45 d3             	lea    -0x2d(%ebp),%eax
 804aee9:	89 04 24             	mov    %eax,(%esp)
 804aeec:	e8 8f e6 ff ff       	call   8049580 <_ZNSaIcED1Ev@plt>
		png_destroy_write_struct(&png_ptr, &info_ptr);
 804aef1:	8d 45 d8             	lea    -0x28(%ebp),%eax
 804aef4:	89 44 24 04          	mov    %eax,0x4(%esp)
 804aef8:	8d 45 d4             	lea    -0x2c(%ebp),%eax
 804aefb:	89 04 24             	mov    %eax,(%esp)
 804aefe:	e8 bd e5 ff ff       	call   80494c0 <png_destroy_write_struct@plt>
		fclose(fp);
 804af03:	8b 45 e8             	mov    -0x18(%ebp),%eax
 804af06:	89 04 24             	mov    %eax,(%esp)
 804af09:	e8 62 e5 ff ff       	call   8049470 <fclose@plt>
		return false;
 804af0e:	b8 00 00 00 00       	mov    $0x0,%eax
 804af13:	e9 14 03 00 00       	jmp    804b22c <_ZN3PNG11writeToFileERKSs+0x59c>
	png_set_IHDR(png_ptr, info_ptr, _width, _height, 
			8,
			PNG_COLOR_TYPE_RGB_ALPHA, 
			PNG_INTERLACE_NONE, 
			PNG_COMPRESSION_TYPE_BASE,
			PNG_FILTER_TYPE_BASE);
 804af18:	8b 45 08             	mov    0x8(%ebp),%eax
 804af1b:	8b 58 04             	mov    0x4(%eax),%ebx
 804af1e:	8b 45 08             	mov    0x8(%ebp),%eax
 804af21:	8b 08                	mov    (%eax),%ecx
 804af23:	8b 55 d8             	mov    -0x28(%ebp),%edx
 804af26:	8b 45 d4             	mov    -0x2c(%ebp),%eax
 804af29:	c7 44 24 20 00 00 00 	movl   $0x0,0x20(%esp)
 804af30:	00 
 804af31:	c7 44 24 1c 00 00 00 	movl   $0x0,0x1c(%esp)
 804af38:	00 
 804af39:	c7 44 24 18 00 00 00 	movl   $0x0,0x18(%esp)
 804af40:	00 
 804af41:	c7 44 24 14 06 00 00 	movl   $0x6,0x14(%esp)
 804af48:	00 
 804af49:	c7 44 24 10 08 00 00 	movl   $0x8,0x10(%esp)
 804af50:	00 
 804af51:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
 804af55:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804af59:	89 54 24 04          	mov    %edx,0x4(%esp)
 804af5d:	89 04 24             	mov    %eax,(%esp)
 804af60:	e8 9b e3 ff ff       	call   8049300 <png_set_IHDR@plt>

	png_write_info(png_ptr, info_ptr);
 804af65:	8b 55 d8             	mov    -0x28(%ebp),%edx
 804af68:	8b 45 d4             	mov    -0x2c(%ebp),%eax
 804af6b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804af6f:	89 04 24             	mov    %eax,(%esp)
 804af72:	e8 39 e3 ff ff       	call   80492b0 <png_write_info@plt>

	// write image
	if (setjmp(png_jmpbuf(png_ptr)))
 804af77:	8b 45 d4             	mov    -0x2c(%ebp),%eax
 804af7a:	89 04 24             	mov    %eax,(%esp)
 804af7d:	e8 fe e4 ff ff       	call   8049480 <_setjmp@plt>
 804af82:	85 c0                	test   %eax,%eax
 804af84:	0f 95 c0             	setne  %al
 804af87:	84 c0                	test   %al,%al
 804af89:	74 6d                	je     804aff8 <_ZN3PNG11writeToFileERKSs+0x368>
	{
		epng_err("Failed to write image");
 804af8b:	8d 45 d3             	lea    -0x2d(%ebp),%eax
 804af8e:	89 04 24             	mov    %eax,(%esp)
 804af91:	e8 fa e6 ff ff       	call   8049690 <_ZNSaIcEC1Ev@plt>
 804af96:	8d 45 d3             	lea    -0x2d(%ebp),%eax
 804af99:	89 44 24 08          	mov    %eax,0x8(%esp)
 804af9d:	c7 44 24 04 7c fe 04 	movl   $0x804fe7c,0x4(%esp)
 804afa4:	08 
 804afa5:	8d 45 dc             	lea    -0x24(%ebp),%eax
 804afa8:	89 04 24             	mov    %eax,(%esp)
 804afab:	e8 20 e5 ff ff       	call   80494d0 <_ZNSsC1EPKcRKSaIcE@plt>
 804afb0:	8d 45 dc             	lea    -0x24(%ebp),%eax
 804afb3:	89 04 24             	mov    %eax,(%esp)
 804afb6:	e8 bc 04 00 00       	call   804b477 <_Z8epng_errRKSs>
 804afbb:	8d 45 dc             	lea    -0x24(%ebp),%eax
 804afbe:	89 04 24             	mov    %eax,(%esp)
 804afc1:	e8 7a e4 ff ff       	call   8049440 <_ZNSsD1Ev@plt>
 804afc6:	8d 45 d3             	lea    -0x2d(%ebp),%eax
 804afc9:	89 04 24             	mov    %eax,(%esp)
 804afcc:	e8 af e5 ff ff       	call   8049580 <_ZNSaIcED1Ev@plt>
		png_destroy_write_struct(&png_ptr, &info_ptr);
 804afd1:	8d 45 d8             	lea    -0x28(%ebp),%eax
 804afd4:	89 44 24 04          	mov    %eax,0x4(%esp)
 804afd8:	8d 45 d4             	lea    -0x2c(%ebp),%eax
 804afdb:	89 04 24             	mov    %eax,(%esp)
 804afde:	e8 dd e4 ff ff       	call   80494c0 <png_destroy_write_struct@plt>
		fclose(fp);
 804afe3:	8b 45 e8             	mov    -0x18(%ebp),%eax
 804afe6:	89 04 24             	mov    %eax,(%esp)
 804afe9:	e8 82 e4 ff ff       	call   8049470 <fclose@plt>
		return false;
 804afee:	b8 00 00 00 00       	mov    $0x0,%eax
 804aff3:	e9 34 02 00 00       	jmp    804b22c <_ZN3PNG11writeToFileERKSs+0x59c>
	}

	int bpr = png_get_rowbytes(png_ptr, info_ptr);
 804aff8:	8b 55 d8             	mov    -0x28(%ebp),%edx
 804affb:	8b 45 d4             	mov    -0x2c(%ebp),%eax
 804affe:	89 54 24 04          	mov    %edx,0x4(%esp)
 804b002:	89 04 24             	mov    %eax,(%esp)
 804b005:	e8 f6 e6 ff ff       	call   8049700 <png_get_rowbytes@plt>
 804b00a:	89 45 ec             	mov    %eax,-0x14(%ebp)
	png_byte * row = new png_byte[bpr];
 804b00d:	8b 45 ec             	mov    -0x14(%ebp),%eax
 804b010:	89 04 24             	mov    %eax,(%esp)
 804b013:	e8 38 e5 ff ff       	call   8049550 <_Znaj@plt>
 804b018:	89 45 f0             	mov    %eax,-0x10(%ebp)
	for (size_t y = 0; y < _height; y++)
 804b01b:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
 804b022:	e9 d6 00 00 00       	jmp    804b0fd <_ZN3PNG11writeToFileERKSs+0x46d>
	{
		for (size_t x = 0; x < _width; x++)
 804b027:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
 804b02e:	e9 a6 00 00 00       	jmp    804b0d9 <_ZN3PNG11writeToFileERKSs+0x449>
		{
			png_byte * pix = &(row[x*4]);
 804b033:	8b 45 e4             	mov    -0x1c(%ebp),%eax
 804b036:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
 804b03d:	8b 45 f0             	mov    -0x10(%ebp),%eax
 804b040:	01 d0                	add    %edx,%eax
 804b042:	89 45 f4             	mov    %eax,-0xc(%ebp)
			pix[0] = _pixel(x,y).red;
 804b045:	8b 45 e0             	mov    -0x20(%ebp),%eax
 804b048:	89 44 24 08          	mov    %eax,0x8(%esp)
 804b04c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
 804b04f:	89 44 24 04          	mov    %eax,0x4(%esp)
 804b053:	8b 45 08             	mov    0x8(%ebp),%eax
 804b056:	89 04 24             	mov    %eax,(%esp)
 804b059:	e8 da eb ff ff       	call   8049c38 <_ZNK3PNG6_pixelEjj>
 804b05e:	0f b6 10             	movzbl (%eax),%edx
 804b061:	8b 45 f4             	mov    -0xc(%ebp),%eax
 804b064:	88 10                	mov    %dl,(%eax)
			pix[1] = _pixel(x,y).green;
 804b066:	8b 45 f4             	mov    -0xc(%ebp),%eax
 804b069:	8d 58 01             	lea    0x1(%eax),%ebx
 804b06c:	8b 45 e0             	mov    -0x20(%ebp),%eax
 804b06f:	89 44 24 08          	mov    %eax,0x8(%esp)
 804b073:	8b 45 e4             	mov    -0x1c(%ebp),%eax
 804b076:	89 44 24 04          	mov    %eax,0x4(%esp)
 804b07a:	8b 45 08             	mov    0x8(%ebp),%eax
 804b07d:	89 04 24             	mov    %eax,(%esp)
 804b080:	e8 b3 eb ff ff       	call   8049c38 <_ZNK3PNG6_pixelEjj>
 804b085:	0f b6 40 01          	movzbl 0x1(%eax),%eax
 804b089:	88 03                	mov    %al,(%ebx)
			pix[2] = _pixel(x,y).blue;
 804b08b:	8b 45 f4             	mov    -0xc(%ebp),%eax
 804b08e:	8d 58 02             	lea    0x2(%eax),%ebx
 804b091:	8b 45 e0             	mov    -0x20(%ebp),%eax
 804b094:	89 44 24 08          	mov    %eax,0x8(%esp)
 804b098:	8b 45 e4             	mov    -0x1c(%ebp),%eax
 804b09b:	89 44 24 04          	mov    %eax,0x4(%esp)
 804b09f:	8b 45 08             	mov    0x8(%ebp),%eax
 804b0a2:	89 04 24             	mov    %eax,(%esp)
 804b0a5:	e8 8e eb ff ff       	call   8049c38 <_ZNK3PNG6_pixelEjj>
 804b0aa:	0f b6 40 02          	movzbl 0x2(%eax),%eax
 804b0ae:	88 03                	mov    %al,(%ebx)
			pix[3] = _pixel(x,y).alpha;
 804b0b0:	8b 45 f4             	mov    -0xc(%ebp),%eax
 804b0b3:	8d 58 03             	lea    0x3(%eax),%ebx
 804b0b6:	8b 45 e0             	mov    -0x20(%ebp),%eax
 804b0b9:	89 44 24 08          	mov    %eax,0x8(%esp)
 804b0bd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
 804b0c0:	89 44 24 04          	mov    %eax,0x4(%esp)
 804b0c4:	8b 45 08             	mov    0x8(%ebp),%eax
 804b0c7:	89 04 24             	mov    %eax,(%esp)
 804b0ca:	e8 69 eb ff ff       	call   8049c38 <_ZNK3PNG6_pixelEjj>
 804b0cf:	0f b6 40 03          	movzbl 0x3(%eax),%eax
 804b0d3:	88 03                	mov    %al,(%ebx)

	int bpr = png_get_rowbytes(png_ptr, info_ptr);
	png_byte * row = new png_byte[bpr];
	for (size_t y = 0; y < _height; y++)
	{
		for (size_t x = 0; x < _width; x++)
 804b0d5:	83 45 e4 01          	addl   $0x1,-0x1c(%ebp)
 804b0d9:	8b 45 08             	mov    0x8(%ebp),%eax
 804b0dc:	8b 00                	mov    (%eax),%eax
 804b0de:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
 804b0e1:	0f 87 4c ff ff ff    	ja     804b033 <_ZN3PNG11writeToFileERKSs+0x3a3>
			pix[0] = _pixel(x,y).red;
			pix[1] = _pixel(x,y).green;
			pix[2] = _pixel(x,y).blue;
			pix[3] = _pixel(x,y).alpha;
		}
		png_write_row(png_ptr, row);
 804b0e7:	8b 45 d4             	mov    -0x2c(%ebp),%eax
 804b0ea:	8b 55 f0             	mov    -0x10(%ebp),%edx
 804b0ed:	89 54 24 04          	mov    %edx,0x4(%esp)
 804b0f1:	89 04 24             	mov    %eax,(%esp)
 804b0f4:	e8 37 e3 ff ff       	call   8049430 <png_write_row@plt>
		return false;
	}

	int bpr = png_get_rowbytes(png_ptr, info_ptr);
	png_byte * row = new png_byte[bpr];
	for (size_t y = 0; y < _height; y++)
 804b0f9:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
 804b0fd:	8b 45 08             	mov    0x8(%ebp),%eax
 804b100:	8b 40 04             	mov    0x4(%eax),%eax
 804b103:	3b 45 e0             	cmp    -0x20(%ebp),%eax
 804b106:	0f 87 1b ff ff ff    	ja     804b027 <_ZN3PNG11writeToFileERKSs+0x397>
			pix[2] = _pixel(x,y).blue;
			pix[3] = _pixel(x,y).alpha;
		}
		png_write_row(png_ptr, row);
	}
	delete [] row;
 804b10c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
 804b110:	74 0b                	je     804b11d <_ZN3PNG11writeToFileERKSs+0x48d>
 804b112:	8b 45 f0             	mov    -0x10(%ebp),%eax
 804b115:	89 04 24             	mov    %eax,(%esp)
 804b118:	e8 93 e4 ff ff       	call   80495b0 <_ZdaPv@plt>
	png_write_end(png_ptr, NULL);
 804b11d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
 804b120:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
 804b127:	00 
 804b128:	89 04 24             	mov    %eax,(%esp)
 804b12b:	e8 f0 e2 ff ff       	call   8049420 <png_write_end@plt>
	png_destroy_write_struct(&png_ptr, &info_ptr);
 804b130:	8d 45 d8             	lea    -0x28(%ebp),%eax
 804b133:	89 44 24 04          	mov    %eax,0x4(%esp)
 804b137:	8d 45 d4             	lea    -0x2c(%ebp),%eax
 804b13a:	89 04 24             	mov    %eax,(%esp)
 804b13d:	e8 7e e3 ff ff       	call   80494c0 <png_destroy_write_struct@plt>
	fclose(fp);
 804b142:	8b 45 e8             	mov    -0x18(%ebp),%eax
 804b145:	89 04 24             	mov    %eax,(%esp)
 804b148:	e8 23 e3 ff ff       	call   8049470 <fclose@plt>
	return true;
 804b14d:	b8 01 00 00 00       	mov    $0x1,%eax
 804b152:	e9 d5 00 00 00       	jmp    804b22c <_ZN3PNG11writeToFileERKSs+0x59c>
 804b157:	89 c3                	mov    %eax,%ebx
bool PNG::writeToFile(string const & file_name)
{
	FILE * fp = fopen(file_name.c_str(), "wb");
	if (!fp)
	{
		epng_err("Failed to open file " + file_name);
 804b159:	8d 45 dc             	lea    -0x24(%ebp),%eax
 804b15c:	89 04 24             	mov    %eax,(%esp)
 804b15f:	e8 dc e2 ff ff       	call   8049440 <_ZNSsD1Ev@plt>
 804b164:	89 d8                	mov    %ebx,%eax
 804b166:	89 04 24             	mov    %eax,(%esp)
 804b169:	e8 62 e5 ff ff       	call   80496d0 <_Unwind_Resume@plt>
 804b16e:	89 c3                	mov    %eax,%ebx
	}

	png_structp png_ptr = png_create_write_struct(PNG_LIBPNG_VER_STRING, NULL, NULL, NULL);
	if (!png_ptr)
	{
		epng_err("Failed to create png struct");
 804b170:	8d 45 dc             	lea    -0x24(%ebp),%eax
 804b173:	89 04 24             	mov    %eax,(%esp)
 804b176:	e8 c5 e2 ff ff       	call   8049440 <_ZNSsD1Ev@plt>
 804b17b:	eb 02                	jmp    804b17f <_ZN3PNG11writeToFileERKSs+0x4ef>
 804b17d:	89 c3                	mov    %eax,%ebx
 804b17f:	8d 45 d8             	lea    -0x28(%ebp),%eax
 804b182:	89 04 24             	mov    %eax,(%esp)
 804b185:	e8 f6 e3 ff ff       	call   8049580 <_ZNSaIcED1Ev@plt>
 804b18a:	89 d8                	mov    %ebx,%eax
 804b18c:	89 04 24             	mov    %eax,(%esp)
 804b18f:	e8 3c e5 ff ff       	call   80496d0 <_Unwind_Resume@plt>
 804b194:	89 c3                	mov    %eax,%ebx
	}

	png_infop info_ptr = png_create_info_struct(png_ptr);
	if (!info_ptr)
	{
		epng_err("Failed to create png info struct");
 804b196:	8d 45 dc             	lea    -0x24(%ebp),%eax
 804b199:	89 04 24             	mov    %eax,(%esp)
 804b19c:	e8 9f e2 ff ff       	call   8049440 <_ZNSsD1Ev@plt>
 804b1a1:	eb 02                	jmp    804b1a5 <_ZN3PNG11writeToFileERKSs+0x515>
 804b1a3:	89 c3                	mov    %eax,%ebx
 804b1a5:	8d 45 d3             	lea    -0x2d(%ebp),%eax
 804b1a8:	89 04 24             	mov    %eax,(%esp)
 804b1ab:	e8 d0 e3 ff ff       	call   8049580 <_ZNSaIcED1Ev@plt>
 804b1b0:	89 d8                	mov    %ebx,%eax
 804b1b2:	89 04 24             	mov    %eax,(%esp)
 804b1b5:	e8 16 e5 ff ff       	call   80496d0 <_Unwind_Resume@plt>
 804b1ba:	89 c3                	mov    %eax,%ebx
		return false;
	}

	if (setjmp(png_jmpbuf(png_ptr)))
	{
		epng_err("Error initializing libpng io");
 804b1bc:	8d 45 dc             	lea    -0x24(%ebp),%eax
 804b1bf:	89 04 24             	mov    %eax,(%esp)
 804b1c2:	e8 79 e2 ff ff       	call   8049440 <_ZNSsD1Ev@plt>
 804b1c7:	eb 02                	jmp    804b1cb <_ZN3PNG11writeToFileERKSs+0x53b>
 804b1c9:	89 c3                	mov    %eax,%ebx
 804b1cb:	8d 45 d3             	lea    -0x2d(%ebp),%eax
 804b1ce:	89 04 24             	mov    %eax,(%esp)
 804b1d1:	e8 aa e3 ff ff       	call   8049580 <_ZNSaIcED1Ev@plt>
 804b1d6:	89 d8                	mov    %ebx,%eax
 804b1d8:	89 04 24             	mov    %eax,(%esp)
 804b1db:	e8 f0 e4 ff ff       	call   80496d0 <_Unwind_Resume@plt>
 804b1e0:	89 c3                	mov    %eax,%ebx
	png_init_io(png_ptr, fp);

	// write header
	if (setjmp(png_jmpbuf(png_ptr)))
	{
		epng_err("Error writing image header");
 804b1e2:	8d 45 dc             	lea    -0x24(%ebp),%eax
 804b1e5:	89 04 24             	mov    %eax,(%esp)
 804b1e8:	e8 53 e2 ff ff       	call   8049440 <_ZNSsD1Ev@plt>
 804b1ed:	eb 02                	jmp    804b1f1 <_ZN3PNG11writeToFileERKSs+0x561>
 804b1ef:	89 c3                	mov    %eax,%ebx
 804b1f1:	8d 45 d3             	lea    -0x2d(%ebp),%eax
 804b1f4:	89 04 24             	mov    %eax,(%esp)
 804b1f7:	e8 84 e3 ff ff       	call   8049580 <_ZNSaIcED1Ev@plt>
 804b1fc:	89 d8                	mov    %ebx,%eax
 804b1fe:	89 04 24             	mov    %eax,(%esp)
 804b201:	e8 ca e4 ff ff       	call   80496d0 <_Unwind_Resume@plt>
 804b206:	89 c3                	mov    %eax,%ebx
	png_write_info(png_ptr, info_ptr);

	// write image
	if (setjmp(png_jmpbuf(png_ptr)))
	{
		epng_err("Failed to write image");
 804b208:	8d 45 dc             	lea    -0x24(%ebp),%eax
 804b20b:	89 04 24             	mov    %eax,(%esp)
 804b20e:	e8 2d e2 ff ff       	call   8049440 <_ZNSsD1Ev@plt>
 804b213:	eb 02                	jmp    804b217 <_ZN3PNG11writeToFileERKSs+0x587>
 804b215:	89 c3                	mov    %eax,%ebx
 804b217:	8d 45 d3             	lea    -0x2d(%ebp),%eax
 804b21a:	89 04 24             	mov    %eax,(%esp)
 804b21d:	e8 5e e3 ff ff       	call   8049580 <_ZNSaIcED1Ev@plt>
 804b222:	89 d8                	mov    %ebx,%eax
 804b224:	89 04 24             	mov    %eax,(%esp)
 804b227:	e8 a4 e4 ff ff       	call   80496d0 <_Unwind_Resume@plt>
	delete [] row;
	png_write_end(png_ptr, NULL);
	png_destroy_write_struct(&png_ptr, &info_ptr);
	fclose(fp);
	return true;
}
 804b22c:	8b 5d fc             	mov    -0x4(%ebp),%ebx
 804b22f:	c9                   	leave  
 804b230:	c3                   	ret    
 804b231:	90                   	nop

0804b232 <_ZNK3PNG5widthEv>:

size_t PNG::width() const
{
 804b232:	55                   	push   %ebp
 804b233:	89 e5                	mov    %esp,%ebp
	return _width;
 804b235:	8b 45 08             	mov    0x8(%ebp),%eax
 804b238:	8b 00                	mov    (%eax),%eax
}
 804b23a:	5d                   	pop    %ebp
 804b23b:	c3                   	ret    

0804b23c <_ZNK3PNG6heightEv>:

size_t PNG::height() const
{
 804b23c:	55                   	push   %ebp
 804b23d:	89 e5                	mov    %esp,%ebp
	return _height;
 804b23f:	8b 45 08             	mov    0x8(%ebp),%eax
 804b242:	8b 40 04             	mov    0x4(%eax),%eax
}
 804b245:	5d                   	pop    %ebp
 804b246:	c3                   	ret    
 804b247:	90                   	nop

0804b248 <_ZN3PNG6resizeEjj>:

void PNG::resize(size_t width_arg, size_t height_arg)
{
 804b248:	55                   	push   %ebp
 804b249:	89 e5                	mov    %esp,%ebp
 804b24b:	57                   	push   %edi
 804b24c:	56                   	push   %esi
 804b24d:	53                   	push   %ebx
 804b24e:	83 ec 3c             	sub    $0x3c,%esp
	_min_clamp_xy(width_arg, height_arg);
 804b251:	8d 45 10             	lea    0x10(%ebp),%eax
 804b254:	89 44 24 08          	mov    %eax,0x8(%esp)
 804b258:	8d 45 0c             	lea    0xc(%ebp),%eax
 804b25b:	89 44 24 04          	mov    %eax,0x4(%esp)
 804b25f:	8b 45 08             	mov    0x8(%ebp),%eax
 804b262:	89 04 24             	mov    %eax,(%esp)
 804b265:	e8 0a ec ff ff       	call   8049e74 <_ZNK3PNG13_min_clamp_xyERjS0_>
	if (width_arg == _width && height_arg == _height)
 804b26a:	8b 45 08             	mov    0x8(%ebp),%eax
 804b26d:	8b 10                	mov    (%eax),%edx
 804b26f:	8b 45 0c             	mov    0xc(%ebp),%eax
 804b272:	39 c2                	cmp    %eax,%edx
 804b274:	75 12                	jne    804b288 <_ZN3PNG6resizeEjj+0x40>
 804b276:	8b 45 08             	mov    0x8(%ebp),%eax
 804b279:	8b 50 04             	mov    0x4(%eax),%edx
 804b27c:	8b 45 10             	mov    0x10(%ebp),%eax
 804b27f:	39 c2                	cmp    %eax,%edx
 804b281:	75 05                	jne    804b288 <_ZN3PNG6resizeEjj+0x40>
		return;
 804b283:	e9 5e 01 00 00       	jmp    804b3e6 <_ZN3PNG6resizeEjj+0x19e>

	RGBAPixel * arr = _pixels;
 804b288:	8b 45 08             	mov    0x8(%ebp),%eax
 804b28b:	8b 40 08             	mov    0x8(%eax),%eax
 804b28e:	89 45 d4             	mov    %eax,-0x2c(%ebp)

	// make a new array if needed
	// will be all white because of RGBAPixel default constructor
	bool new_arr = width_arg * height_arg > _width * _height;
 804b291:	8b 55 0c             	mov    0xc(%ebp),%edx
 804b294:	8b 45 10             	mov    0x10(%ebp),%eax
 804b297:	0f af d0             	imul   %eax,%edx
 804b29a:	8b 45 08             	mov    0x8(%ebp),%eax
 804b29d:	8b 08                	mov    (%eax),%ecx
 804b29f:	8b 45 08             	mov    0x8(%ebp),%eax
 804b2a2:	8b 40 04             	mov    0x4(%eax),%eax
 804b2a5:	0f af c1             	imul   %ecx,%eax
 804b2a8:	39 c2                	cmp    %eax,%edx
 804b2aa:	0f 97 c0             	seta   %al
 804b2ad:	88 45 d3             	mov    %al,-0x2d(%ebp)
	if (new_arr)
 804b2b0:	80 7d d3 00          	cmpb   $0x0,-0x2d(%ebp)
 804b2b4:	74 4c                	je     804b302 <_ZN3PNG6resizeEjj+0xba>
		arr = new RGBAPixel[width_arg*height_arg];
 804b2b6:	8b 55 0c             	mov    0xc(%ebp),%edx
 804b2b9:	8b 45 10             	mov    0x10(%ebp),%eax
 804b2bc:	89 d6                	mov    %edx,%esi
 804b2be:	0f af f0             	imul   %eax,%esi
 804b2c1:	81 fe 00 00 c0 1f    	cmp    $0x1fc00000,%esi
 804b2c7:	77 09                	ja     804b2d2 <_ZN3PNG6resizeEjj+0x8a>
 804b2c9:	8d 04 b5 00 00 00 00 	lea    0x0(,%esi,4),%eax
 804b2d0:	eb 05                	jmp    804b2d7 <_ZN3PNG6resizeEjj+0x8f>
 804b2d2:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 804b2d7:	89 04 24             	mov    %eax,(%esp)
 804b2da:	e8 71 e2 ff ff       	call   8049550 <_Znaj@plt>
 804b2df:	89 c3                	mov    %eax,%ebx
 804b2e1:	89 d8                	mov    %ebx,%eax
 804b2e3:	8d 56 ff             	lea    -0x1(%esi),%edx
 804b2e6:	89 d7                	mov    %edx,%edi
 804b2e8:	89 c6                	mov    %eax,%esi
 804b2ea:	eb 0e                	jmp    804b2fa <_ZN3PNG6resizeEjj+0xb2>
 804b2ec:	89 34 24             	mov    %esi,(%esp)
 804b2ef:	e8 f6 e6 ff ff       	call   80499ea <_ZN9RGBAPixelC1Ev>
 804b2f4:	83 c6 04             	add    $0x4,%esi
 804b2f7:	83 ef 01             	sub    $0x1,%edi
 804b2fa:	83 ff ff             	cmp    $0xffffffff,%edi
 804b2fd:	75 ed                	jne    804b2ec <_ZN3PNG6resizeEjj+0xa4>
 804b2ff:	89 5d d4             	mov    %ebx,-0x2c(%ebp)

	// copy over pixels
	size_t min_width = (width_arg > _width) ? _width : width_arg;
 804b302:	8b 45 08             	mov    0x8(%ebp),%eax
 804b305:	8b 10                	mov    (%eax),%edx
 804b307:	8b 45 0c             	mov    0xc(%ebp),%eax
 804b30a:	39 c2                	cmp    %eax,%edx
 804b30c:	73 07                	jae    804b315 <_ZN3PNG6resizeEjj+0xcd>
 804b30e:	8b 45 08             	mov    0x8(%ebp),%eax
 804b311:	8b 00                	mov    (%eax),%eax
 804b313:	eb 03                	jmp    804b318 <_ZN3PNG6resizeEjj+0xd0>
 804b315:	8b 45 0c             	mov    0xc(%ebp),%eax
 804b318:	89 45 e0             	mov    %eax,-0x20(%ebp)
	size_t min_height = (height_arg > _height) ? _height : height_arg;
 804b31b:	8b 45 08             	mov    0x8(%ebp),%eax
 804b31e:	8b 50 04             	mov    0x4(%eax),%edx
 804b321:	8b 45 10             	mov    0x10(%ebp),%eax
 804b324:	39 c2                	cmp    %eax,%edx
 804b326:	73 08                	jae    804b330 <_ZN3PNG6resizeEjj+0xe8>
 804b328:	8b 45 08             	mov    0x8(%ebp),%eax
 804b32b:	8b 40 04             	mov    0x4(%eax),%eax
 804b32e:	eb 03                	jmp    804b333 <_ZN3PNG6resizeEjj+0xeb>
 804b330:	8b 45 10             	mov    0x10(%ebp),%eax
 804b333:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	for (size_t x = 0; x < min_width; x++)
 804b336:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
 804b33d:	eb 51                	jmp    804b390 <_ZN3PNG6resizeEjj+0x148>
		for (size_t y = 0; y < min_height; y++)
 804b33f:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
 804b346:	eb 3c                	jmp    804b384 <_ZN3PNG6resizeEjj+0x13c>
			arr[x + y * width_arg] = _pixel(x,y);
 804b348:	8b 45 0c             	mov    0xc(%ebp),%eax
 804b34b:	0f af 45 dc          	imul   -0x24(%ebp),%eax
 804b34f:	89 c2                	mov    %eax,%edx
 804b351:	8b 45 d8             	mov    -0x28(%ebp),%eax
 804b354:	01 d0                	add    %edx,%eax
 804b356:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
 804b35d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
 804b360:	8d 1c 02             	lea    (%edx,%eax,1),%ebx
 804b363:	8b 45 dc             	mov    -0x24(%ebp),%eax
 804b366:	89 44 24 08          	mov    %eax,0x8(%esp)
 804b36a:	8b 45 d8             	mov    -0x28(%ebp),%eax
 804b36d:	89 44 24 04          	mov    %eax,0x4(%esp)
 804b371:	8b 45 08             	mov    0x8(%ebp),%eax
 804b374:	89 04 24             	mov    %eax,(%esp)
 804b377:	e8 bc e8 ff ff       	call   8049c38 <_ZNK3PNG6_pixelEjj>
 804b37c:	8b 00                	mov    (%eax),%eax
 804b37e:	89 03                	mov    %eax,(%ebx)

	// copy over pixels
	size_t min_width = (width_arg > _width) ? _width : width_arg;
	size_t min_height = (height_arg > _height) ? _height : height_arg;
	for (size_t x = 0; x < min_width; x++)
		for (size_t y = 0; y < min_height; y++)
 804b380:	83 45 dc 01          	addl   $0x1,-0x24(%ebp)
 804b384:	8b 45 dc             	mov    -0x24(%ebp),%eax
 804b387:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
 804b38a:	72 bc                	jb     804b348 <_ZN3PNG6resizeEjj+0x100>
		arr = new RGBAPixel[width_arg*height_arg];

	// copy over pixels
	size_t min_width = (width_arg > _width) ? _width : width_arg;
	size_t min_height = (height_arg > _height) ? _height : height_arg;
	for (size_t x = 0; x < min_width; x++)
 804b38c:	83 45 d8 01          	addl   $0x1,-0x28(%ebp)
 804b390:	8b 45 d8             	mov    -0x28(%ebp),%eax
 804b393:	3b 45 e0             	cmp    -0x20(%ebp),%eax
 804b396:	72 a7                	jb     804b33f <_ZN3PNG6resizeEjj+0xf7>
		for (size_t y = 0; y < min_height; y++)
			arr[x + y * width_arg] = _pixel(x,y);

	// set new array if needed
	if (new_arr)
 804b398:	80 7d d3 00          	cmpb   $0x0,-0x2d(%ebp)
 804b39c:	74 21                	je     804b3bf <_ZN3PNG6resizeEjj+0x177>
	{
		delete [] _pixels;
 804b39e:	8b 45 08             	mov    0x8(%ebp),%eax
 804b3a1:	8b 40 08             	mov    0x8(%eax),%eax
 804b3a4:	85 c0                	test   %eax,%eax
 804b3a6:	74 0e                	je     804b3b6 <_ZN3PNG6resizeEjj+0x16e>
 804b3a8:	8b 45 08             	mov    0x8(%ebp),%eax
 804b3ab:	8b 40 08             	mov    0x8(%eax),%eax
 804b3ae:	89 04 24             	mov    %eax,(%esp)
 804b3b1:	e8 fa e1 ff ff       	call   80495b0 <_ZdaPv@plt>
		_pixels = arr;
 804b3b6:	8b 45 08             	mov    0x8(%ebp),%eax
 804b3b9:	8b 55 d4             	mov    -0x2c(%ebp),%edx
 804b3bc:	89 50 08             	mov    %edx,0x8(%eax)
	}

	// overwrite width and height
	_width = width_arg;
 804b3bf:	8b 55 0c             	mov    0xc(%ebp),%edx
 804b3c2:	8b 45 08             	mov    0x8(%ebp),%eax
 804b3c5:	89 10                	mov    %edx,(%eax)
	_height = height_arg;
 804b3c7:	8b 55 10             	mov    0x10(%ebp),%edx
 804b3ca:	8b 45 08             	mov    0x8(%ebp),%eax
 804b3cd:	89 50 04             	mov    %edx,0x4(%eax)
 804b3d0:	eb 14                	jmp    804b3e6 <_ZN3PNG6resizeEjj+0x19e>
 804b3d2:	89 c6                	mov    %eax,%esi

	// make a new array if needed
	// will be all white because of RGBAPixel default constructor
	bool new_arr = width_arg * height_arg > _width * _height;
	if (new_arr)
		arr = new RGBAPixel[width_arg*height_arg];
 804b3d4:	89 1c 24             	mov    %ebx,(%esp)
 804b3d7:	e8 d4 e1 ff ff       	call   80495b0 <_ZdaPv@plt>
 804b3dc:	89 f0                	mov    %esi,%eax
 804b3de:	89 04 24             	mov    %eax,(%esp)
 804b3e1:	e8 ea e2 ff ff       	call   80496d0 <_Unwind_Resume@plt>
	}

	// overwrite width and height
	_width = width_arg;
	_height = height_arg;
}
 804b3e6:	83 c4 3c             	add    $0x3c,%esp
 804b3e9:	5b                   	pop    %ebx
 804b3ea:	5e                   	pop    %esi
 804b3eb:	5f                   	pop    %edi
 804b3ec:	5d                   	pop    %ebp
 804b3ed:	c3                   	ret    

0804b3ee <_Z41__static_initialization_and_destruction_0ii>:
 804b3ee:	55                   	push   %ebp
 804b3ef:	89 e5                	mov    %esp,%ebp
 804b3f1:	83 ec 18             	sub    $0x18,%esp
 804b3f4:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
 804b3f8:	75 31                	jne    804b42b <_Z41__static_initialization_and_destruction_0ii+0x3d>
 804b3fa:	81 7d 0c ff ff 00 00 	cmpl   $0xffff,0xc(%ebp)
 804b401:	75 28                	jne    804b42b <_Z41__static_initialization_and_destruction_0ii+0x3d>
 804b403:	c7 04 24 4e 42 05 08 	movl   $0x805424e,(%esp)
 804b40a:	e8 61 df ff ff       	call   8049370 <_ZNSt8ios_base4InitC1Ev@plt>
 804b40f:	c7 44 24 08 34 41 05 	movl   $0x8054134,0x8(%esp)
 804b416:	08 
 804b417:	c7 44 24 04 4e 42 05 	movl   $0x805424e,0x4(%esp)
 804b41e:	08 
 804b41f:	c7 04 24 00 94 04 08 	movl   $0x8049400,(%esp)
 804b426:	e8 c5 de ff ff       	call   80492f0 <__cxa_atexit@plt>
 804b42b:	c9                   	leave  
 804b42c:	c3                   	ret    

0804b42d <_GLOBAL__sub_I__ZNK3PNG6_pixelEjj>:
 804b42d:	55                   	push   %ebp
 804b42e:	89 e5                	mov    %esp,%ebp
 804b430:	83 ec 18             	sub    $0x18,%esp
 804b433:	c7 44 24 04 ff ff 00 	movl   $0xffff,0x4(%esp)
 804b43a:	00 
 804b43b:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
 804b442:	e8 a7 ff ff ff       	call   804b3ee <_Z41__static_initialization_and_destruction_0ii>
 804b447:	c9                   	leave  
 804b448:	c3                   	ret    

0804b449 <_ZNSt11char_traitsIcE6lengthEPKc>:
      static int
      compare(const char_type* __s1, const char_type* __s2, size_t __n)
      { return __builtin_memcmp(__s1, __s2, __n); }

      static size_t
      length(const char_type* __s)
 804b449:	55                   	push   %ebp
 804b44a:	89 e5                	mov    %esp,%ebp
 804b44c:	57                   	push   %edi
      { return __builtin_strlen(__s); }
 804b44d:	8b 45 08             	mov    0x8(%ebp),%eax
 804b450:	b9 ff ff ff ff       	mov    $0xffffffff,%ecx
 804b455:	89 c2                	mov    %eax,%edx
 804b457:	b8 00 00 00 00       	mov    $0x0,%eax
 804b45c:	89 d7                	mov    %edx,%edi
 804b45e:	f2 ae                	repnz scas %es:(%edi),%al
 804b460:	89 c8                	mov    %ecx,%eax
 804b462:	f7 d0                	not    %eax
 804b464:	83 e8 01             	sub    $0x1,%eax
 804b467:	5f                   	pop    %edi
 804b468:	5d                   	pop    %ebp
 804b469:	c3                   	ret    

0804b46a <_ZStorSt13_Ios_OpenmodeS_>:
  operator&(_Ios_Openmode __a, _Ios_Openmode __b)
  { return _Ios_Openmode(static_cast<int>(__a) & static_cast<int>(__b)); }

  inline _GLIBCXX_CONSTEXPR _Ios_Openmode
  operator|(_Ios_Openmode __a, _Ios_Openmode __b)
  { return _Ios_Openmode(static_cast<int>(__a) | static_cast<int>(__b)); }
 804b46a:	55                   	push   %ebp
 804b46b:	89 e5                	mov    %esp,%ebp
 804b46d:	8b 55 08             	mov    0x8(%ebp),%edx
 804b470:	8b 45 0c             	mov    0xc(%ebp),%eax
 804b473:	09 d0                	or     %edx,%eax
 804b475:	5d                   	pop    %ebp
 804b476:	c3                   	ret    

0804b477 <_Z8epng_errRKSs>:
 */

#include "png.h"

inline void epng_err(string const & err)
{
 804b477:	55                   	push   %ebp
 804b478:	89 e5                	mov    %esp,%ebp
 804b47a:	83 ec 18             	sub    $0x18,%esp
	cerr << "[EasyPNG]: " << err << endl;
 804b47d:	c7 44 24 04 54 fc 04 	movl   $0x804fc54,0x4(%esp)
 804b484:	08 
 804b485:	c7 04 24 40 41 05 08 	movl   $0x8054140,(%esp)
 804b48c:	e8 7f df ff ff       	call   8049410 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>
 804b491:	8b 55 08             	mov    0x8(%ebp),%edx
 804b494:	89 54 24 04          	mov    %edx,0x4(%esp)
 804b498:	89 04 24             	mov    %eax,(%esp)
 804b49b:	e8 c0 e0 ff ff       	call   8049560 <_ZStlsIcSt11char_traitsIcESaIcEERSt13basic_ostreamIT_T0_ES7_RKSbIS4_S5_T1_E@plt>
 804b4a0:	c7 44 24 04 20 96 04 	movl   $0x8049620,0x4(%esp)
 804b4a7:	08 
 804b4a8:	89 04 24             	mov    %eax,(%esp)
 804b4ab:	e8 10 e1 ff ff       	call   80495c0 <_ZNSolsEPFRSoS_E@plt>
}
 804b4b0:	c9                   	leave  
 804b4b1:	c3                   	ret    

0804b4b2 <_ZStplIcSt11char_traitsIcESaIcEESbIT_T0_T1_EPKS3_RKS6_>:
      return *this;
    }
   
  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>
    operator+(const _CharT* __lhs,
 804b4b2:	55                   	push   %ebp
 804b4b3:	89 e5                	mov    %esp,%ebp
 804b4b5:	53                   	push   %ebx
 804b4b6:	83 ec 24             	sub    $0x24,%esp
	      const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    {
      __glibcxx_requires_string(__lhs);
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __string_type::size_type	  __size_type;
      const __size_type __len = _Traits::length(__lhs);
 804b4b9:	8b 45 0c             	mov    0xc(%ebp),%eax
 804b4bc:	89 04 24             	mov    %eax,(%esp)
 804b4bf:	e8 85 ff ff ff       	call   804b449 <_ZNSt11char_traitsIcE6lengthEPKc>
 804b4c4:	89 45 f4             	mov    %eax,-0xc(%ebp)
      __string_type __str;
 804b4c7:	8b 45 08             	mov    0x8(%ebp),%eax
 804b4ca:	89 04 24             	mov    %eax,(%esp)
 804b4cd:	e8 ee dd ff ff       	call   80492c0 <_ZNSsC1Ev@plt>
      __str.reserve(__len + __rhs.size());
 804b4d2:	8b 45 10             	mov    0x10(%ebp),%eax
 804b4d5:	89 04 24             	mov    %eax,(%esp)
 804b4d8:	e8 83 de ff ff       	call   8049360 <_ZNKSs4sizeEv@plt>
 804b4dd:	8b 55 f4             	mov    -0xc(%ebp),%edx
 804b4e0:	01 d0                	add    %edx,%eax
 804b4e2:	89 44 24 04          	mov    %eax,0x4(%esp)
 804b4e6:	8b 45 08             	mov    0x8(%ebp),%eax
 804b4e9:	89 04 24             	mov    %eax,(%esp)
 804b4ec:	e8 1f e2 ff ff       	call   8049710 <_ZNSs7reserveEj@plt>
      __str.append(__lhs, __len);
 804b4f1:	8b 45 f4             	mov    -0xc(%ebp),%eax
 804b4f4:	89 44 24 08          	mov    %eax,0x8(%esp)
 804b4f8:	8b 45 0c             	mov    0xc(%ebp),%eax
 804b4fb:	89 44 24 04          	mov    %eax,0x4(%esp)
 804b4ff:	8b 45 08             	mov    0x8(%ebp),%eax
 804b502:	89 04 24             	mov    %eax,(%esp)
 804b505:	e8 56 e1 ff ff       	call   8049660 <_ZNSs6appendEPKcj@plt>
      __str.append(__rhs);
 804b50a:	8b 45 10             	mov    0x10(%ebp),%eax
 804b50d:	89 44 24 04          	mov    %eax,0x4(%esp)
 804b511:	8b 45 08             	mov    0x8(%ebp),%eax
 804b514:	89 04 24             	mov    %eax,(%esp)
 804b517:	e8 d4 e1 ff ff       	call   80496f0 <_ZNSs6appendERKSs@plt>
      return __str;
 804b51c:	eb 17                	jmp    804b535 <_ZStplIcSt11char_traitsIcESaIcEESbIT_T0_T1_EPKS3_RKS6_+0x83>
 804b51e:	89 c3                	mov    %eax,%ebx
 804b520:	8b 45 08             	mov    0x8(%ebp),%eax
 804b523:	89 04 24             	mov    %eax,(%esp)
 804b526:	e8 15 df ff ff       	call   8049440 <_ZNSsD1Ev@plt>
 804b52b:	89 d8                	mov    %ebx,%eax
 804b52d:	89 04 24             	mov    %eax,(%esp)
 804b530:	e8 9b e1 ff ff       	call   80496d0 <_Unwind_Resume@plt>
    }
 804b535:	8b 45 08             	mov    0x8(%ebp),%eax
 804b538:	83 c4 24             	add    $0x24,%esp
 804b53b:	5b                   	pop    %ebx
 804b53c:	5d                   	pop    %ebp
 804b53d:	c2 04 00             	ret    $0x4

0804b540 <_ZN7Vector2C1Ev>:

#include "vector2.h"

#include <cmath>

Vector2::Vector2() : x_(0), y_(0)
 804b540:	55                   	push   %ebp
 804b541:	89 e5                	mov    %esp,%ebp
 804b543:	8b 45 08             	mov    0x8(%ebp),%eax
 804b546:	d9 ee                	fldz   
 804b548:	dd 18                	fstpl  (%eax)
 804b54a:	8b 45 08             	mov    0x8(%ebp),%eax
 804b54d:	d9 ee                	fldz   
 804b54f:	dd 58 08             	fstpl  0x8(%eax)
{
	/* Nothing.  See initialization list */
}
 804b552:	5d                   	pop    %ebp
 804b553:	c3                   	ret    

0804b554 <_ZN7Vector2C1Edd>:

Vector2::Vector2(double px, double py) : x_(px), y_(py)
 804b554:	55                   	push   %ebp
 804b555:	89 e5                	mov    %esp,%ebp
 804b557:	83 ec 10             	sub    $0x10,%esp
 804b55a:	8b 45 0c             	mov    0xc(%ebp),%eax
 804b55d:	89 45 f8             	mov    %eax,-0x8(%ebp)
 804b560:	8b 45 10             	mov    0x10(%ebp),%eax
 804b563:	89 45 fc             	mov    %eax,-0x4(%ebp)
 804b566:	8b 45 14             	mov    0x14(%ebp),%eax
 804b569:	89 45 f0             	mov    %eax,-0x10(%ebp)
 804b56c:	8b 45 18             	mov    0x18(%ebp),%eax
 804b56f:	89 45 f4             	mov    %eax,-0xc(%ebp)
 804b572:	8b 45 08             	mov    0x8(%ebp),%eax
 804b575:	dd 45 f8             	fldl   -0x8(%ebp)
 804b578:	dd 18                	fstpl  (%eax)
 804b57a:	8b 45 08             	mov    0x8(%ebp),%eax
 804b57d:	dd 45 f0             	fldl   -0x10(%ebp)
 804b580:	dd 58 08             	fstpl  0x8(%eax)
{
	/* Nothing.  See initialization list */
}
 804b583:	c9                   	leave  
 804b584:	c3                   	ret    
 804b585:	90                   	nop

0804b586 <_ZNK7Vector2miERKS_>:

Vector2 Vector2::operator-(const Vector2& other) const
{
 804b586:	55                   	push   %ebp
 804b587:	89 e5                	mov    %esp,%ebp
 804b589:	83 ec 28             	sub    $0x28,%esp
	return Vector2(this->x_ - other.x_, this->y_ - other.y_);
 804b58c:	8b 45 0c             	mov    0xc(%ebp),%eax
 804b58f:	dd 40 08             	fldl   0x8(%eax)
 804b592:	8b 45 10             	mov    0x10(%ebp),%eax
 804b595:	dd 40 08             	fldl   0x8(%eax)
 804b598:	de e9                	fsubrp %st,%st(1)
 804b59a:	8b 45 0c             	mov    0xc(%ebp),%eax
 804b59d:	dd 00                	fldl   (%eax)
 804b59f:	8b 45 10             	mov    0x10(%ebp),%eax
 804b5a2:	dd 00                	fldl   (%eax)
 804b5a4:	de e9                	fsubrp %st,%st(1)
 804b5a6:	d9 c9                	fxch   %st(1)
 804b5a8:	dd 5c 24 0c          	fstpl  0xc(%esp)
 804b5ac:	dd 5c 24 04          	fstpl  0x4(%esp)
 804b5b0:	8b 45 08             	mov    0x8(%ebp),%eax
 804b5b3:	89 04 24             	mov    %eax,(%esp)
 804b5b6:	e8 99 ff ff ff       	call   804b554 <_ZN7Vector2C1Edd>
}
 804b5bb:	8b 45 08             	mov    0x8(%ebp),%eax
 804b5be:	c9                   	leave  
 804b5bf:	c2 04 00             	ret    $0x4

0804b5c2 <_ZNK7Vector2plERKS_>:

Vector2 Vector2::operator+(const Vector2& other) const
{
 804b5c2:	55                   	push   %ebp
 804b5c3:	89 e5                	mov    %esp,%ebp
 804b5c5:	83 ec 28             	sub    $0x28,%esp
	return Vector2(this->x_ + other.x_, this->y_ + other.y_);
 804b5c8:	8b 45 0c             	mov    0xc(%ebp),%eax
 804b5cb:	dd 40 08             	fldl   0x8(%eax)
 804b5ce:	8b 45 10             	mov    0x10(%ebp),%eax
 804b5d1:	dd 40 08             	fldl   0x8(%eax)
 804b5d4:	de c1                	faddp  %st,%st(1)
 804b5d6:	8b 45 0c             	mov    0xc(%ebp),%eax
 804b5d9:	dd 00                	fldl   (%eax)
 804b5db:	8b 45 10             	mov    0x10(%ebp),%eax
 804b5de:	dd 00                	fldl   (%eax)
 804b5e0:	de c1                	faddp  %st,%st(1)
 804b5e2:	d9 c9                	fxch   %st(1)
 804b5e4:	dd 5c 24 0c          	fstpl  0xc(%esp)
 804b5e8:	dd 5c 24 04          	fstpl  0x4(%esp)
 804b5ec:	8b 45 08             	mov    0x8(%ebp),%eax
 804b5ef:	89 04 24             	mov    %eax,(%esp)
 804b5f2:	e8 5d ff ff ff       	call   804b554 <_ZN7Vector2C1Edd>
}
 804b5f7:	8b 45 08             	mov    0x8(%ebp),%eax
 804b5fa:	c9                   	leave  
 804b5fb:	c2 04 00             	ret    $0x4

0804b5fe <_ZN7Vector2mlEi>:

Vector2 Vector2::operator*(int constant)
{
 804b5fe:	55                   	push   %ebp
 804b5ff:	89 e5                	mov    %esp,%ebp
 804b601:	83 ec 28             	sub    $0x28,%esp
	return Vector2(this->x_ * constant, this->y_ * constant);
 804b604:	8b 45 0c             	mov    0xc(%ebp),%eax
 804b607:	dd 40 08             	fldl   0x8(%eax)
 804b60a:	db 45 10             	fildl  0x10(%ebp)
 804b60d:	de c9                	fmulp  %st,%st(1)
 804b60f:	8b 45 0c             	mov    0xc(%ebp),%eax
 804b612:	dd 00                	fldl   (%eax)
 804b614:	db 45 10             	fildl  0x10(%ebp)
 804b617:	de c9                	fmulp  %st,%st(1)
 804b619:	d9 c9                	fxch   %st(1)
 804b61b:	dd 5c 24 0c          	fstpl  0xc(%esp)
 804b61f:	dd 5c 24 04          	fstpl  0x4(%esp)
 804b623:	8b 45 08             	mov    0x8(%ebp),%eax
 804b626:	89 04 24             	mov    %eax,(%esp)
 804b629:	e8 26 ff ff ff       	call   804b554 <_ZN7Vector2C1Edd>
}
 804b62e:	8b 45 08             	mov    0x8(%ebp),%eax
 804b631:	c9                   	leave  
 804b632:	c2 04 00             	ret    $0x4
 804b635:	90                   	nop

0804b636 <_ZN7Vector2dvEi>:

Vector2 Vector2::operator/(int constant)
{
 804b636:	55                   	push   %ebp
 804b637:	89 e5                	mov    %esp,%ebp
 804b639:	83 ec 28             	sub    $0x28,%esp
	return Vector2(this->x_ / constant, this->y_ / constant);
 804b63c:	8b 45 0c             	mov    0xc(%ebp),%eax
 804b63f:	dd 40 08             	fldl   0x8(%eax)
 804b642:	db 45 10             	fildl  0x10(%ebp)
 804b645:	de f9                	fdivrp %st,%st(1)
 804b647:	8b 45 0c             	mov    0xc(%ebp),%eax
 804b64a:	dd 00                	fldl   (%eax)
 804b64c:	db 45 10             	fildl  0x10(%ebp)
 804b64f:	de f9                	fdivrp %st,%st(1)
 804b651:	d9 c9                	fxch   %st(1)
 804b653:	dd 5c 24 0c          	fstpl  0xc(%esp)
 804b657:	dd 5c 24 04          	fstpl  0x4(%esp)
 804b65b:	8b 45 08             	mov    0x8(%ebp),%eax
 804b65e:	89 04 24             	mov    %eax,(%esp)
 804b661:	e8 ee fe ff ff       	call   804b554 <_ZN7Vector2C1Edd>
}
 804b666:	8b 45 08             	mov    0x8(%ebp),%eax
 804b669:	c9                   	leave  
 804b66a:	c2 04 00             	ret    $0x4
 804b66d:	90                   	nop

0804b66e <_ZNK7Vector214leftHandNormalEv>:

Vector2 Vector2::leftHandNormal() const
{
 804b66e:	55                   	push   %ebp
 804b66f:	89 e5                	mov    %esp,%ebp
 804b671:	83 ec 28             	sub    $0x28,%esp
	return Vector2(this->y_, -1 * this->x_);
 804b674:	8b 45 0c             	mov    0xc(%ebp),%eax
 804b677:	dd 00                	fldl   (%eax)
 804b679:	d9 e0                	fchs   
 804b67b:	8b 45 0c             	mov    0xc(%ebp),%eax
 804b67e:	dd 40 08             	fldl   0x8(%eax)
 804b681:	d9 c9                	fxch   %st(1)
 804b683:	dd 5c 24 0c          	fstpl  0xc(%esp)
 804b687:	dd 5c 24 04          	fstpl  0x4(%esp)
 804b68b:	8b 45 08             	mov    0x8(%ebp),%eax
 804b68e:	89 04 24             	mov    %eax,(%esp)
 804b691:	e8 be fe ff ff       	call   804b554 <_ZN7Vector2C1Edd>
}
 804b696:	8b 45 08             	mov    0x8(%ebp),%eax
 804b699:	c9                   	leave  
 804b69a:	c2 04 00             	ret    $0x4
 804b69d:	90                   	nop

0804b69e <_ZNK7Vector215rightHandNormalEv>:

Vector2 Vector2::rightHandNormal() const
{
 804b69e:	55                   	push   %ebp
 804b69f:	89 e5                	mov    %esp,%ebp
 804b6a1:	83 ec 28             	sub    $0x28,%esp
	return Vector2(-1 * this->y_, this->x_);
 804b6a4:	8b 45 0c             	mov    0xc(%ebp),%eax
 804b6a7:	dd 00                	fldl   (%eax)
 804b6a9:	8b 45 0c             	mov    0xc(%ebp),%eax
 804b6ac:	dd 40 08             	fldl   0x8(%eax)
 804b6af:	d9 e0                	fchs   
 804b6b1:	d9 c9                	fxch   %st(1)
 804b6b3:	dd 5c 24 0c          	fstpl  0xc(%esp)
 804b6b7:	dd 5c 24 04          	fstpl  0x4(%esp)
 804b6bb:	8b 45 08             	mov    0x8(%ebp),%eax
 804b6be:	89 04 24             	mov    %eax,(%esp)
 804b6c1:	e8 8e fe ff ff       	call   804b554 <_ZN7Vector2C1Edd>
}
 804b6c6:	8b 45 08             	mov    0x8(%ebp),%eax
 804b6c9:	c9                   	leave  
 804b6ca:	c2 04 00             	ret    $0x4
 804b6cd:	90                   	nop

0804b6ce <_ZNK7Vector210distanceToERKS_>:

double Vector2::distanceTo(const Vector2& other) const
{
 804b6ce:	55                   	push   %ebp
 804b6cf:	89 e5                	mov    %esp,%ebp
 804b6d1:	83 ec 38             	sub    $0x38,%esp
	const double delta_x = this->x() - other.x();
 804b6d4:	8b 45 08             	mov    0x8(%ebp),%eax
 804b6d7:	89 04 24             	mov    %eax,(%esp)
 804b6da:	e8 5f 02 00 00       	call   804b93e <_ZNK7Vector21xEv>
 804b6df:	dd 5d d0             	fstpl  -0x30(%ebp)
 804b6e2:	8b 45 0c             	mov    0xc(%ebp),%eax
 804b6e5:	89 04 24             	mov    %eax,(%esp)
 804b6e8:	e8 51 02 00 00       	call   804b93e <_ZNK7Vector21xEv>
 804b6ed:	dc 6d d0             	fsubrl -0x30(%ebp)
 804b6f0:	dd 5d d8             	fstpl  -0x28(%ebp)
	const double delta_y = this->y() - other.y();
 804b6f3:	8b 45 08             	mov    0x8(%ebp),%eax
 804b6f6:	89 04 24             	mov    %eax,(%esp)
 804b6f9:	e8 66 02 00 00       	call   804b964 <_ZNK7Vector21yEv>
 804b6fe:	dd 5d d0             	fstpl  -0x30(%ebp)
 804b701:	8b 45 0c             	mov    0xc(%ebp),%eax
 804b704:	89 04 24             	mov    %eax,(%esp)
 804b707:	e8 58 02 00 00       	call   804b964 <_ZNK7Vector21yEv>
 804b70c:	dc 6d d0             	fsubrl -0x30(%ebp)
 804b70f:	dd 5d e0             	fstpl  -0x20(%ebp)
	const double distanceSquared = (delta_x * delta_x) + (delta_y * delta_y);
 804b712:	dd 45 d8             	fldl   -0x28(%ebp)
 804b715:	dc 4d d8             	fmull  -0x28(%ebp)
 804b718:	dd 45 e0             	fldl   -0x20(%ebp)
 804b71b:	dc 4d e0             	fmull  -0x20(%ebp)
 804b71e:	de c1                	faddp  %st,%st(1)
 804b720:	dd 5d e8             	fstpl  -0x18(%ebp)
	const double distance = sqrt(distanceSquared);
 804b723:	dd 45 e8             	fldl   -0x18(%ebp)
 804b726:	dd 1c 24             	fstpl  (%esp)
 804b729:	e8 32 dd ff ff       	call   8049460 <sqrt@plt>
 804b72e:	dd 5d f0             	fstpl  -0x10(%ebp)
	return distance;
 804b731:	dd 45 f0             	fldl   -0x10(%ebp)
}
 804b734:	c9                   	leave  
 804b735:	c3                   	ret    

0804b736 <_ZNK7Vector210dotProductERKS_>:

double Vector2::dotProduct(const Vector2& other) const
{
 804b736:	55                   	push   %ebp
 804b737:	89 e5                	mov    %esp,%ebp
 804b739:	83 ec 38             	sub    $0x38,%esp
	const double dot_product = ((this->x() * other.x()) +
 804b73c:	8b 45 08             	mov    0x8(%ebp),%eax
 804b73f:	89 04 24             	mov    %eax,(%esp)
 804b742:	e8 f7 01 00 00       	call   804b93e <_ZNK7Vector21xEv>
 804b747:	dd 5d e0             	fstpl  -0x20(%ebp)
 804b74a:	8b 45 0c             	mov    0xc(%ebp),%eax
 804b74d:	89 04 24             	mov    %eax,(%esp)
 804b750:	e8 e9 01 00 00       	call   804b93e <_ZNK7Vector21xEv>
 804b755:	dc 4d e0             	fmull  -0x20(%ebp)
 804b758:	dd 5d e0             	fstpl  -0x20(%ebp)
			(this->y() * other.y()));
 804b75b:	8b 45 08             	mov    0x8(%ebp),%eax
 804b75e:	89 04 24             	mov    %eax,(%esp)
 804b761:	e8 fe 01 00 00       	call   804b964 <_ZNK7Vector21yEv>
 804b766:	dd 5d d8             	fstpl  -0x28(%ebp)
 804b769:	8b 45 0c             	mov    0xc(%ebp),%eax
 804b76c:	89 04 24             	mov    %eax,(%esp)
 804b76f:	e8 f0 01 00 00       	call   804b964 <_ZNK7Vector21yEv>
 804b774:	dc 4d d8             	fmull  -0x28(%ebp)
 804b777:	dc 45 e0             	faddl  -0x20(%ebp)
 804b77a:	dd 5d f0             	fstpl  -0x10(%ebp)
	return dot_product;
 804b77d:	dd 45 f0             	fldl   -0x10(%ebp)
}
 804b780:	c9                   	leave  
 804b781:	c3                   	ret    

0804b782 <_ZNK7Vector212crossProductERKS_>:

double Vector2::crossProduct(const Vector2& other) const
{
 804b782:	55                   	push   %ebp
 804b783:	89 e5                	mov    %esp,%ebp
 804b785:	83 ec 28             	sub    $0x28,%esp
	return (this->x() * other.y()) - (this->y() * other.x());
 804b788:	8b 45 08             	mov    0x8(%ebp),%eax
 804b78b:	89 04 24             	mov    %eax,(%esp)
 804b78e:	e8 ab 01 00 00       	call   804b93e <_ZNK7Vector21xEv>
 804b793:	dd 5d f0             	fstpl  -0x10(%ebp)
 804b796:	8b 45 0c             	mov    0xc(%ebp),%eax
 804b799:	89 04 24             	mov    %eax,(%esp)
 804b79c:	e8 c3 01 00 00       	call   804b964 <_ZNK7Vector21yEv>
 804b7a1:	dc 4d f0             	fmull  -0x10(%ebp)
 804b7a4:	dd 5d f0             	fstpl  -0x10(%ebp)
 804b7a7:	8b 45 08             	mov    0x8(%ebp),%eax
 804b7aa:	89 04 24             	mov    %eax,(%esp)
 804b7ad:	e8 b2 01 00 00       	call   804b964 <_ZNK7Vector21yEv>
 804b7b2:	dd 5d e8             	fstpl  -0x18(%ebp)
 804b7b5:	8b 45 0c             	mov    0xc(%ebp),%eax
 804b7b8:	89 04 24             	mov    %eax,(%esp)
 804b7bb:	e8 7e 01 00 00       	call   804b93e <_ZNK7Vector21xEv>
 804b7c0:	dc 4d e8             	fmull  -0x18(%ebp)
 804b7c3:	dc 6d f0             	fsubrl -0x10(%ebp)
}
 804b7c6:	c9                   	leave  
 804b7c7:	c3                   	ret    

0804b7c8 <_ZNK7Vector212projectionOnERKS_>:

Vector2 Vector2::projectionOn(const Vector2& b) const
{
 804b7c8:	55                   	push   %ebp
 804b7c9:	89 e5                	mov    %esp,%ebp
 804b7cb:	83 ec 48             	sub    $0x48,%esp
	const double dot_product = this->dotProduct(b);
 804b7ce:	8b 45 10             	mov    0x10(%ebp),%eax
 804b7d1:	89 44 24 04          	mov    %eax,0x4(%esp)
 804b7d5:	8b 45 0c             	mov    0xc(%ebp),%eax
 804b7d8:	89 04 24             	mov    %eax,(%esp)
 804b7db:	e8 56 ff ff ff       	call   804b736 <_ZNK7Vector210dotProductERKS_>
 804b7e0:	dd 5d e0             	fstpl  -0x20(%ebp)
	const double tlength2 = b.length2();
 804b7e3:	8b 45 10             	mov    0x10(%ebp),%eax
 804b7e6:	89 04 24             	mov    %eax,(%esp)
 804b7e9:	e8 48 00 00 00       	call   804b836 <_ZNK7Vector27length2Ev>
 804b7ee:	dd 5d e8             	fstpl  -0x18(%ebp)
	const double temp = dot_product / tlength2;
 804b7f1:	dd 45 e0             	fldl   -0x20(%ebp)
 804b7f4:	dc 75 e8             	fdivl  -0x18(%ebp)
 804b7f7:	dd 5d f0             	fstpl  -0x10(%ebp)
	return Vector2(temp * b.x(), temp * b.y());
 804b7fa:	8b 45 10             	mov    0x10(%ebp),%eax
 804b7fd:	89 04 24             	mov    %eax,(%esp)
 804b800:	e8 5f 01 00 00       	call   804b964 <_ZNK7Vector21yEv>
 804b805:	dc 4d f0             	fmull  -0x10(%ebp)
 804b808:	dd 5d d0             	fstpl  -0x30(%ebp)
 804b80b:	8b 45 10             	mov    0x10(%ebp),%eax
 804b80e:	89 04 24             	mov    %eax,(%esp)
 804b811:	e8 28 01 00 00       	call   804b93e <_ZNK7Vector21xEv>
 804b816:	dc 4d f0             	fmull  -0x10(%ebp)
 804b819:	dd 45 d0             	fldl   -0x30(%ebp)
 804b81c:	dd 5c 24 0c          	fstpl  0xc(%esp)
 804b820:	dd 5c 24 04          	fstpl  0x4(%esp)
 804b824:	8b 45 08             	mov    0x8(%ebp),%eax
 804b827:	89 04 24             	mov    %eax,(%esp)
 804b82a:	e8 25 fd ff ff       	call   804b554 <_ZN7Vector2C1Edd>
}
 804b82f:	8b 45 08             	mov    0x8(%ebp),%eax
 804b832:	c9                   	leave  
 804b833:	c2 04 00             	ret    $0x4

0804b836 <_ZNK7Vector27length2Ev>:

double Vector2::length2() const
{
 804b836:	55                   	push   %ebp
 804b837:	89 e5                	mov    %esp,%ebp
	return (this->x_ * this->x_) + (this->y_ * this->y_);
 804b839:	8b 45 08             	mov    0x8(%ebp),%eax
 804b83c:	dd 00                	fldl   (%eax)
 804b83e:	8b 45 08             	mov    0x8(%ebp),%eax
 804b841:	dd 00                	fldl   (%eax)
 804b843:	de c9                	fmulp  %st,%st(1)
 804b845:	8b 45 08             	mov    0x8(%ebp),%eax
 804b848:	dd 40 08             	fldl   0x8(%eax)
 804b84b:	8b 45 08             	mov    0x8(%ebp),%eax
 804b84e:	dd 40 08             	fldl   0x8(%eax)
 804b851:	de c9                	fmulp  %st,%st(1)
 804b853:	de c1                	faddp  %st,%st(1)
}
 804b855:	5d                   	pop    %ebp
 804b856:	c3                   	ret    
 804b857:	90                   	nop

0804b858 <_ZNK7Vector26lengthEv>:

double Vector2::length() const
{
 804b858:	55                   	push   %ebp
 804b859:	89 e5                	mov    %esp,%ebp
 804b85b:	83 ec 18             	sub    $0x18,%esp
	return sqrt(this->length2());
 804b85e:	8b 45 08             	mov    0x8(%ebp),%eax
 804b861:	89 04 24             	mov    %eax,(%esp)
 804b864:	e8 cd ff ff ff       	call   804b836 <_ZNK7Vector27length2Ev>
 804b869:	dd 1c 24             	fstpl  (%esp)
 804b86c:	e8 ef db ff ff       	call   8049460 <sqrt@plt>
}
 804b871:	c9                   	leave  
 804b872:	c3                   	ret    
 804b873:	90                   	nop

0804b874 <_ZNK7Vector29magnitudeEv>:

double Vector2::magnitude() const
{
 804b874:	55                   	push   %ebp
 804b875:	89 e5                	mov    %esp,%ebp
 804b877:	83 ec 18             	sub    $0x18,%esp
	return this->length();
 804b87a:	8b 45 08             	mov    0x8(%ebp),%eax
 804b87d:	89 04 24             	mov    %eax,(%esp)
 804b880:	e8 d3 ff ff ff       	call   804b858 <_ZNK7Vector26lengthEv>
}
 804b885:	c9                   	leave  
 804b886:	c3                   	ret    
 804b887:	90                   	nop

0804b888 <_ZNK7Vector29normalizeEv>:

Vector2 Vector2::normalize() const
{
 804b888:	55                   	push   %ebp
 804b889:	89 e5                	mov    %esp,%ebp
 804b88b:	83 ec 28             	sub    $0x28,%esp
	const double tlength = this->length();
 804b88e:	8b 45 0c             	mov    0xc(%ebp),%eax
 804b891:	89 04 24             	mov    %eax,(%esp)
 804b894:	e8 bf ff ff ff       	call   804b858 <_ZNK7Vector26lengthEv>
 804b899:	dd 5d f0             	fstpl  -0x10(%ebp)
	Vector2 tnormalize;
 804b89c:	8b 45 08             	mov    0x8(%ebp),%eax
 804b89f:	89 04 24             	mov    %eax,(%esp)
 804b8a2:	e8 99 fc ff ff       	call   804b540 <_ZN7Vector2C1Ev>
	if (tlength > 0)
 804b8a7:	dd 45 f0             	fldl   -0x10(%ebp)
 804b8aa:	d9 ee                	fldz   
 804b8ac:	d9 c9                	fxch   %st(1)
 804b8ae:	df e9                	fucomip %st(1),%st
 804b8b0:	dd d8                	fstp   %st(0)
 804b8b2:	77 02                	ja     804b8b6 <_ZNK7Vector29normalizeEv+0x2e>
	{
		tnormalize.set_x(this->x() / tlength);
		tnormalize.set_y(this->y() / tlength);
	}
	return tnormalize;
 804b8b4:	eb 3b                	jmp    804b8f1 <_ZNK7Vector29normalizeEv+0x69>
{
	const double tlength = this->length();
	Vector2 tnormalize;
	if (tlength > 0)
	{
		tnormalize.set_x(this->x() / tlength);
 804b8b6:	8b 45 0c             	mov    0xc(%ebp),%eax
 804b8b9:	89 04 24             	mov    %eax,(%esp)
 804b8bc:	e8 7d 00 00 00       	call   804b93e <_ZNK7Vector21xEv>
 804b8c1:	dc 75 f0             	fdivl  -0x10(%ebp)
 804b8c4:	dd 5c 24 04          	fstpl  0x4(%esp)
 804b8c8:	8b 45 08             	mov    0x8(%ebp),%eax
 804b8cb:	89 04 24             	mov    %eax,(%esp)
 804b8ce:	e8 75 00 00 00       	call   804b948 <_ZN7Vector25set_xEd>
		tnormalize.set_y(this->y() / tlength);
 804b8d3:	8b 45 0c             	mov    0xc(%ebp),%eax
 804b8d6:	89 04 24             	mov    %eax,(%esp)
 804b8d9:	e8 86 00 00 00       	call   804b964 <_ZNK7Vector21yEv>
 804b8de:	dc 75 f0             	fdivl  -0x10(%ebp)
 804b8e1:	dd 5c 24 04          	fstpl  0x4(%esp)
 804b8e5:	8b 45 08             	mov    0x8(%ebp),%eax
 804b8e8:	89 04 24             	mov    %eax,(%esp)
 804b8eb:	e8 80 00 00 00       	call   804b970 <_ZN7Vector25set_yEd>
	}
	return tnormalize;
 804b8f0:	90                   	nop
}
 804b8f1:	8b 45 08             	mov    0x8(%ebp),%eax
 804b8f4:	c9                   	leave  
 804b8f5:	c2 04 00             	ret    $0x4

0804b8f8 <_ZNK7Vector2eqERKS_>:

bool Vector2::operator==(const Vector2& other) const
{
 804b8f8:	55                   	push   %ebp
 804b8f9:	89 e5                	mov    %esp,%ebp
	return (this->x_ == other.x_) && (this->y_ == other.y_);
 804b8fb:	8b 45 08             	mov    0x8(%ebp),%eax
 804b8fe:	dd 00                	fldl   (%eax)
 804b900:	8b 45 0c             	mov    0xc(%ebp),%eax
 804b903:	dd 00                	fldl   (%eax)
 804b905:	db e9                	fucomi %st(1),%st
 804b907:	7a 23                	jp     804b92c <_ZNK7Vector2eqERKS_+0x34>
 804b909:	df e9                	fucomip %st(1),%st
 804b90b:	dd d8                	fstp   %st(0)
 804b90d:	75 27                	jne    804b936 <_ZNK7Vector2eqERKS_+0x3e>
 804b90f:	8b 45 08             	mov    0x8(%ebp),%eax
 804b912:	dd 40 08             	fldl   0x8(%eax)
 804b915:	8b 45 0c             	mov    0xc(%ebp),%eax
 804b918:	dd 40 08             	fldl   0x8(%eax)
 804b91b:	db e9                	fucomi %st(1),%st
 804b91d:	7a 13                	jp     804b932 <_ZNK7Vector2eqERKS_+0x3a>
 804b91f:	df e9                	fucomip %st(1),%st
 804b921:	dd d8                	fstp   %st(0)
 804b923:	75 11                	jne    804b936 <_ZNK7Vector2eqERKS_+0x3e>
 804b925:	b8 01 00 00 00       	mov    $0x1,%eax
 804b92a:	eb 0f                	jmp    804b93b <_ZNK7Vector2eqERKS_+0x43>
 804b92c:	dd d8                	fstp   %st(0)
 804b92e:	dd d8                	fstp   %st(0)
 804b930:	eb 04                	jmp    804b936 <_ZNK7Vector2eqERKS_+0x3e>
 804b932:	dd d8                	fstp   %st(0)
 804b934:	dd d8                	fstp   %st(0)
 804b936:	b8 00 00 00 00       	mov    $0x0,%eax
}
 804b93b:	5d                   	pop    %ebp
 804b93c:	c3                   	ret    
 804b93d:	90                   	nop

0804b93e <_ZNK7Vector21xEv>:

double Vector2::x() const
{
 804b93e:	55                   	push   %ebp
 804b93f:	89 e5                	mov    %esp,%ebp
	return this->x_;
 804b941:	8b 45 08             	mov    0x8(%ebp),%eax
 804b944:	dd 00                	fldl   (%eax)
}
 804b946:	5d                   	pop    %ebp
 804b947:	c3                   	ret    

0804b948 <_ZN7Vector25set_xEd>:

void Vector2::set_x(double px)
{
 804b948:	55                   	push   %ebp
 804b949:	89 e5                	mov    %esp,%ebp
 804b94b:	83 ec 08             	sub    $0x8,%esp
 804b94e:	8b 45 0c             	mov    0xc(%ebp),%eax
 804b951:	89 45 f8             	mov    %eax,-0x8(%ebp)
 804b954:	8b 45 10             	mov    0x10(%ebp),%eax
 804b957:	89 45 fc             	mov    %eax,-0x4(%ebp)
	this->x_ = px;
 804b95a:	8b 45 08             	mov    0x8(%ebp),%eax
 804b95d:	dd 45 f8             	fldl   -0x8(%ebp)
 804b960:	dd 18                	fstpl  (%eax)
}
 804b962:	c9                   	leave  
 804b963:	c3                   	ret    

0804b964 <_ZNK7Vector21yEv>:

double Vector2::y() const
{
 804b964:	55                   	push   %ebp
 804b965:	89 e5                	mov    %esp,%ebp
	return this->y_; 
 804b967:	8b 45 08             	mov    0x8(%ebp),%eax
 804b96a:	dd 40 08             	fldl   0x8(%eax)
}
 804b96d:	5d                   	pop    %ebp
 804b96e:	c3                   	ret    
 804b96f:	90                   	nop

0804b970 <_ZN7Vector25set_yEd>:

void Vector2::set_y(double py)
{
 804b970:	55                   	push   %ebp
 804b971:	89 e5                	mov    %esp,%ebp
 804b973:	83 ec 08             	sub    $0x8,%esp
 804b976:	8b 45 0c             	mov    0xc(%ebp),%eax
 804b979:	89 45 f8             	mov    %eax,-0x8(%ebp)
 804b97c:	8b 45 10             	mov    0x10(%ebp),%eax
 804b97f:	89 45 fc             	mov    %eax,-0x4(%ebp)
	this->y_ = py;
 804b982:	8b 45 08             	mov    0x8(%ebp),%eax
 804b985:	dd 45 f8             	fldl   -0x8(%ebp)
 804b988:	dd 58 08             	fstpl  0x8(%eax)
}
 804b98b:	c9                   	leave  
 804b98c:	c3                   	ret    
 804b98d:	90                   	nop

0804b98e <_ZNK7Vector29isNorthOfERKS_>:

bool Vector2::isNorthOf(const Vector2& other) const
{
 804b98e:	55                   	push   %ebp
 804b98f:	89 e5                	mov    %esp,%ebp
 804b991:	83 ec 10             	sub    $0x10,%esp
	return this->y() < other.y();
 804b994:	8b 45 08             	mov    0x8(%ebp),%eax
 804b997:	89 04 24             	mov    %eax,(%esp)
 804b99a:	e8 c5 ff ff ff       	call   804b964 <_ZNK7Vector21yEv>
 804b99f:	dd 5d f8             	fstpl  -0x8(%ebp)
 804b9a2:	8b 45 0c             	mov    0xc(%ebp),%eax
 804b9a5:	89 04 24             	mov    %eax,(%esp)
 804b9a8:	e8 b7 ff ff ff       	call   804b964 <_ZNK7Vector21yEv>
 804b9ad:	dd 45 f8             	fldl   -0x8(%ebp)
 804b9b0:	d9 c9                	fxch   %st(1)
 804b9b2:	df e9                	fucomip %st(1),%st
 804b9b4:	dd d8                	fstp   %st(0)
 804b9b6:	0f 97 c0             	seta   %al
}
 804b9b9:	c9                   	leave  
 804b9ba:	c3                   	ret    
 804b9bb:	90                   	nop

0804b9bc <_ZNK7Vector213isNorthWestOfERKS_>:

bool Vector2::isNorthWestOf(const Vector2& other) const
{
 804b9bc:	55                   	push   %ebp
 804b9bd:	89 e5                	mov    %esp,%ebp
 804b9bf:	83 ec 18             	sub    $0x18,%esp
	return this->isNorthOf(other) && this->isWestOf(other);
 804b9c2:	8b 45 0c             	mov    0xc(%ebp),%eax
 804b9c5:	89 44 24 04          	mov    %eax,0x4(%esp)
 804b9c9:	8b 45 08             	mov    0x8(%ebp),%eax
 804b9cc:	89 04 24             	mov    %eax,(%esp)
 804b9cf:	e8 ba ff ff ff       	call   804b98e <_ZNK7Vector29isNorthOfERKS_>
 804b9d4:	84 c0                	test   %al,%al
 804b9d6:	74 1d                	je     804b9f5 <_ZNK7Vector213isNorthWestOfERKS_+0x39>
 804b9d8:	8b 45 0c             	mov    0xc(%ebp),%eax
 804b9db:	89 44 24 04          	mov    %eax,0x4(%esp)
 804b9df:	8b 45 08             	mov    0x8(%ebp),%eax
 804b9e2:	89 04 24             	mov    %eax,(%esp)
 804b9e5:	e8 fe 00 00 00       	call   804bae8 <_ZNK7Vector28isWestOfERKS_>
 804b9ea:	84 c0                	test   %al,%al
 804b9ec:	74 07                	je     804b9f5 <_ZNK7Vector213isNorthWestOfERKS_+0x39>
 804b9ee:	b8 01 00 00 00       	mov    $0x1,%eax
 804b9f3:	eb 05                	jmp    804b9fa <_ZNK7Vector213isNorthWestOfERKS_+0x3e>
 804b9f5:	b8 00 00 00 00       	mov    $0x0,%eax
}
 804b9fa:	c9                   	leave  
 804b9fb:	c3                   	ret    

0804b9fc <_ZNK7Vector213isNorthEastOfERKS_>:

bool Vector2::isNorthEastOf(const Vector2& other) const
{
 804b9fc:	55                   	push   %ebp
 804b9fd:	89 e5                	mov    %esp,%ebp
 804b9ff:	83 ec 18             	sub    $0x18,%esp
	return this->isNorthOf(other) && this->isEastOf(other);
 804ba02:	8b 45 0c             	mov    0xc(%ebp),%eax
 804ba05:	89 44 24 04          	mov    %eax,0x4(%esp)
 804ba09:	8b 45 08             	mov    0x8(%ebp),%eax
 804ba0c:	89 04 24             	mov    %eax,(%esp)
 804ba0f:	e8 7a ff ff ff       	call   804b98e <_ZNK7Vector29isNorthOfERKS_>
 804ba14:	84 c0                	test   %al,%al
 804ba16:	74 1d                	je     804ba35 <_ZNK7Vector213isNorthEastOfERKS_+0x39>
 804ba18:	8b 45 0c             	mov    0xc(%ebp),%eax
 804ba1b:	89 44 24 04          	mov    %eax,0x4(%esp)
 804ba1f:	8b 45 08             	mov    0x8(%ebp),%eax
 804ba22:	89 04 24             	mov    %eax,(%esp)
 804ba25:	e8 ec 00 00 00       	call   804bb16 <_ZNK7Vector28isEastOfERKS_>
 804ba2a:	84 c0                	test   %al,%al
 804ba2c:	74 07                	je     804ba35 <_ZNK7Vector213isNorthEastOfERKS_+0x39>
 804ba2e:	b8 01 00 00 00       	mov    $0x1,%eax
 804ba33:	eb 05                	jmp    804ba3a <_ZNK7Vector213isNorthEastOfERKS_+0x3e>
 804ba35:	b8 00 00 00 00       	mov    $0x0,%eax
}
 804ba3a:	c9                   	leave  
 804ba3b:	c3                   	ret    

0804ba3c <_ZNK7Vector29isSouthOfERKS_>:

bool Vector2::isSouthOf(const Vector2& other) const
{
 804ba3c:	55                   	push   %ebp
 804ba3d:	89 e5                	mov    %esp,%ebp
 804ba3f:	83 ec 10             	sub    $0x10,%esp
	return this->y() > other.y();
 804ba42:	8b 45 08             	mov    0x8(%ebp),%eax
 804ba45:	89 04 24             	mov    %eax,(%esp)
 804ba48:	e8 17 ff ff ff       	call   804b964 <_ZNK7Vector21yEv>
 804ba4d:	dd 5d f8             	fstpl  -0x8(%ebp)
 804ba50:	8b 45 0c             	mov    0xc(%ebp),%eax
 804ba53:	89 04 24             	mov    %eax,(%esp)
 804ba56:	e8 09 ff ff ff       	call   804b964 <_ZNK7Vector21yEv>
 804ba5b:	dd 45 f8             	fldl   -0x8(%ebp)
 804ba5e:	df e9                	fucomip %st(1),%st
 804ba60:	dd d8                	fstp   %st(0)
 804ba62:	0f 97 c0             	seta   %al
}
 804ba65:	c9                   	leave  
 804ba66:	c3                   	ret    
 804ba67:	90                   	nop

0804ba68 <_ZNK7Vector213isSouthWestOfERKS_>:

bool Vector2::isSouthWestOf(const Vector2& other) const
{
 804ba68:	55                   	push   %ebp
 804ba69:	89 e5                	mov    %esp,%ebp
 804ba6b:	83 ec 18             	sub    $0x18,%esp
	return this->isSouthOf(other) && this->isWestOf(other);
 804ba6e:	8b 45 0c             	mov    0xc(%ebp),%eax
 804ba71:	89 44 24 04          	mov    %eax,0x4(%esp)
 804ba75:	8b 45 08             	mov    0x8(%ebp),%eax
 804ba78:	89 04 24             	mov    %eax,(%esp)
 804ba7b:	e8 bc ff ff ff       	call   804ba3c <_ZNK7Vector29isSouthOfERKS_>
 804ba80:	84 c0                	test   %al,%al
 804ba82:	74 1d                	je     804baa1 <_ZNK7Vector213isSouthWestOfERKS_+0x39>
 804ba84:	8b 45 0c             	mov    0xc(%ebp),%eax
 804ba87:	89 44 24 04          	mov    %eax,0x4(%esp)
 804ba8b:	8b 45 08             	mov    0x8(%ebp),%eax
 804ba8e:	89 04 24             	mov    %eax,(%esp)
 804ba91:	e8 52 00 00 00       	call   804bae8 <_ZNK7Vector28isWestOfERKS_>
 804ba96:	84 c0                	test   %al,%al
 804ba98:	74 07                	je     804baa1 <_ZNK7Vector213isSouthWestOfERKS_+0x39>
 804ba9a:	b8 01 00 00 00       	mov    $0x1,%eax
 804ba9f:	eb 05                	jmp    804baa6 <_ZNK7Vector213isSouthWestOfERKS_+0x3e>
 804baa1:	b8 00 00 00 00       	mov    $0x0,%eax
}
 804baa6:	c9                   	leave  
 804baa7:	c3                   	ret    

0804baa8 <_ZNK7Vector213isSouthEastOfERKS_>:

bool Vector2::isSouthEastOf(const Vector2& other) const
{
 804baa8:	55                   	push   %ebp
 804baa9:	89 e5                	mov    %esp,%ebp
 804baab:	83 ec 18             	sub    $0x18,%esp
	return this->isSouthOf(other) && this->isEastOf(other);
 804baae:	8b 45 0c             	mov    0xc(%ebp),%eax
 804bab1:	89 44 24 04          	mov    %eax,0x4(%esp)
 804bab5:	8b 45 08             	mov    0x8(%ebp),%eax
 804bab8:	89 04 24             	mov    %eax,(%esp)
 804babb:	e8 7c ff ff ff       	call   804ba3c <_ZNK7Vector29isSouthOfERKS_>
 804bac0:	84 c0                	test   %al,%al
 804bac2:	74 1d                	je     804bae1 <_ZNK7Vector213isSouthEastOfERKS_+0x39>
 804bac4:	8b 45 0c             	mov    0xc(%ebp),%eax
 804bac7:	89 44 24 04          	mov    %eax,0x4(%esp)
 804bacb:	8b 45 08             	mov    0x8(%ebp),%eax
 804bace:	89 04 24             	mov    %eax,(%esp)
 804bad1:	e8 40 00 00 00       	call   804bb16 <_ZNK7Vector28isEastOfERKS_>
 804bad6:	84 c0                	test   %al,%al
 804bad8:	74 07                	je     804bae1 <_ZNK7Vector213isSouthEastOfERKS_+0x39>
 804bada:	b8 01 00 00 00       	mov    $0x1,%eax
 804badf:	eb 05                	jmp    804bae6 <_ZNK7Vector213isSouthEastOfERKS_+0x3e>
 804bae1:	b8 00 00 00 00       	mov    $0x0,%eax
}
 804bae6:	c9                   	leave  
 804bae7:	c3                   	ret    

0804bae8 <_ZNK7Vector28isWestOfERKS_>:

bool Vector2::isWestOf(const Vector2& other) const
{
 804bae8:	55                   	push   %ebp
 804bae9:	89 e5                	mov    %esp,%ebp
 804baeb:	83 ec 10             	sub    $0x10,%esp
	return this->x() < other.x();
 804baee:	8b 45 08             	mov    0x8(%ebp),%eax
 804baf1:	89 04 24             	mov    %eax,(%esp)
 804baf4:	e8 45 fe ff ff       	call   804b93e <_ZNK7Vector21xEv>
 804baf9:	dd 5d f8             	fstpl  -0x8(%ebp)
 804bafc:	8b 45 0c             	mov    0xc(%ebp),%eax
 804baff:	89 04 24             	mov    %eax,(%esp)
 804bb02:	e8 37 fe ff ff       	call   804b93e <_ZNK7Vector21xEv>
 804bb07:	dd 45 f8             	fldl   -0x8(%ebp)
 804bb0a:	d9 c9                	fxch   %st(1)
 804bb0c:	df e9                	fucomip %st(1),%st
 804bb0e:	dd d8                	fstp   %st(0)
 804bb10:	0f 97 c0             	seta   %al
}
 804bb13:	c9                   	leave  
 804bb14:	c3                   	ret    
 804bb15:	90                   	nop

0804bb16 <_ZNK7Vector28isEastOfERKS_>:

bool Vector2::isEastOf(const Vector2& other) const
{
 804bb16:	55                   	push   %ebp
 804bb17:	89 e5                	mov    %esp,%ebp
 804bb19:	83 ec 10             	sub    $0x10,%esp
	return this->x() > other.x();
 804bb1c:	8b 45 08             	mov    0x8(%ebp),%eax
 804bb1f:	89 04 24             	mov    %eax,(%esp)
 804bb22:	e8 17 fe ff ff       	call   804b93e <_ZNK7Vector21xEv>
 804bb27:	dd 5d f8             	fstpl  -0x8(%ebp)
 804bb2a:	8b 45 0c             	mov    0xc(%ebp),%eax
 804bb2d:	89 04 24             	mov    %eax,(%esp)
 804bb30:	e8 09 fe ff ff       	call   804b93e <_ZNK7Vector21xEv>
 804bb35:	dd 45 f8             	fldl   -0x8(%ebp)
 804bb38:	df e9                	fucomip %st(1),%st
 804bb3a:	dd d8                	fstp   %st(0)
 804bb3c:	0f 97 c0             	seta   %al
}
 804bb3f:	c9                   	leave  
 804bb40:	c3                   	ret    
 804bb41:	90                   	nop

0804bb42 <_ZN6FlowerC1ERK7Vector2>:

const int PEDAL_RADIUS = 2;
const RGBAPixel PEDAL_COLOR = color::RED;


Flower::Flower(const Vector2& center)
 804bb42:	55                   	push   %ebp
 804bb43:	89 e5                	mov    %esp,%ebp
 804bb45:	57                   	push   %edi
 804bb46:	56                   	push   %esi
 804bb47:	53                   	push   %ebx
 804bb48:	81 ec 8c 00 00 00    	sub    $0x8c,%esp
 804bb4e:	8b 45 08             	mov    0x8(%ebp),%eax
 804bb51:	89 04 24             	mov    %eax,(%esp)
 804bb54:	e8 1b 0a 00 00       	call   804c574 <_ZN8DrawableC1Ev>
 804bb59:	8b 45 08             	mov    0x8(%ebp),%eax
 804bb5c:	c7 00 a0 fe 04 08    	movl   $0x804fea0,(%eax)
{
	const Vector2 stem_center(center.x(), center.y()+STEM_HEIGHT/2);
 804bb62:	8b 45 0c             	mov    0xc(%ebp),%eax
 804bb65:	89 04 24             	mov    %eax,(%esp)
 804bb68:	e8 f7 fd ff ff       	call   804b964 <_ZNK7Vector21yEv>
 804bb6d:	dd 05 08 ff 04 08    	fldl   0x804ff08
 804bb73:	de c1                	faddp  %st,%st(1)
 804bb75:	dd 5d 80             	fstpl  -0x80(%ebp)
 804bb78:	8b 45 0c             	mov    0xc(%ebp),%eax
 804bb7b:	89 04 24             	mov    %eax,(%esp)
 804bb7e:	e8 bb fd ff ff       	call   804b93e <_ZNK7Vector21xEv>
 804bb83:	dd 45 80             	fldl   -0x80(%ebp)
 804bb86:	dd 5c 24 0c          	fstpl  0xc(%esp)
 804bb8a:	dd 5c 24 04          	fstpl  0x4(%esp)
 804bb8e:	8d 45 98             	lea    -0x68(%ebp),%eax
 804bb91:	89 04 24             	mov    %eax,(%esp)
 804bb94:	e8 bb f9 ff ff       	call   804b554 <_ZN7Vector2C1Edd>
	stem = new Rectangle (stem_center, STEM_COLOR, STEM_WIDTH, STEM_HEIGHT);
 804bb99:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
 804bba0:	e8 7b d9 ff ff       	call   8049520 <_Znwj@plt>
 804bba5:	89 c3                	mov    %eax,%ebx
 804bba7:	c7 44 24 10 20 00 00 	movl   $0x20,0x10(%esp)
 804bbae:	00 
 804bbaf:	c7 44 24 0c 02 00 00 	movl   $0x2,0xc(%esp)
 804bbb6:	00 
 804bbb7:	c7 44 24 08 7c 42 05 	movl   $0x805427c,0x8(%esp)
 804bbbe:	08 
 804bbbf:	8d 45 98             	lea    -0x68(%ebp),%eax
 804bbc2:	89 44 24 04          	mov    %eax,0x4(%esp)
 804bbc6:	89 1c 24             	mov    %ebx,(%esp)
 804bbc9:	e8 54 23 00 00       	call   804df22 <_ZN9RectangleC1ERK7Vector2RK9RGBAPixelii>
 804bbce:	8b 45 08             	mov    0x8(%ebp),%eax
 804bbd1:	89 58 04             	mov    %ebx,0x4(%eax)

	Circle * my_pistil = new Circle(Vector2(center.x(), center.y() - PISTIL_RADIUS/2), PISTIL_COLOR, PISTIL_RADIUS);
 804bbd4:	8b 45 0c             	mov    0xc(%ebp),%eax
 804bbd7:	89 04 24             	mov    %eax,(%esp)
 804bbda:	e8 85 fd ff ff       	call   804b964 <_ZNK7Vector21yEv>
 804bbdf:	dd 05 10 ff 04 08    	fldl   0x804ff10
 804bbe5:	de e9                	fsubrp %st,%st(1)
 804bbe7:	dd 5d 80             	fstpl  -0x80(%ebp)
 804bbea:	8b 45 0c             	mov    0xc(%ebp),%eax
 804bbed:	89 04 24             	mov    %eax,(%esp)
 804bbf0:	e8 49 fd ff ff       	call   804b93e <_ZNK7Vector21xEv>
 804bbf5:	dd 45 80             	fldl   -0x80(%ebp)
 804bbf8:	dd 5c 24 0c          	fstpl  0xc(%esp)
 804bbfc:	dd 5c 24 04          	fstpl  0x4(%esp)
 804bc00:	8d 45 d8             	lea    -0x28(%ebp),%eax
 804bc03:	89 04 24             	mov    %eax,(%esp)
 804bc06:	e8 49 f9 ff ff       	call   804b554 <_ZN7Vector2C1Edd>
 804bc0b:	8d 75 d8             	lea    -0x28(%ebp),%esi
 804bc0e:	c7 04 24 1c 00 00 00 	movl   $0x1c,(%esp)
 804bc15:	e8 06 d9 ff ff       	call   8049520 <_Znwj@plt>
 804bc1a:	89 c3                	mov    %eax,%ebx
 804bc1c:	c7 44 24 0c 0c 00 00 	movl   $0xc,0xc(%esp)
 804bc23:	00 
 804bc24:	c7 44 24 08 84 42 05 	movl   $0x8054284,0x8(%esp)
 804bc2b:	08 
 804bc2c:	89 74 24 04          	mov    %esi,0x4(%esp)
 804bc30:	89 1c 24             	mov    %ebx,(%esp)
 804bc33:	e8 80 27 00 00       	call   804e3b8 <_ZN6CircleC1ERK7Vector2RK9RGBAPixeli>
 804bc38:	89 5d 90             	mov    %ebx,-0x70(%ebp)
	pistil = my_pistil;
 804bc3b:	8b 45 08             	mov    0x8(%ebp),%eax
 804bc3e:	8b 55 90             	mov    -0x70(%ebp),%edx
 804bc41:	89 50 08             	mov    %edx,0x8(%eax)

	const Vector2 leaf_center(stem_center.x() - STEM_WIDTH/2 + 1,
			stem_center.y() + STEM_HEIGHT/4);
 804bc44:	8d 45 98             	lea    -0x68(%ebp),%eax
 804bc47:	89 04 24             	mov    %eax,(%esp)
 804bc4a:	e8 15 fd ff ff       	call   804b964 <_ZNK7Vector21yEv>
 804bc4f:	dd 05 18 ff 04 08    	fldl   0x804ff18
 804bc55:	de c1                	faddp  %st,%st(1)
 804bc57:	dd 5d 80             	fstpl  -0x80(%ebp)
	stem = new Rectangle (stem_center, STEM_COLOR, STEM_WIDTH, STEM_HEIGHT);

	Circle * my_pistil = new Circle(Vector2(center.x(), center.y() - PISTIL_RADIUS/2), PISTIL_COLOR, PISTIL_RADIUS);
	pistil = my_pistil;

	const Vector2 leaf_center(stem_center.x() - STEM_WIDTH/2 + 1,
 804bc5a:	8d 45 98             	lea    -0x68(%ebp),%eax
 804bc5d:	89 04 24             	mov    %eax,(%esp)
 804bc60:	e8 d9 fc ff ff       	call   804b93e <_ZNK7Vector21xEv>
 804bc65:	d9 e8                	fld1   
 804bc67:	de e9                	fsubrp %st,%st(1)
			stem_center.y() + STEM_HEIGHT/4);
 804bc69:	d9 e8                	fld1   
 804bc6b:	de c1                	faddp  %st,%st(1)
 804bc6d:	dd 45 80             	fldl   -0x80(%ebp)
 804bc70:	dd 5c 24 0c          	fstpl  0xc(%esp)
 804bc74:	dd 5c 24 04          	fstpl  0x4(%esp)
 804bc78:	8d 45 a8             	lea    -0x58(%ebp),%eax
 804bc7b:	89 04 24             	mov    %eax,(%esp)
 804bc7e:	e8 d1 f8 ff ff       	call   804b554 <_ZN7Vector2C1Edd>
	Triangle * my_leaf = new Triangle(LEAF_COLOR,
			Vector2(leaf_center.x(), leaf_center.y() - STEM_HEIGHT/4),
 804bc83:	8d 45 a8             	lea    -0x58(%ebp),%eax
 804bc86:	89 04 24             	mov    %eax,(%esp)
 804bc89:	e8 d6 fc ff ff       	call   804b964 <_ZNK7Vector21yEv>
			Vector2(leaf_center.x() - LEAF_WIDTH, leaf_center.y() - LEAF_HEIGHT),
			Vector2(leaf_center.x() - LEAF_WIDTH/2, leaf_center.y()));
 804bc8e:	dd 05 18 ff 04 08    	fldl   0x804ff18
 804bc94:	de e9                	fsubrp %st,%st(1)
 804bc96:	dd 5d 80             	fstpl  -0x80(%ebp)
 804bc99:	8d 45 a8             	lea    -0x58(%ebp),%eax
 804bc9c:	89 04 24             	mov    %eax,(%esp)
 804bc9f:	e8 9a fc ff ff       	call   804b93e <_ZNK7Vector21xEv>
 804bca4:	dd 45 80             	fldl   -0x80(%ebp)
 804bca7:	dd 5c 24 0c          	fstpl  0xc(%esp)
 804bcab:	dd 5c 24 04          	fstpl  0x4(%esp)
 804bcaf:	8d 45 b8             	lea    -0x48(%ebp),%eax
 804bcb2:	89 04 24             	mov    %eax,(%esp)
 804bcb5:	e8 9a f8 ff ff       	call   804b554 <_ZN7Vector2C1Edd>
 804bcba:	8d 75 b8             	lea    -0x48(%ebp),%esi

	const Vector2 leaf_center(stem_center.x() - STEM_WIDTH/2 + 1,
			stem_center.y() + STEM_HEIGHT/4);
	Triangle * my_leaf = new Triangle(LEAF_COLOR,
			Vector2(leaf_center.x(), leaf_center.y() - STEM_HEIGHT/4),
			Vector2(leaf_center.x() - LEAF_WIDTH, leaf_center.y() - LEAF_HEIGHT),
 804bcbd:	8d 45 a8             	lea    -0x58(%ebp),%eax
 804bcc0:	89 04 24             	mov    %eax,(%esp)
 804bcc3:	e8 9c fc ff ff       	call   804b964 <_ZNK7Vector21yEv>
			Vector2(leaf_center.x() - LEAF_WIDTH/2, leaf_center.y()));
 804bcc8:	dd 05 08 ff 04 08    	fldl   0x804ff08
 804bcce:	de e9                	fsubrp %st,%st(1)
 804bcd0:	dd 5d 80             	fstpl  -0x80(%ebp)

	const Vector2 leaf_center(stem_center.x() - STEM_WIDTH/2 + 1,
			stem_center.y() + STEM_HEIGHT/4);
	Triangle * my_leaf = new Triangle(LEAF_COLOR,
			Vector2(leaf_center.x(), leaf_center.y() - STEM_HEIGHT/4),
			Vector2(leaf_center.x() - LEAF_WIDTH, leaf_center.y() - LEAF_HEIGHT),
 804bcd3:	8d 45 a8             	lea    -0x58(%ebp),%eax
 804bcd6:	89 04 24             	mov    %eax,(%esp)
 804bcd9:	e8 60 fc ff ff       	call   804b93e <_ZNK7Vector21xEv>
			Vector2(leaf_center.x() - LEAF_WIDTH/2, leaf_center.y()));
 804bcde:	dd 05 08 ff 04 08    	fldl   0x804ff08
 804bce4:	de e9                	fsubrp %st,%st(1)
 804bce6:	dd 45 80             	fldl   -0x80(%ebp)
 804bce9:	dd 5c 24 0c          	fstpl  0xc(%esp)
 804bced:	dd 5c 24 04          	fstpl  0x4(%esp)
 804bcf1:	8d 45 c8             	lea    -0x38(%ebp),%eax
 804bcf4:	89 04 24             	mov    %eax,(%esp)
 804bcf7:	e8 58 f8 ff ff       	call   804b554 <_ZN7Vector2C1Edd>
 804bcfc:	8d 7d c8             	lea    -0x38(%ebp),%edi
 804bcff:	8d 45 a8             	lea    -0x58(%ebp),%eax
 804bd02:	89 04 24             	mov    %eax,(%esp)
 804bd05:	e8 5a fc ff ff       	call   804b964 <_ZNK7Vector21yEv>
 804bd0a:	dd 5d 80             	fstpl  -0x80(%ebp)
 804bd0d:	8d 45 a8             	lea    -0x58(%ebp),%eax
 804bd10:	89 04 24             	mov    %eax,(%esp)
 804bd13:	e8 26 fc ff ff       	call   804b93e <_ZNK7Vector21xEv>
 804bd18:	dd 05 18 ff 04 08    	fldl   0x804ff18
 804bd1e:	de e9                	fsubrp %st,%st(1)
 804bd20:	dd 45 80             	fldl   -0x80(%ebp)
 804bd23:	dd 5c 24 0c          	fstpl  0xc(%esp)
 804bd27:	dd 5c 24 04          	fstpl  0x4(%esp)
 804bd2b:	8d 45 d8             	lea    -0x28(%ebp),%eax
 804bd2e:	89 04 24             	mov    %eax,(%esp)
 804bd31:	e8 1e f8 ff ff       	call   804b554 <_ZN7Vector2C1Edd>
 804bd36:	8d 45 d8             	lea    -0x28(%ebp),%eax
 804bd39:	89 45 80             	mov    %eax,-0x80(%ebp)
 804bd3c:	c7 04 24 1c 00 00 00 	movl   $0x1c,(%esp)
 804bd43:	e8 d8 d7 ff ff       	call   8049520 <_Znwj@plt>
 804bd48:	89 c3                	mov    %eax,%ebx
 804bd4a:	8b 45 80             	mov    -0x80(%ebp),%eax
 804bd4d:	89 44 24 10          	mov    %eax,0x10(%esp)
 804bd51:	89 7c 24 0c          	mov    %edi,0xc(%esp)
 804bd55:	89 74 24 08          	mov    %esi,0x8(%esp)
 804bd59:	c7 44 24 04 80 42 05 	movl   $0x8054280,0x4(%esp)
 804bd60:	08 
 804bd61:	89 1c 24             	mov    %ebx,(%esp)
 804bd64:	e8 5b 0e 00 00       	call   804cbc4 <_ZN8TriangleC1ERK9RGBAPixelRK7Vector2S5_S5_>
 804bd69:	89 5d 94             	mov    %ebx,-0x6c(%ebp)
	leaf = my_leaf;
 804bd6c:	8b 45 08             	mov    0x8(%ebp),%eax
 804bd6f:	8b 55 94             	mov    -0x6c(%ebp),%edx
 804bd72:	89 50 0c             	mov    %edx,0xc(%eax)
 804bd75:	eb 41                	jmp    804bdb8 <_ZN6FlowerC1ERK7Vector2+0x276>
 804bd77:	89 c6                	mov    %eax,%esi


Flower::Flower(const Vector2& center)
{
	const Vector2 stem_center(center.x(), center.y()+STEM_HEIGHT/2);
	stem = new Rectangle (stem_center, STEM_COLOR, STEM_WIDTH, STEM_HEIGHT);
 804bd79:	89 1c 24             	mov    %ebx,(%esp)
 804bd7c:	e8 bf d5 ff ff       	call   8049340 <_ZdlPv@plt>
 804bd81:	89 f3                	mov    %esi,%ebx
 804bd83:	eb 1e                	jmp    804bda3 <_ZN6FlowerC1ERK7Vector2+0x261>
 804bd85:	89 c6                	mov    %eax,%esi

	Circle * my_pistil = new Circle(Vector2(center.x(), center.y() - PISTIL_RADIUS/2), PISTIL_COLOR, PISTIL_RADIUS);
 804bd87:	89 1c 24             	mov    %ebx,(%esp)
 804bd8a:	e8 b1 d5 ff ff       	call   8049340 <_ZdlPv@plt>
 804bd8f:	89 f3                	mov    %esi,%ebx
 804bd91:	eb 10                	jmp    804bda3 <_ZN6FlowerC1ERK7Vector2+0x261>
 804bd93:	89 c6                	mov    %eax,%esi
	const Vector2 leaf_center(stem_center.x() - STEM_WIDTH/2 + 1,
			stem_center.y() + STEM_HEIGHT/4);
	Triangle * my_leaf = new Triangle(LEAF_COLOR,
			Vector2(leaf_center.x(), leaf_center.y() - STEM_HEIGHT/4),
			Vector2(leaf_center.x() - LEAF_WIDTH, leaf_center.y() - LEAF_HEIGHT),
			Vector2(leaf_center.x() - LEAF_WIDTH/2, leaf_center.y()));
 804bd95:	89 1c 24             	mov    %ebx,(%esp)
 804bd98:	e8 a3 d5 ff ff       	call   8049340 <_ZdlPv@plt>
 804bd9d:	89 f3                	mov    %esi,%ebx
 804bd9f:	eb 02                	jmp    804bda3 <_ZN6FlowerC1ERK7Vector2+0x261>
 804bda1:	89 c3                	mov    %eax,%ebx

const int PEDAL_RADIUS = 2;
const RGBAPixel PEDAL_COLOR = color::RED;


Flower::Flower(const Vector2& center)
 804bda3:	8b 45 08             	mov    0x8(%ebp),%eax
 804bda6:	89 04 24             	mov    %eax,(%esp)
 804bda9:	e8 34 07 00 00       	call   804c4e2 <_ZN8DrawableD1Ev>
 804bdae:	89 d8                	mov    %ebx,%eax
 804bdb0:	89 04 24             	mov    %eax,(%esp)
 804bdb3:	e8 18 d9 ff ff       	call   80496d0 <_Unwind_Resume@plt>
	Triangle * my_leaf = new Triangle(LEAF_COLOR,
			Vector2(leaf_center.x(), leaf_center.y() - STEM_HEIGHT/4),
			Vector2(leaf_center.x() - LEAF_WIDTH, leaf_center.y() - LEAF_HEIGHT),
			Vector2(leaf_center.x() - LEAF_WIDTH/2, leaf_center.y()));
	leaf = my_leaf;
}
 804bdb8:	81 c4 8c 00 00 00    	add    $0x8c,%esp
 804bdbe:	5b                   	pop    %ebx
 804bdbf:	5e                   	pop    %esi
 804bdc0:	5f                   	pop    %edi
 804bdc1:	5d                   	pop    %ebp
 804bdc2:	c3                   	ret    
 804bdc3:	90                   	nop

0804bdc4 <_ZNK6Flower10drawPedalsEP3PNGRK7Vector2ii>:


void Flower::drawPedals(PNG* canvas, const Vector2& center, int x, int y) const
{
 804bdc4:	55                   	push   %ebp
 804bdc5:	89 e5                	mov    %esp,%ebp
 804bdc7:	53                   	push   %ebx
 804bdc8:	83 ec 54             	sub    $0x54,%esp
	Circle pedal(center, PEDAL_COLOR, PEDAL_RADIUS);
 804bdcb:	c7 44 24 0c 02 00 00 	movl   $0x2,0xc(%esp)
 804bdd2:	00 
 804bdd3:	c7 44 24 08 88 42 05 	movl   $0x8054288,0x8(%esp)
 804bdda:	08 
 804bddb:	8b 45 10             	mov    0x10(%ebp),%eax
 804bdde:	89 44 24 04          	mov    %eax,0x4(%esp)
 804bde2:	8d 45 dc             	lea    -0x24(%ebp),%eax
 804bde5:	89 04 24             	mov    %eax,(%esp)
 804bde8:	e8 cb 25 00 00       	call   804e3b8 <_ZN6CircleC1ERK7Vector2RK9RGBAPixeli>
	pedal.set_center(Vector2(center.x()+x, center.y()+y));
 804bded:	8b 45 10             	mov    0x10(%ebp),%eax
 804bdf0:	89 04 24             	mov    %eax,(%esp)
 804bdf3:	e8 6c fb ff ff       	call   804b964 <_ZNK7Vector21yEv>
 804bdf8:	db 45 18             	fildl  0x18(%ebp)
 804bdfb:	de c1                	faddp  %st,%st(1)
 804bdfd:	dd 5d c0             	fstpl  -0x40(%ebp)
 804be00:	8b 45 10             	mov    0x10(%ebp),%eax
 804be03:	89 04 24             	mov    %eax,(%esp)
 804be06:	e8 33 fb ff ff       	call   804b93e <_ZNK7Vector21xEv>
 804be0b:	db 45 14             	fildl  0x14(%ebp)
 804be0e:	de c1                	faddp  %st,%st(1)
 804be10:	dd 45 c0             	fldl   -0x40(%ebp)
 804be13:	dd 5c 24 0c          	fstpl  0xc(%esp)
 804be17:	dd 5c 24 04          	fstpl  0x4(%esp)
 804be1b:	8d 45 c8             	lea    -0x38(%ebp),%eax
 804be1e:	89 04 24             	mov    %eax,(%esp)
 804be21:	e8 2e f7 ff ff       	call   804b554 <_ZN7Vector2C1Edd>
 804be26:	8d 45 c8             	lea    -0x38(%ebp),%eax
 804be29:	89 44 24 04          	mov    %eax,0x4(%esp)
 804be2d:	8d 45 dc             	lea    -0x24(%ebp),%eax
 804be30:	89 04 24             	mov    %eax,(%esp)
 804be33:	e8 72 08 00 00       	call   804c6aa <_ZN5Shape10set_centerERK7Vector2>
	pedal.draw(canvas);
 804be38:	8b 45 0c             	mov    0xc(%ebp),%eax
 804be3b:	89 44 24 04          	mov    %eax,0x4(%esp)
 804be3f:	8d 45 dc             	lea    -0x24(%ebp),%eax
 804be42:	89 04 24             	mov    %eax,(%esp)
 804be45:	e8 fe 2b 00 00       	call   804ea48 <_ZNK6Circle4drawEP3PNG>
	pedal.set_center(Vector2(center.x()+x, center.y()-y));
 804be4a:	8b 45 10             	mov    0x10(%ebp),%eax
 804be4d:	89 04 24             	mov    %eax,(%esp)
 804be50:	e8 0f fb ff ff       	call   804b964 <_ZNK7Vector21yEv>
 804be55:	db 45 18             	fildl  0x18(%ebp)
 804be58:	de e9                	fsubrp %st,%st(1)
 804be5a:	dd 5d c0             	fstpl  -0x40(%ebp)
 804be5d:	8b 45 10             	mov    0x10(%ebp),%eax
 804be60:	89 04 24             	mov    %eax,(%esp)
 804be63:	e8 d6 fa ff ff       	call   804b93e <_ZNK7Vector21xEv>
 804be68:	db 45 14             	fildl  0x14(%ebp)
 804be6b:	de c1                	faddp  %st,%st(1)
 804be6d:	dd 45 c0             	fldl   -0x40(%ebp)
 804be70:	dd 5c 24 0c          	fstpl  0xc(%esp)
 804be74:	dd 5c 24 04          	fstpl  0x4(%esp)
 804be78:	8d 45 c8             	lea    -0x38(%ebp),%eax
 804be7b:	89 04 24             	mov    %eax,(%esp)
 804be7e:	e8 d1 f6 ff ff       	call   804b554 <_ZN7Vector2C1Edd>
 804be83:	8d 45 c8             	lea    -0x38(%ebp),%eax
 804be86:	89 44 24 04          	mov    %eax,0x4(%esp)
 804be8a:	8d 45 dc             	lea    -0x24(%ebp),%eax
 804be8d:	89 04 24             	mov    %eax,(%esp)
 804be90:	e8 15 08 00 00       	call   804c6aa <_ZN5Shape10set_centerERK7Vector2>
	pedal.draw(canvas);
 804be95:	8b 45 0c             	mov    0xc(%ebp),%eax
 804be98:	89 44 24 04          	mov    %eax,0x4(%esp)
 804be9c:	8d 45 dc             	lea    -0x24(%ebp),%eax
 804be9f:	89 04 24             	mov    %eax,(%esp)
 804bea2:	e8 a1 2b 00 00       	call   804ea48 <_ZNK6Circle4drawEP3PNG>
	pedal.set_center(Vector2(center.x()-x, center.y()+y));
 804bea7:	8b 45 10             	mov    0x10(%ebp),%eax
 804beaa:	89 04 24             	mov    %eax,(%esp)
 804bead:	e8 b2 fa ff ff       	call   804b964 <_ZNK7Vector21yEv>
 804beb2:	db 45 18             	fildl  0x18(%ebp)
 804beb5:	de c1                	faddp  %st,%st(1)
 804beb7:	dd 5d c0             	fstpl  -0x40(%ebp)
 804beba:	8b 45 10             	mov    0x10(%ebp),%eax
 804bebd:	89 04 24             	mov    %eax,(%esp)
 804bec0:	e8 79 fa ff ff       	call   804b93e <_ZNK7Vector21xEv>
 804bec5:	db 45 14             	fildl  0x14(%ebp)
 804bec8:	de e9                	fsubrp %st,%st(1)
 804beca:	dd 45 c0             	fldl   -0x40(%ebp)
 804becd:	dd 5c 24 0c          	fstpl  0xc(%esp)
 804bed1:	dd 5c 24 04          	fstpl  0x4(%esp)
 804bed5:	8d 45 c8             	lea    -0x38(%ebp),%eax
 804bed8:	89 04 24             	mov    %eax,(%esp)
 804bedb:	e8 74 f6 ff ff       	call   804b554 <_ZN7Vector2C1Edd>
 804bee0:	8d 45 c8             	lea    -0x38(%ebp),%eax
 804bee3:	89 44 24 04          	mov    %eax,0x4(%esp)
 804bee7:	8d 45 dc             	lea    -0x24(%ebp),%eax
 804beea:	89 04 24             	mov    %eax,(%esp)
 804beed:	e8 b8 07 00 00       	call   804c6aa <_ZN5Shape10set_centerERK7Vector2>
	pedal.draw(canvas);
 804bef2:	8b 45 0c             	mov    0xc(%ebp),%eax
 804bef5:	89 44 24 04          	mov    %eax,0x4(%esp)
 804bef9:	8d 45 dc             	lea    -0x24(%ebp),%eax
 804befc:	89 04 24             	mov    %eax,(%esp)
 804beff:	e8 44 2b 00 00       	call   804ea48 <_ZNK6Circle4drawEP3PNG>
	pedal.set_center(Vector2(center.x()-x, center.y()-y));
 804bf04:	8b 45 10             	mov    0x10(%ebp),%eax
 804bf07:	89 04 24             	mov    %eax,(%esp)
 804bf0a:	e8 55 fa ff ff       	call   804b964 <_ZNK7Vector21yEv>
 804bf0f:	db 45 18             	fildl  0x18(%ebp)
 804bf12:	de e9                	fsubrp %st,%st(1)
 804bf14:	dd 5d c0             	fstpl  -0x40(%ebp)
 804bf17:	8b 45 10             	mov    0x10(%ebp),%eax
 804bf1a:	89 04 24             	mov    %eax,(%esp)
 804bf1d:	e8 1c fa ff ff       	call   804b93e <_ZNK7Vector21xEv>
 804bf22:	db 45 14             	fildl  0x14(%ebp)
 804bf25:	de e9                	fsubrp %st,%st(1)
 804bf27:	dd 45 c0             	fldl   -0x40(%ebp)
 804bf2a:	dd 5c 24 0c          	fstpl  0xc(%esp)
 804bf2e:	dd 5c 24 04          	fstpl  0x4(%esp)
 804bf32:	8d 45 c8             	lea    -0x38(%ebp),%eax
 804bf35:	89 04 24             	mov    %eax,(%esp)
 804bf38:	e8 17 f6 ff ff       	call   804b554 <_ZN7Vector2C1Edd>
 804bf3d:	8d 45 c8             	lea    -0x38(%ebp),%eax
 804bf40:	89 44 24 04          	mov    %eax,0x4(%esp)
 804bf44:	8d 45 dc             	lea    -0x24(%ebp),%eax
 804bf47:	89 04 24             	mov    %eax,(%esp)
 804bf4a:	e8 5b 07 00 00       	call   804c6aa <_ZN5Shape10set_centerERK7Vector2>
	pedal.draw(canvas);
 804bf4f:	8b 45 0c             	mov    0xc(%ebp),%eax
 804bf52:	89 44 24 04          	mov    %eax,0x4(%esp)
 804bf56:	8d 45 dc             	lea    -0x24(%ebp),%eax
 804bf59:	89 04 24             	mov    %eax,(%esp)
 804bf5c:	e8 e7 2a 00 00       	call   804ea48 <_ZNK6Circle4drawEP3PNG>
	pedal.set_center(Vector2(center.x()+y, center.y()+x));
 804bf61:	8b 45 10             	mov    0x10(%ebp),%eax
 804bf64:	89 04 24             	mov    %eax,(%esp)
 804bf67:	e8 f8 f9 ff ff       	call   804b964 <_ZNK7Vector21yEv>
 804bf6c:	db 45 14             	fildl  0x14(%ebp)
 804bf6f:	de c1                	faddp  %st,%st(1)
 804bf71:	dd 5d c0             	fstpl  -0x40(%ebp)
 804bf74:	8b 45 10             	mov    0x10(%ebp),%eax
 804bf77:	89 04 24             	mov    %eax,(%esp)
 804bf7a:	e8 bf f9 ff ff       	call   804b93e <_ZNK7Vector21xEv>
 804bf7f:	db 45 18             	fildl  0x18(%ebp)
 804bf82:	de c1                	faddp  %st,%st(1)
 804bf84:	dd 45 c0             	fldl   -0x40(%ebp)
 804bf87:	dd 5c 24 0c          	fstpl  0xc(%esp)
 804bf8b:	dd 5c 24 04          	fstpl  0x4(%esp)
 804bf8f:	8d 45 c8             	lea    -0x38(%ebp),%eax
 804bf92:	89 04 24             	mov    %eax,(%esp)
 804bf95:	e8 ba f5 ff ff       	call   804b554 <_ZN7Vector2C1Edd>
 804bf9a:	8d 45 c8             	lea    -0x38(%ebp),%eax
 804bf9d:	89 44 24 04          	mov    %eax,0x4(%esp)
 804bfa1:	8d 45 dc             	lea    -0x24(%ebp),%eax
 804bfa4:	89 04 24             	mov    %eax,(%esp)
 804bfa7:	e8 fe 06 00 00       	call   804c6aa <_ZN5Shape10set_centerERK7Vector2>
	pedal.draw(canvas);
 804bfac:	8b 45 0c             	mov    0xc(%ebp),%eax
 804bfaf:	89 44 24 04          	mov    %eax,0x4(%esp)
 804bfb3:	8d 45 dc             	lea    -0x24(%ebp),%eax
 804bfb6:	89 04 24             	mov    %eax,(%esp)
 804bfb9:	e8 8a 2a 00 00       	call   804ea48 <_ZNK6Circle4drawEP3PNG>
	pedal.set_center(Vector2(center.x()+y, center.y()-x));
 804bfbe:	8b 45 10             	mov    0x10(%ebp),%eax
 804bfc1:	89 04 24             	mov    %eax,(%esp)
 804bfc4:	e8 9b f9 ff ff       	call   804b964 <_ZNK7Vector21yEv>
 804bfc9:	db 45 14             	fildl  0x14(%ebp)
 804bfcc:	de e9                	fsubrp %st,%st(1)
 804bfce:	dd 5d c0             	fstpl  -0x40(%ebp)
 804bfd1:	8b 45 10             	mov    0x10(%ebp),%eax
 804bfd4:	89 04 24             	mov    %eax,(%esp)
 804bfd7:	e8 62 f9 ff ff       	call   804b93e <_ZNK7Vector21xEv>
 804bfdc:	db 45 18             	fildl  0x18(%ebp)
 804bfdf:	de c1                	faddp  %st,%st(1)
 804bfe1:	dd 45 c0             	fldl   -0x40(%ebp)
 804bfe4:	dd 5c 24 0c          	fstpl  0xc(%esp)
 804bfe8:	dd 5c 24 04          	fstpl  0x4(%esp)
 804bfec:	8d 45 c8             	lea    -0x38(%ebp),%eax
 804bfef:	89 04 24             	mov    %eax,(%esp)
 804bff2:	e8 5d f5 ff ff       	call   804b554 <_ZN7Vector2C1Edd>
 804bff7:	8d 45 c8             	lea    -0x38(%ebp),%eax
 804bffa:	89 44 24 04          	mov    %eax,0x4(%esp)
 804bffe:	8d 45 dc             	lea    -0x24(%ebp),%eax
 804c001:	89 04 24             	mov    %eax,(%esp)
 804c004:	e8 a1 06 00 00       	call   804c6aa <_ZN5Shape10set_centerERK7Vector2>
	pedal.draw(canvas);
 804c009:	8b 45 0c             	mov    0xc(%ebp),%eax
 804c00c:	89 44 24 04          	mov    %eax,0x4(%esp)
 804c010:	8d 45 dc             	lea    -0x24(%ebp),%eax
 804c013:	89 04 24             	mov    %eax,(%esp)
 804c016:	e8 2d 2a 00 00       	call   804ea48 <_ZNK6Circle4drawEP3PNG>
	pedal.set_center(Vector2(center.x()-y, center.y()+x));
 804c01b:	8b 45 10             	mov    0x10(%ebp),%eax
 804c01e:	89 04 24             	mov    %eax,(%esp)
 804c021:	e8 3e f9 ff ff       	call   804b964 <_ZNK7Vector21yEv>
 804c026:	db 45 14             	fildl  0x14(%ebp)
 804c029:	de c1                	faddp  %st,%st(1)
 804c02b:	dd 5d c0             	fstpl  -0x40(%ebp)
 804c02e:	8b 45 10             	mov    0x10(%ebp),%eax
 804c031:	89 04 24             	mov    %eax,(%esp)
 804c034:	e8 05 f9 ff ff       	call   804b93e <_ZNK7Vector21xEv>
 804c039:	db 45 18             	fildl  0x18(%ebp)
 804c03c:	de e9                	fsubrp %st,%st(1)
 804c03e:	dd 45 c0             	fldl   -0x40(%ebp)
 804c041:	dd 5c 24 0c          	fstpl  0xc(%esp)
 804c045:	dd 5c 24 04          	fstpl  0x4(%esp)
 804c049:	8d 45 c8             	lea    -0x38(%ebp),%eax
 804c04c:	89 04 24             	mov    %eax,(%esp)
 804c04f:	e8 00 f5 ff ff       	call   804b554 <_ZN7Vector2C1Edd>
 804c054:	8d 45 c8             	lea    -0x38(%ebp),%eax
 804c057:	89 44 24 04          	mov    %eax,0x4(%esp)
 804c05b:	8d 45 dc             	lea    -0x24(%ebp),%eax
 804c05e:	89 04 24             	mov    %eax,(%esp)
 804c061:	e8 44 06 00 00       	call   804c6aa <_ZN5Shape10set_centerERK7Vector2>
	pedal.draw(canvas);
 804c066:	8b 45 0c             	mov    0xc(%ebp),%eax
 804c069:	89 44 24 04          	mov    %eax,0x4(%esp)
 804c06d:	8d 45 dc             	lea    -0x24(%ebp),%eax
 804c070:	89 04 24             	mov    %eax,(%esp)
 804c073:	e8 d0 29 00 00       	call   804ea48 <_ZNK6Circle4drawEP3PNG>
	pedal.set_center(Vector2(center.x()-y, center.y()-x));
 804c078:	8b 45 10             	mov    0x10(%ebp),%eax
 804c07b:	89 04 24             	mov    %eax,(%esp)
 804c07e:	e8 e1 f8 ff ff       	call   804b964 <_ZNK7Vector21yEv>
 804c083:	db 45 14             	fildl  0x14(%ebp)
 804c086:	de e9                	fsubrp %st,%st(1)
 804c088:	dd 5d c0             	fstpl  -0x40(%ebp)
 804c08b:	8b 45 10             	mov    0x10(%ebp),%eax
 804c08e:	89 04 24             	mov    %eax,(%esp)
 804c091:	e8 a8 f8 ff ff       	call   804b93e <_ZNK7Vector21xEv>
 804c096:	db 45 18             	fildl  0x18(%ebp)
 804c099:	de e9                	fsubrp %st,%st(1)
 804c09b:	dd 45 c0             	fldl   -0x40(%ebp)
 804c09e:	dd 5c 24 0c          	fstpl  0xc(%esp)
 804c0a2:	dd 5c 24 04          	fstpl  0x4(%esp)
 804c0a6:	8d 45 c8             	lea    -0x38(%ebp),%eax
 804c0a9:	89 04 24             	mov    %eax,(%esp)
 804c0ac:	e8 a3 f4 ff ff       	call   804b554 <_ZN7Vector2C1Edd>
 804c0b1:	8d 45 c8             	lea    -0x38(%ebp),%eax
 804c0b4:	89 44 24 04          	mov    %eax,0x4(%esp)
 804c0b8:	8d 45 dc             	lea    -0x24(%ebp),%eax
 804c0bb:	89 04 24             	mov    %eax,(%esp)
 804c0be:	e8 e7 05 00 00       	call   804c6aa <_ZN5Shape10set_centerERK7Vector2>
	pedal.draw(canvas);
 804c0c3:	8b 45 0c             	mov    0xc(%ebp),%eax
 804c0c6:	89 44 24 04          	mov    %eax,0x4(%esp)
 804c0ca:	8d 45 dc             	lea    -0x24(%ebp),%eax
 804c0cd:	89 04 24             	mov    %eax,(%esp)
 804c0d0:	e8 73 29 00 00       	call   804ea48 <_ZNK6Circle4drawEP3PNG>
 804c0d5:	8d 45 dc             	lea    -0x24(%ebp),%eax
 804c0d8:	89 04 24             	mov    %eax,(%esp)
 804c0db:	e8 a2 04 00 00       	call   804c582 <_ZN6CircleD1Ev>
 804c0e0:	eb 17                	jmp    804c0f9 <_ZNK6Flower10drawPedalsEP3PNGRK7Vector2ii+0x335>
 804c0e2:	89 c3                	mov    %eax,%ebx
 804c0e4:	8d 45 dc             	lea    -0x24(%ebp),%eax
 804c0e7:	89 04 24             	mov    %eax,(%esp)
 804c0ea:	e8 93 04 00 00       	call   804c582 <_ZN6CircleD1Ev>
 804c0ef:	89 d8                	mov    %ebx,%eax
 804c0f1:	89 04 24             	mov    %eax,(%esp)
 804c0f4:	e8 d7 d5 ff ff       	call   80496d0 <_Unwind_Resume@plt>
}
 804c0f9:	83 c4 54             	add    $0x54,%esp
 804c0fc:	5b                   	pop    %ebx
 804c0fd:	5d                   	pop    %ebp
 804c0fe:	c3                   	ret    
 804c0ff:	90                   	nop

0804c100 <_ZNK6Flower4drawEP3PNG>:

void Flower::draw(PNG* canvas) const
{
 804c100:	55                   	push   %ebp
 804c101:	89 e5                	mov    %esp,%ebp
 804c103:	83 ec 48             	sub    $0x48,%esp
	stem->draw(canvas);
 804c106:	8b 45 08             	mov    0x8(%ebp),%eax
 804c109:	8b 40 04             	mov    0x4(%eax),%eax
 804c10c:	8b 00                	mov    (%eax),%eax
 804c10e:	83 c0 08             	add    $0x8,%eax
 804c111:	8b 00                	mov    (%eax),%eax
 804c113:	8b 55 08             	mov    0x8(%ebp),%edx
 804c116:	8b 52 04             	mov    0x4(%edx),%edx
 804c119:	8b 4d 0c             	mov    0xc(%ebp),%ecx
 804c11c:	89 4c 24 04          	mov    %ecx,0x4(%esp)
 804c120:	89 14 24             	mov    %edx,(%esp)
 804c123:	ff d0                	call   *%eax
	pistil->draw(canvas);
 804c125:	8b 45 08             	mov    0x8(%ebp),%eax
 804c128:	8b 40 08             	mov    0x8(%eax),%eax
 804c12b:	8b 00                	mov    (%eax),%eax
 804c12d:	83 c0 08             	add    $0x8,%eax
 804c130:	8b 00                	mov    (%eax),%eax
 804c132:	8b 55 08             	mov    0x8(%ebp),%edx
 804c135:	8b 52 08             	mov    0x8(%edx),%edx
 804c138:	8b 4d 0c             	mov    0xc(%ebp),%ecx
 804c13b:	89 4c 24 04          	mov    %ecx,0x4(%esp)
 804c13f:	89 14 24             	mov    %edx,(%esp)
 804c142:	ff d0                	call   *%eax
	leaf->draw(canvas);
 804c144:	8b 45 08             	mov    0x8(%ebp),%eax
 804c147:	8b 40 0c             	mov    0xc(%eax),%eax
 804c14a:	8b 00                	mov    (%eax),%eax
 804c14c:	83 c0 08             	add    $0x8,%eax
 804c14f:	8b 00                	mov    (%eax),%eax
 804c151:	8b 55 08             	mov    0x8(%ebp),%edx
 804c154:	8b 52 0c             	mov    0xc(%edx),%edx
 804c157:	8b 4d 0c             	mov    0xc(%ebp),%ecx
 804c15a:	89 4c 24 04          	mov    %ecx,0x4(%esp)
 804c15e:	89 14 24             	mov    %edx,(%esp)
 804c161:	ff d0                	call   *%eax
	for (int x = 0; x < PISTIL_RADIUS; x++)
 804c163:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
 804c16a:	eb 7f                	jmp    804c1eb <_ZNK6Flower4drawEP3PNG+0xeb>
	{
		const double radius2 = PISTIL_RADIUS * PISTIL_RADIUS;
 804c16c:	dd 05 20 ff 04 08    	fldl   0x804ff20
 804c172:	dd 5d e0             	fstpl  -0x20(%ebp)
		const int y = static_cast<int>(sqrt(radius2 - (x * x)));
 804c175:	8b 45 d8             	mov    -0x28(%ebp),%eax
 804c178:	0f af 45 d8          	imul   -0x28(%ebp),%eax
 804c17c:	89 45 d4             	mov    %eax,-0x2c(%ebp)
 804c17f:	db 45 d4             	fildl  -0x2c(%ebp)
 804c182:	dd 05 20 ff 04 08    	fldl   0x804ff20
 804c188:	de e1                	fsubp  %st,%st(1)
 804c18a:	dd 1c 24             	fstpl  (%esp)
 804c18d:	e8 ce d2 ff ff       	call   8049460 <sqrt@plt>
 804c192:	d9 7d d2             	fnstcw -0x2e(%ebp)
 804c195:	0f b7 45 d2          	movzwl -0x2e(%ebp),%eax
 804c199:	b4 0c                	mov    $0xc,%ah
 804c19b:	66 89 45 d0          	mov    %ax,-0x30(%ebp)
 804c19f:	d9 6d d0             	fldcw  -0x30(%ebp)
 804c1a2:	db 5d dc             	fistpl -0x24(%ebp)
 804c1a5:	d9 6d d2             	fldcw  -0x2e(%ebp)
		drawPedals(canvas, pistil->center(), x, y);
 804c1a8:	8b 45 08             	mov    0x8(%ebp),%eax
 804c1ab:	8b 50 08             	mov    0x8(%eax),%edx
 804c1ae:	8d 45 e8             	lea    -0x18(%ebp),%eax
 804c1b1:	89 54 24 04          	mov    %edx,0x4(%esp)
 804c1b5:	89 04 24             	mov    %eax,(%esp)
 804c1b8:	e8 c5 04 00 00       	call   804c682 <_ZNK5Shape6centerEv>
 804c1bd:	83 ec 04             	sub    $0x4,%esp
 804c1c0:	8b 45 dc             	mov    -0x24(%ebp),%eax
 804c1c3:	89 44 24 10          	mov    %eax,0x10(%esp)
 804c1c7:	8b 45 d8             	mov    -0x28(%ebp),%eax
 804c1ca:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804c1ce:	8d 45 e8             	lea    -0x18(%ebp),%eax
 804c1d1:	89 44 24 08          	mov    %eax,0x8(%esp)
 804c1d5:	8b 45 0c             	mov    0xc(%ebp),%eax
 804c1d8:	89 44 24 04          	mov    %eax,0x4(%esp)
 804c1dc:	8b 45 08             	mov    0x8(%ebp),%eax
 804c1df:	89 04 24             	mov    %eax,(%esp)
 804c1e2:	e8 dd fb ff ff       	call   804bdc4 <_ZNK6Flower10drawPedalsEP3PNGRK7Vector2ii>
void Flower::draw(PNG* canvas) const
{
	stem->draw(canvas);
	pistil->draw(canvas);
	leaf->draw(canvas);
	for (int x = 0; x < PISTIL_RADIUS; x++)
 804c1e7:	83 45 d8 01          	addl   $0x1,-0x28(%ebp)
 804c1eb:	83 7d d8 0b          	cmpl   $0xb,-0x28(%ebp)
 804c1ef:	0f 8e 77 ff ff ff    	jle    804c16c <_ZNK6Flower4drawEP3PNG+0x6c>
	{
		const double radius2 = PISTIL_RADIUS * PISTIL_RADIUS;
		const int y = static_cast<int>(sqrt(radius2 - (x * x)));
		drawPedals(canvas, pistil->center(), x, y);
	}
}
 804c1f5:	c9                   	leave  
 804c1f6:	c3                   	ret    
 804c1f7:	90                   	nop

0804c1f8 <_ZN6FlowerD1Ev>:

Flower::~Flower(){
 804c1f8:	55                   	push   %ebp
 804c1f9:	89 e5                	mov    %esp,%ebp
 804c1fb:	53                   	push   %ebx
 804c1fc:	83 ec 14             	sub    $0x14,%esp
 804c1ff:	8b 45 08             	mov    0x8(%ebp),%eax
 804c202:	c7 00 a0 fe 04 08    	movl   $0x804fea0,(%eax)
    delete stem;
 804c208:	8b 45 08             	mov    0x8(%ebp),%eax
 804c20b:	8b 40 04             	mov    0x4(%eax),%eax
 804c20e:	85 c0                	test   %eax,%eax
 804c210:	74 18                	je     804c22a <_ZN6FlowerD1Ev+0x32>
 804c212:	8b 45 08             	mov    0x8(%ebp),%eax
 804c215:	8b 40 04             	mov    0x4(%eax),%eax
 804c218:	8b 00                	mov    (%eax),%eax
 804c21a:	83 c0 04             	add    $0x4,%eax
 804c21d:	8b 00                	mov    (%eax),%eax
 804c21f:	8b 55 08             	mov    0x8(%ebp),%edx
 804c222:	8b 52 04             	mov    0x4(%edx),%edx
 804c225:	89 14 24             	mov    %edx,(%esp)
 804c228:	ff d0                	call   *%eax
    delete pistil;
 804c22a:	8b 45 08             	mov    0x8(%ebp),%eax
 804c22d:	8b 40 08             	mov    0x8(%eax),%eax
 804c230:	85 c0                	test   %eax,%eax
 804c232:	74 18                	je     804c24c <_ZN6FlowerD1Ev+0x54>
 804c234:	8b 45 08             	mov    0x8(%ebp),%eax
 804c237:	8b 40 08             	mov    0x8(%eax),%eax
 804c23a:	8b 00                	mov    (%eax),%eax
 804c23c:	83 c0 04             	add    $0x4,%eax
 804c23f:	8b 00                	mov    (%eax),%eax
 804c241:	8b 55 08             	mov    0x8(%ebp),%edx
 804c244:	8b 52 08             	mov    0x8(%edx),%edx
 804c247:	89 14 24             	mov    %edx,(%esp)
 804c24a:	ff d0                	call   *%eax
    delete leaf;
 804c24c:	8b 45 08             	mov    0x8(%ebp),%eax
 804c24f:	8b 40 0c             	mov    0xc(%eax),%eax
 804c252:	85 c0                	test   %eax,%eax
 804c254:	74 18                	je     804c26e <_ZN6FlowerD1Ev+0x76>
 804c256:	8b 45 08             	mov    0x8(%ebp),%eax
 804c259:	8b 40 0c             	mov    0xc(%eax),%eax
 804c25c:	8b 00                	mov    (%eax),%eax
 804c25e:	83 c0 04             	add    $0x4,%eax
 804c261:	8b 00                	mov    (%eax),%eax
 804c263:	8b 55 08             	mov    0x8(%ebp),%edx
 804c266:	8b 52 0c             	mov    0xc(%edx),%edx
 804c269:	89 14 24             	mov    %edx,(%esp)
 804c26c:	ff d0                	call   *%eax
		const int y = static_cast<int>(sqrt(radius2 - (x * x)));
		drawPedals(canvas, pistil->center(), x, y);
	}
}

Flower::~Flower(){
 804c26e:	8b 45 08             	mov    0x8(%ebp),%eax
 804c271:	89 04 24             	mov    %eax,(%esp)
 804c274:	e8 69 02 00 00       	call   804c4e2 <_ZN8DrawableD1Ev>
    delete stem;
    delete pistil;
    delete leaf;
}
 804c279:	b8 00 00 00 00       	mov    $0x0,%eax
 804c27e:	85 c0                	test   %eax,%eax
 804c280:	74 24                	je     804c2a6 <_ZN6FlowerD1Ev+0xae>
 804c282:	8b 45 08             	mov    0x8(%ebp),%eax
 804c285:	89 04 24             	mov    %eax,(%esp)
 804c288:	e8 b3 d0 ff ff       	call   8049340 <_ZdlPv@plt>
 804c28d:	eb 17                	jmp    804c2a6 <_ZN6FlowerD1Ev+0xae>
 804c28f:	89 c3                	mov    %eax,%ebx
		const int y = static_cast<int>(sqrt(radius2 - (x * x)));
		drawPedals(canvas, pistil->center(), x, y);
	}
}

Flower::~Flower(){
 804c291:	8b 45 08             	mov    0x8(%ebp),%eax
 804c294:	89 04 24             	mov    %eax,(%esp)
 804c297:	e8 46 02 00 00       	call   804c4e2 <_ZN8DrawableD1Ev>
 804c29c:	89 d8                	mov    %ebx,%eax
 804c29e:	89 04 24             	mov    %eax,(%esp)
 804c2a1:	e8 2a d4 ff ff       	call   80496d0 <_Unwind_Resume@plt>
    delete stem;
    delete pistil;
    delete leaf;
}
 804c2a6:	83 c4 14             	add    $0x14,%esp
 804c2a9:	5b                   	pop    %ebx
 804c2aa:	5d                   	pop    %ebp
 804c2ab:	c3                   	ret    

0804c2ac <_ZN6FlowerD0Ev>:
		const int y = static_cast<int>(sqrt(radius2 - (x * x)));
		drawPedals(canvas, pistil->center(), x, y);
	}
}

Flower::~Flower(){
 804c2ac:	55                   	push   %ebp
 804c2ad:	89 e5                	mov    %esp,%ebp
 804c2af:	83 ec 18             	sub    $0x18,%esp
    delete stem;
    delete pistil;
    delete leaf;
}
 804c2b2:	8b 45 08             	mov    0x8(%ebp),%eax
 804c2b5:	89 04 24             	mov    %eax,(%esp)
 804c2b8:	e8 3b ff ff ff       	call   804c1f8 <_ZN6FlowerD1Ev>
 804c2bd:	8b 45 08             	mov    0x8(%ebp),%eax
 804c2c0:	89 04 24             	mov    %eax,(%esp)
 804c2c3:	e8 78 d0 ff ff       	call   8049340 <_ZdlPv@plt>
 804c2c8:	c9                   	leave  
 804c2c9:	c3                   	ret    

0804c2ca <_Z41__static_initialization_and_destruction_0ii>:
 804c2ca:	55                   	push   %ebp
 804c2cb:	89 e5                	mov    %esp,%ebp
 804c2cd:	83 ec 18             	sub    $0x18,%esp
 804c2d0:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
 804c2d4:	0f 85 e9 01 00 00    	jne    804c4c3 <_Z41__static_initialization_and_destruction_0ii+0x1f9>
 804c2da:	81 7d 0c ff ff 00 00 	cmpl   $0xffff,0xc(%ebp)
 804c2e1:	0f 85 dc 01 00 00    	jne    804c4c3 <_Z41__static_initialization_and_destruction_0ii+0x1f9>
 804c2e7:	c7 04 24 4f 42 05 08 	movl   $0x805424f,(%esp)
 804c2ee:	e8 7d d0 ff ff       	call   8049370 <_ZNSt8ios_base4InitC1Ev@plt>
 804c2f3:	c7 44 24 08 34 41 05 	movl   $0x8054134,0x8(%esp)
 804c2fa:	08 
 804c2fb:	c7 44 24 04 4f 42 05 	movl   $0x805424f,0x4(%esp)
 804c302:	08 
 804c303:	c7 04 24 00 94 04 08 	movl   $0x8049400,(%esp)
 804c30a:	e8 e1 cf ff ff       	call   80492f0 <__cxa_atexit@plt>
#include "png.h"

namespace color { 

/* Format in initialization is blue, green, red, alpha */
const RGBAPixel WHITE(255, 255, 255);
 804c30f:	c7 44 24 0c ff 00 00 	movl   $0xff,0xc(%esp)
 804c316:	00 
 804c317:	c7 44 24 08 ff 00 00 	movl   $0xff,0x8(%esp)
 804c31e:	00 
 804c31f:	c7 44 24 04 ff 00 00 	movl   $0xff,0x4(%esp)
 804c326:	00 
 804c327:	c7 04 24 50 42 05 08 	movl   $0x8054250,(%esp)
 804c32e:	e8 d7 d6 ff ff       	call   8049a0a <_ZN9RGBAPixelC1Ehhh>
const RGBAPixel BLACK(0, 0, 0);
 804c333:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
 804c33a:	00 
 804c33b:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
 804c342:	00 
 804c343:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
 804c34a:	00 
 804c34b:	c7 04 24 54 42 05 08 	movl   $0x8054254,(%esp)
 804c352:	e8 b3 d6 ff ff       	call   8049a0a <_ZN9RGBAPixelC1Ehhh>
const RGBAPixel GRAY(149, 145, 140);
 804c357:	c7 44 24 0c 8c 00 00 	movl   $0x8c,0xc(%esp)
 804c35e:	00 
 804c35f:	c7 44 24 08 91 00 00 	movl   $0x91,0x8(%esp)
 804c366:	00 
 804c367:	c7 44 24 04 95 00 00 	movl   $0x95,0x4(%esp)
 804c36e:	00 
 804c36f:	c7 04 24 58 42 05 08 	movl   $0x8054258,(%esp)
 804c376:	e8 8f d6 ff ff       	call   8049a0a <_ZN9RGBAPixelC1Ehhh>
const RGBAPixel RED(255, 0, 0);
 804c37b:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
 804c382:	00 
 804c383:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
 804c38a:	00 
 804c38b:	c7 44 24 04 ff 00 00 	movl   $0xff,0x4(%esp)
 804c392:	00 
 804c393:	c7 04 24 5c 42 05 08 	movl   $0x805425c,(%esp)
 804c39a:	e8 6b d6 ff ff       	call   8049a0a <_ZN9RGBAPixelC1Ehhh>
const RGBAPixel ORANGE(255, 127, 0);
 804c39f:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
 804c3a6:	00 
 804c3a7:	c7 44 24 08 7f 00 00 	movl   $0x7f,0x8(%esp)
 804c3ae:	00 
 804c3af:	c7 44 24 04 ff 00 00 	movl   $0xff,0x4(%esp)
 804c3b6:	00 
 804c3b7:	c7 04 24 60 42 05 08 	movl   $0x8054260,(%esp)
 804c3be:	e8 47 d6 ff ff       	call   8049a0a <_ZN9RGBAPixelC1Ehhh>
const RGBAPixel YELLOW(255, 255, 0);
 804c3c3:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
 804c3ca:	00 
 804c3cb:	c7 44 24 08 ff 00 00 	movl   $0xff,0x8(%esp)
 804c3d2:	00 
 804c3d3:	c7 44 24 04 ff 00 00 	movl   $0xff,0x4(%esp)
 804c3da:	00 
 804c3db:	c7 04 24 64 42 05 08 	movl   $0x8054264,(%esp)
 804c3e2:	e8 23 d6 ff ff       	call   8049a0a <_ZN9RGBAPixelC1Ehhh>
const RGBAPixel GREEN(0, 255, 0);
 804c3e7:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
 804c3ee:	00 
 804c3ef:	c7 44 24 08 ff 00 00 	movl   $0xff,0x8(%esp)
 804c3f6:	00 
 804c3f7:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
 804c3fe:	00 
 804c3ff:	c7 04 24 68 42 05 08 	movl   $0x8054268,(%esp)
 804c406:	e8 ff d5 ff ff       	call   8049a0a <_ZN9RGBAPixelC1Ehhh>
const RGBAPixel TURQUOISE(0, 255, 255);
 804c40b:	c7 44 24 0c ff 00 00 	movl   $0xff,0xc(%esp)
 804c412:	00 
 804c413:	c7 44 24 08 ff 00 00 	movl   $0xff,0x8(%esp)
 804c41a:	00 
 804c41b:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
 804c422:	00 
 804c423:	c7 04 24 6c 42 05 08 	movl   $0x805426c,(%esp)
 804c42a:	e8 db d5 ff ff       	call   8049a0a <_ZN9RGBAPixelC1Ehhh>
const RGBAPixel BLUE(0, 0, 255);
 804c42f:	c7 44 24 0c ff 00 00 	movl   $0xff,0xc(%esp)
 804c436:	00 
 804c437:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
 804c43e:	00 
 804c43f:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
 804c446:	00 
 804c447:	c7 04 24 70 42 05 08 	movl   $0x8054270,(%esp)
 804c44e:	e8 b7 d5 ff ff       	call   8049a0a <_ZN9RGBAPixelC1Ehhh>
const RGBAPixel PURPLE(127, 0, 255);
 804c453:	c7 44 24 0c ff 00 00 	movl   $0xff,0xc(%esp)
 804c45a:	00 
 804c45b:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
 804c462:	00 
 804c463:	c7 44 24 04 7f 00 00 	movl   $0x7f,0x4(%esp)
 804c46a:	00 
 804c46b:	c7 04 24 74 42 05 08 	movl   $0x8054274,(%esp)
 804c472:	e8 93 d5 ff ff       	call   8049a0a <_ZN9RGBAPixelC1Ehhh>
const RGBAPixel PINK(251, 126, 253);
 804c477:	c7 44 24 0c fd 00 00 	movl   $0xfd,0xc(%esp)
 804c47e:	00 
 804c47f:	c7 44 24 08 7e 00 00 	movl   $0x7e,0x8(%esp)
 804c486:	00 
 804c487:	c7 44 24 04 fb 00 00 	movl   $0xfb,0x4(%esp)
 804c48e:	00 
 804c48f:	c7 04 24 78 42 05 08 	movl   $0x8054278,(%esp)
 804c496:	e8 6f d5 ff ff       	call   8049a0a <_ZN9RGBAPixelC1Ehhh>
#include "rectangle.h"
#include "triangle.h"

const int STEM_HEIGHT = 32;
const int STEM_WIDTH = 2;
const RGBAPixel STEM_COLOR = color::GREEN;
 804c49b:	a1 68 42 05 08       	mov    0x8054268,%eax
 804c4a0:	a3 7c 42 05 08       	mov    %eax,0x805427c

const int LEAF_WIDTH = 16;
const int LEAF_HEIGHT = 16;
const RGBAPixel LEAF_COLOR = color::GREEN;
 804c4a5:	a1 68 42 05 08       	mov    0x8054268,%eax
 804c4aa:	a3 80 42 05 08       	mov    %eax,0x8054280

const int PISTIL_RADIUS = 12;
const RGBAPixel PISTIL_COLOR = color::YELLOW;
 804c4af:	a1 64 42 05 08       	mov    0x8054264,%eax
 804c4b4:	a3 84 42 05 08       	mov    %eax,0x8054284

const int PEDAL_RADIUS = 2;
const RGBAPixel PEDAL_COLOR = color::RED;
 804c4b9:	a1 5c 42 05 08       	mov    0x805425c,%eax
 804c4be:	a3 88 42 05 08       	mov    %eax,0x8054288

Flower::~Flower(){
    delete stem;
    delete pistil;
    delete leaf;
}
 804c4c3:	c9                   	leave  
 804c4c4:	c3                   	ret    

0804c4c5 <_GLOBAL__sub_I__ZN6FlowerC2ERK7Vector2>:
 804c4c5:	55                   	push   %ebp
 804c4c6:	89 e5                	mov    %esp,%ebp
 804c4c8:	83 ec 18             	sub    $0x18,%esp
 804c4cb:	c7 44 24 04 ff ff 00 	movl   $0xffff,0x4(%esp)
 804c4d2:	00 
 804c4d3:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
 804c4da:	e8 eb fd ff ff       	call   804c2ca <_Z41__static_initialization_and_destruction_0ii>
 804c4df:	c9                   	leave  
 804c4e0:	c3                   	ret    
 804c4e1:	90                   	nop

0804c4e2 <_ZN8DrawableD1Ev>:
 * @brief A pure virtual interface class that can draw itself to a canvas.
 */
class Drawable
{
	public:
    virtual ~Drawable() {}
 804c4e2:	55                   	push   %ebp
 804c4e3:	89 e5                	mov    %esp,%ebp
 804c4e5:	83 ec 18             	sub    $0x18,%esp
 804c4e8:	8b 45 08             	mov    0x8(%ebp),%eax
 804c4eb:	c7 00 b8 fe 04 08    	movl   $0x804feb8,(%eax)
 804c4f1:	b8 00 00 00 00       	mov    $0x0,%eax
 804c4f6:	85 c0                	test   %eax,%eax
 804c4f8:	74 0b                	je     804c505 <_ZN8DrawableD1Ev+0x23>
 804c4fa:	8b 45 08             	mov    0x8(%ebp),%eax
 804c4fd:	89 04 24             	mov    %eax,(%esp)
 804c500:	e8 3b ce ff ff       	call   8049340 <_ZdlPv@plt>
 804c505:	c9                   	leave  
 804c506:	c3                   	ret    
 804c507:	90                   	nop

0804c508 <_ZN8DrawableD0Ev>:
 804c508:	55                   	push   %ebp
 804c509:	89 e5                	mov    %esp,%ebp
 804c50b:	83 ec 18             	sub    $0x18,%esp
 804c50e:	8b 45 08             	mov    0x8(%ebp),%eax
 804c511:	89 04 24             	mov    %eax,(%esp)
 804c514:	e8 c9 ff ff ff       	call   804c4e2 <_ZN8DrawableD1Ev>
 804c519:	8b 45 08             	mov    0x8(%ebp),%eax
 804c51c:	89 04 24             	mov    %eax,(%esp)
 804c51f:	e8 1c ce ff ff       	call   8049340 <_ZdlPv@plt>
 804c524:	c9                   	leave  
 804c525:	c3                   	ret    

0804c526 <_ZN5ShapeD1Ev>:
		 * @param center Vector2 of the new Shape
		 * @param color of the new Shape
		 */
		Shape(const Vector2& center, const RGBAPixel& color);

                virtual ~Shape() {}
 804c526:	55                   	push   %ebp
 804c527:	89 e5                	mov    %esp,%ebp
 804c529:	83 ec 18             	sub    $0x18,%esp
 804c52c:	8b 45 08             	mov    0x8(%ebp),%eax
 804c52f:	c7 00 48 ff 04 08    	movl   $0x804ff48,(%eax)
 804c535:	8b 45 08             	mov    0x8(%ebp),%eax
 804c538:	89 04 24             	mov    %eax,(%esp)
 804c53b:	e8 a2 ff ff ff       	call   804c4e2 <_ZN8DrawableD1Ev>
 804c540:	b8 00 00 00 00       	mov    $0x0,%eax
 804c545:	85 c0                	test   %eax,%eax
 804c547:	74 0b                	je     804c554 <_ZN5ShapeD1Ev+0x2e>
 804c549:	8b 45 08             	mov    0x8(%ebp),%eax
 804c54c:	89 04 24             	mov    %eax,(%esp)
 804c54f:	e8 ec cd ff ff       	call   8049340 <_ZdlPv@plt>
 804c554:	c9                   	leave  
 804c555:	c3                   	ret    

0804c556 <_ZN5ShapeD0Ev>:
 804c556:	55                   	push   %ebp
 804c557:	89 e5                	mov    %esp,%ebp
 804c559:	83 ec 18             	sub    $0x18,%esp
 804c55c:	8b 45 08             	mov    0x8(%ebp),%eax
 804c55f:	89 04 24             	mov    %eax,(%esp)
 804c562:	e8 bf ff ff ff       	call   804c526 <_ZN5ShapeD1Ev>
 804c567:	8b 45 08             	mov    0x8(%ebp),%eax
 804c56a:	89 04 24             	mov    %eax,(%esp)
 804c56d:	e8 ce cd ff ff       	call   8049340 <_ZdlPv@plt>
 804c572:	c9                   	leave  
 804c573:	c3                   	ret    

0804c574 <_ZN8DrawableC1Ev>:
#include "png.h"

/**
 * @brief A pure virtual interface class that can draw itself to a canvas.
 */
class Drawable
 804c574:	55                   	push   %ebp
 804c575:	89 e5                	mov    %esp,%ebp
 804c577:	8b 45 08             	mov    0x8(%ebp),%eax
 804c57a:	c7 00 b8 fe 04 08    	movl   $0x804feb8,(%eax)
 804c580:	5d                   	pop    %ebp
 804c581:	c3                   	ret    

0804c582 <_ZN6CircleD1Ev>:

/**
 * @brief The Circle class is a subclass of Shape and represents a Circle in a
 * 2D space
 */
class Circle : public Shape
 804c582:	55                   	push   %ebp
 804c583:	89 e5                	mov    %esp,%ebp
 804c585:	83 ec 18             	sub    $0x18,%esp
 804c588:	8b 45 08             	mov    0x8(%ebp),%eax
 804c58b:	c7 00 c8 00 05 08    	movl   $0x80500c8,(%eax)
 804c591:	8b 45 08             	mov    0x8(%ebp),%eax
 804c594:	89 04 24             	mov    %eax,(%esp)
 804c597:	e8 8a ff ff ff       	call   804c526 <_ZN5ShapeD1Ev>
 804c59c:	b8 00 00 00 00       	mov    $0x0,%eax
 804c5a1:	85 c0                	test   %eax,%eax
 804c5a3:	74 0b                	je     804c5b0 <_ZN6CircleD1Ev+0x2e>
 804c5a5:	8b 45 08             	mov    0x8(%ebp),%eax
 804c5a8:	89 04 24             	mov    %eax,(%esp)
 804c5ab:	e8 90 cd ff ff       	call   8049340 <_ZdlPv@plt>
 804c5b0:	c9                   	leave  
 804c5b1:	c3                   	ret    

0804c5b2 <_ZN6CircleD0Ev>:
 804c5b2:	55                   	push   %ebp
 804c5b3:	89 e5                	mov    %esp,%ebp
 804c5b5:	83 ec 18             	sub    $0x18,%esp
 804c5b8:	8b 45 08             	mov    0x8(%ebp),%eax
 804c5bb:	89 04 24             	mov    %eax,(%esp)
 804c5be:	e8 bf ff ff ff       	call   804c582 <_ZN6CircleD1Ev>
 804c5c3:	8b 45 08             	mov    0x8(%ebp),%eax
 804c5c6:	89 04 24             	mov    %eax,(%esp)
 804c5c9:	e8 72 cd ff ff       	call   8049340 <_ZdlPv@plt>
 804c5ce:	c9                   	leave  
 804c5cf:	c3                   	ret    

0804c5d0 <_ZN5ShapeC1Ev>:

const Vector2 DEFAULT_CENTER(64, 64);
const RGBAPixel DEFAULT_COLOR = color::BLACK;


Shape::Shape()
 804c5d0:	55                   	push   %ebp
 804c5d1:	89 e5                	mov    %esp,%ebp
 804c5d3:	83 ec 18             	sub    $0x18,%esp
	: center_(DEFAULT_CENTER),
	color_(DEFAULT_COLOR)
 804c5d6:	8b 45 08             	mov    0x8(%ebp),%eax
 804c5d9:	89 04 24             	mov    %eax,(%esp)
 804c5dc:	e8 93 ff ff ff       	call   804c574 <_ZN8DrawableC1Ev>
 804c5e1:	8b 45 08             	mov    0x8(%ebp),%eax
 804c5e4:	c7 00 48 ff 04 08    	movl   $0x804ff48,(%eax)
 804c5ea:	8b 45 08             	mov    0x8(%ebp),%eax
 804c5ed:	8b 15 c0 42 05 08    	mov    0x80542c0,%edx
 804c5f3:	89 50 04             	mov    %edx,0x4(%eax)
 804c5f6:	8b 15 c4 42 05 08    	mov    0x80542c4,%edx
 804c5fc:	89 50 08             	mov    %edx,0x8(%eax)
 804c5ff:	8b 15 c8 42 05 08    	mov    0x80542c8,%edx
 804c605:	89 50 0c             	mov    %edx,0xc(%eax)
 804c608:	8b 15 cc 42 05 08    	mov    0x80542cc,%edx
 804c60e:	89 50 10             	mov    %edx,0x10(%eax)
 804c611:	8b 45 08             	mov    0x8(%ebp),%eax
 804c614:	8b 15 d0 42 05 08    	mov    0x80542d0,%edx
 804c61a:	89 50 14             	mov    %edx,0x14(%eax)
{
	/* Nothing.  See initialization list. */
}
 804c61d:	c9                   	leave  
 804c61e:	c3                   	ret    
 804c61f:	90                   	nop

0804c620 <_ZN5ShapeC1ERK7Vector2RK9RGBAPixel>:


Shape::Shape(const Vector2& pcenter, const RGBAPixel& pcolor)
 804c620:	55                   	push   %ebp
 804c621:	89 e5                	mov    %esp,%ebp
 804c623:	83 ec 18             	sub    $0x18,%esp
	: center_(pcenter), 
	color_(pcolor)
 804c626:	8b 45 08             	mov    0x8(%ebp),%eax
 804c629:	89 04 24             	mov    %eax,(%esp)
 804c62c:	e8 43 ff ff ff       	call   804c574 <_ZN8DrawableC1Ev>
 804c631:	8b 45 08             	mov    0x8(%ebp),%eax
 804c634:	c7 00 48 ff 04 08    	movl   $0x804ff48,(%eax)
 804c63a:	8b 45 08             	mov    0x8(%ebp),%eax
 804c63d:	8b 55 0c             	mov    0xc(%ebp),%edx
 804c640:	8b 0a                	mov    (%edx),%ecx
 804c642:	89 48 04             	mov    %ecx,0x4(%eax)
 804c645:	8b 4a 04             	mov    0x4(%edx),%ecx
 804c648:	89 48 08             	mov    %ecx,0x8(%eax)
 804c64b:	8b 4a 08             	mov    0x8(%edx),%ecx
 804c64e:	89 48 0c             	mov    %ecx,0xc(%eax)
 804c651:	8b 52 0c             	mov    0xc(%edx),%edx
 804c654:	89 50 10             	mov    %edx,0x10(%eax)
 804c657:	8b 45 08             	mov    0x8(%ebp),%eax
 804c65a:	8b 55 10             	mov    0x10(%ebp),%edx
 804c65d:	8b 12                	mov    (%edx),%edx
 804c65f:	89 50 14             	mov    %edx,0x14(%eax)
{
	/* Nothing.  See initialization list. */
}
 804c662:	c9                   	leave  
 804c663:	c3                   	ret    

0804c664 <_ZNK5Shape4areaEv>:

int Shape::area() const {
 804c664:	55                   	push   %ebp
 804c665:	89 e5                	mov    %esp,%ebp
	/* Shape's don't have an area since they cannot be made */
	return 0;
 804c667:	b8 00 00 00 00       	mov    $0x0,%eax
}
 804c66c:	5d                   	pop    %ebp
 804c66d:	c3                   	ret    

0804c66e <_ZNK5Shape9perimeterEv>:


int Shape::perimeter() const {
 804c66e:	55                   	push   %ebp
 804c66f:	89 e5                	mov    %esp,%ebp
	/* Shape's don't have a perimeter since they cannot be made */
	return 0;
 804c671:	b8 00 00 00 00       	mov    $0x0,%eax
}
 804c676:	5d                   	pop    %ebp
 804c677:	c3                   	ret    

0804c678 <_ZNK5Shape8containsERK7Vector2>:

bool Shape::contains(const Vector2& p) const {
 804c678:	55                   	push   %ebp
 804c679:	89 e5                	mov    %esp,%ebp
	/* Default shapes don't contain any points */
	return false;
 804c67b:	b8 00 00 00 00       	mov    $0x0,%eax
}
 804c680:	5d                   	pop    %ebp
 804c681:	c3                   	ret    

0804c682 <_ZNK5Shape6centerEv>:

Vector2 Shape::center() const
{
 804c682:	55                   	push   %ebp
 804c683:	89 e5                	mov    %esp,%ebp
	return this->center_;
 804c685:	8b 45 08             	mov    0x8(%ebp),%eax
 804c688:	8b 55 0c             	mov    0xc(%ebp),%edx
 804c68b:	8b 4a 04             	mov    0x4(%edx),%ecx
 804c68e:	89 08                	mov    %ecx,(%eax)
 804c690:	8b 4a 08             	mov    0x8(%edx),%ecx
 804c693:	89 48 04             	mov    %ecx,0x4(%eax)
 804c696:	8b 4a 0c             	mov    0xc(%edx),%ecx
 804c699:	89 48 08             	mov    %ecx,0x8(%eax)
 804c69c:	8b 52 10             	mov    0x10(%edx),%edx
 804c69f:	89 50 0c             	mov    %edx,0xc(%eax)
}
 804c6a2:	8b 45 08             	mov    0x8(%ebp),%eax
 804c6a5:	5d                   	pop    %ebp
 804c6a6:	c2 04 00             	ret    $0x4
 804c6a9:	90                   	nop

0804c6aa <_ZN5Shape10set_centerERK7Vector2>:

void Shape::set_center(const Vector2& pcenter) { 
 804c6aa:	55                   	push   %ebp
 804c6ab:	89 e5                	mov    %esp,%ebp
	this->center_ = pcenter;
 804c6ad:	8b 45 08             	mov    0x8(%ebp),%eax
 804c6b0:	8b 55 0c             	mov    0xc(%ebp),%edx
 804c6b3:	8b 0a                	mov    (%edx),%ecx
 804c6b5:	89 48 04             	mov    %ecx,0x4(%eax)
 804c6b8:	8b 4a 04             	mov    0x4(%edx),%ecx
 804c6bb:	89 48 08             	mov    %ecx,0x8(%eax)
 804c6be:	8b 4a 08             	mov    0x8(%edx),%ecx
 804c6c1:	89 48 0c             	mov    %ecx,0xc(%eax)
 804c6c4:	8b 52 0c             	mov    0xc(%edx),%edx
 804c6c7:	89 50 10             	mov    %edx,0x10(%eax)
}
 804c6ca:	5d                   	pop    %ebp
 804c6cb:	c3                   	ret    

0804c6cc <_ZNK5Shape5colorEv>:

RGBAPixel Shape::color() const
{
 804c6cc:	55                   	push   %ebp
 804c6cd:	89 e5                	mov    %esp,%ebp
	return this->color_;
 804c6cf:	8b 45 08             	mov    0x8(%ebp),%eax
 804c6d2:	8b 55 0c             	mov    0xc(%ebp),%edx
 804c6d5:	8b 52 14             	mov    0x14(%edx),%edx
 804c6d8:	89 10                	mov    %edx,(%eax)
}
 804c6da:	8b 45 08             	mov    0x8(%ebp),%eax
 804c6dd:	5d                   	pop    %ebp
 804c6de:	c2 04 00             	ret    $0x4
 804c6e1:	90                   	nop

0804c6e2 <_ZNK5Shape4drawEP3PNG>:

void Shape::draw(PNG* canvas) const
{
 804c6e2:	55                   	push   %ebp
 804c6e3:	89 e5                	mov    %esp,%ebp
 804c6e5:	53                   	push   %ebx
 804c6e6:	81 ec b4 00 00 00    	sub    $0xb4,%esp
	const Vector2 top_left(this->center().x() - 8, this->center().y() - 8); 
 804c6ec:	8d 45 d0             	lea    -0x30(%ebp),%eax
 804c6ef:	8b 55 08             	mov    0x8(%ebp),%edx
 804c6f2:	89 54 24 04          	mov    %edx,0x4(%esp)
 804c6f6:	89 04 24             	mov    %eax,(%esp)
 804c6f9:	e8 84 ff ff ff       	call   804c682 <_ZNK5Shape6centerEv>
 804c6fe:	83 ec 04             	sub    $0x4,%esp
 804c701:	8d 45 d0             	lea    -0x30(%ebp),%eax
 804c704:	89 04 24             	mov    %eax,(%esp)
 804c707:	e8 58 f2 ff ff       	call   804b964 <_ZNK7Vector21yEv>
 804c70c:	dd 05 78 ff 04 08    	fldl   0x804ff78
 804c712:	de e9                	fsubrp %st,%st(1)
 804c714:	dd 9d 60 ff ff ff    	fstpl  -0xa0(%ebp)
 804c71a:	8d 45 a8             	lea    -0x58(%ebp),%eax
 804c71d:	8b 55 08             	mov    0x8(%ebp),%edx
 804c720:	89 54 24 04          	mov    %edx,0x4(%esp)
 804c724:	89 04 24             	mov    %eax,(%esp)
 804c727:	e8 56 ff ff ff       	call   804c682 <_ZNK5Shape6centerEv>
 804c72c:	83 ec 04             	sub    $0x4,%esp
 804c72f:	8d 45 a8             	lea    -0x58(%ebp),%eax
 804c732:	89 04 24             	mov    %eax,(%esp)
 804c735:	e8 04 f2 ff ff       	call   804b93e <_ZNK7Vector21xEv>
 804c73a:	dd 05 78 ff 04 08    	fldl   0x804ff78
 804c740:	de e9                	fsubrp %st,%st(1)
 804c742:	dd 85 60 ff ff ff    	fldl   -0xa0(%ebp)
 804c748:	dd 5c 24 0c          	fstpl  0xc(%esp)
 804c74c:	dd 5c 24 04          	fstpl  0x4(%esp)
 804c750:	8d 85 68 ff ff ff    	lea    -0x98(%ebp),%eax
 804c756:	89 04 24             	mov    %eax,(%esp)
 804c759:	e8 f6 ed ff ff       	call   804b554 <_ZN7Vector2C1Edd>
	const Vector2 top_right(this->center().x() + 8, this->center().y() - 8); 
 804c75e:	8d 45 d0             	lea    -0x30(%ebp),%eax
 804c761:	8b 55 08             	mov    0x8(%ebp),%edx
 804c764:	89 54 24 04          	mov    %edx,0x4(%esp)
 804c768:	89 04 24             	mov    %eax,(%esp)
 804c76b:	e8 12 ff ff ff       	call   804c682 <_ZNK5Shape6centerEv>
 804c770:	83 ec 04             	sub    $0x4,%esp
 804c773:	8d 45 d0             	lea    -0x30(%ebp),%eax
 804c776:	89 04 24             	mov    %eax,(%esp)
 804c779:	e8 e6 f1 ff ff       	call   804b964 <_ZNK7Vector21yEv>
 804c77e:	dd 05 78 ff 04 08    	fldl   0x804ff78
 804c784:	de e9                	fsubrp %st,%st(1)
 804c786:	dd 9d 60 ff ff ff    	fstpl  -0xa0(%ebp)
 804c78c:	8d 45 a8             	lea    -0x58(%ebp),%eax
 804c78f:	8b 55 08             	mov    0x8(%ebp),%edx
 804c792:	89 54 24 04          	mov    %edx,0x4(%esp)
 804c796:	89 04 24             	mov    %eax,(%esp)
 804c799:	e8 e4 fe ff ff       	call   804c682 <_ZNK5Shape6centerEv>
 804c79e:	83 ec 04             	sub    $0x4,%esp
 804c7a1:	8d 45 a8             	lea    -0x58(%ebp),%eax
 804c7a4:	89 04 24             	mov    %eax,(%esp)
 804c7a7:	e8 92 f1 ff ff       	call   804b93e <_ZNK7Vector21xEv>
 804c7ac:	dd 05 78 ff 04 08    	fldl   0x804ff78
 804c7b2:	de c1                	faddp  %st,%st(1)
 804c7b4:	dd 85 60 ff ff ff    	fldl   -0xa0(%ebp)
 804c7ba:	dd 5c 24 0c          	fstpl  0xc(%esp)
 804c7be:	dd 5c 24 04          	fstpl  0x4(%esp)
 804c7c2:	8d 85 78 ff ff ff    	lea    -0x88(%ebp),%eax
 804c7c8:	89 04 24             	mov    %eax,(%esp)
 804c7cb:	e8 84 ed ff ff       	call   804b554 <_ZN7Vector2C1Edd>
	const Vector2 bottom_left(this->center().x() - 8, this->center().y() + 8); 
 804c7d0:	8d 45 d0             	lea    -0x30(%ebp),%eax
 804c7d3:	8b 55 08             	mov    0x8(%ebp),%edx
 804c7d6:	89 54 24 04          	mov    %edx,0x4(%esp)
 804c7da:	89 04 24             	mov    %eax,(%esp)
 804c7dd:	e8 a0 fe ff ff       	call   804c682 <_ZNK5Shape6centerEv>
 804c7e2:	83 ec 04             	sub    $0x4,%esp
 804c7e5:	8d 45 d0             	lea    -0x30(%ebp),%eax
 804c7e8:	89 04 24             	mov    %eax,(%esp)
 804c7eb:	e8 74 f1 ff ff       	call   804b964 <_ZNK7Vector21yEv>
 804c7f0:	dd 05 78 ff 04 08    	fldl   0x804ff78
 804c7f6:	de c1                	faddp  %st,%st(1)
 804c7f8:	dd 9d 60 ff ff ff    	fstpl  -0xa0(%ebp)
 804c7fe:	8d 45 a8             	lea    -0x58(%ebp),%eax
 804c801:	8b 55 08             	mov    0x8(%ebp),%edx
 804c804:	89 54 24 04          	mov    %edx,0x4(%esp)
 804c808:	89 04 24             	mov    %eax,(%esp)
 804c80b:	e8 72 fe ff ff       	call   804c682 <_ZNK5Shape6centerEv>
 804c810:	83 ec 04             	sub    $0x4,%esp
 804c813:	8d 45 a8             	lea    -0x58(%ebp),%eax
 804c816:	89 04 24             	mov    %eax,(%esp)
 804c819:	e8 20 f1 ff ff       	call   804b93e <_ZNK7Vector21xEv>
 804c81e:	dd 05 78 ff 04 08    	fldl   0x804ff78
 804c824:	de e9                	fsubrp %st,%st(1)
 804c826:	dd 85 60 ff ff ff    	fldl   -0xa0(%ebp)
 804c82c:	dd 5c 24 0c          	fstpl  0xc(%esp)
 804c830:	dd 5c 24 04          	fstpl  0x4(%esp)
 804c834:	8d 45 88             	lea    -0x78(%ebp),%eax
 804c837:	89 04 24             	mov    %eax,(%esp)
 804c83a:	e8 15 ed ff ff       	call   804b554 <_ZN7Vector2C1Edd>
	const Vector2 bottom_right(this->center().x() + 8, this->center().y() + 8); 
 804c83f:	8d 45 d0             	lea    -0x30(%ebp),%eax
 804c842:	8b 55 08             	mov    0x8(%ebp),%edx
 804c845:	89 54 24 04          	mov    %edx,0x4(%esp)
 804c849:	89 04 24             	mov    %eax,(%esp)
 804c84c:	e8 31 fe ff ff       	call   804c682 <_ZNK5Shape6centerEv>
 804c851:	83 ec 04             	sub    $0x4,%esp
 804c854:	8d 45 d0             	lea    -0x30(%ebp),%eax
 804c857:	89 04 24             	mov    %eax,(%esp)
 804c85a:	e8 05 f1 ff ff       	call   804b964 <_ZNK7Vector21yEv>
 804c85f:	dd 05 78 ff 04 08    	fldl   0x804ff78
 804c865:	de c1                	faddp  %st,%st(1)
 804c867:	dd 9d 60 ff ff ff    	fstpl  -0xa0(%ebp)
 804c86d:	8d 45 a8             	lea    -0x58(%ebp),%eax
 804c870:	8b 55 08             	mov    0x8(%ebp),%edx
 804c873:	89 54 24 04          	mov    %edx,0x4(%esp)
 804c877:	89 04 24             	mov    %eax,(%esp)
 804c87a:	e8 03 fe ff ff       	call   804c682 <_ZNK5Shape6centerEv>
 804c87f:	83 ec 04             	sub    $0x4,%esp
 804c882:	8d 45 a8             	lea    -0x58(%ebp),%eax
 804c885:	89 04 24             	mov    %eax,(%esp)
 804c888:	e8 b1 f0 ff ff       	call   804b93e <_ZNK7Vector21xEv>
 804c88d:	dd 05 78 ff 04 08    	fldl   0x804ff78
 804c893:	de c1                	faddp  %st,%st(1)
 804c895:	dd 85 60 ff ff ff    	fldl   -0xa0(%ebp)
 804c89b:	dd 5c 24 0c          	fstpl  0xc(%esp)
 804c89f:	dd 5c 24 04          	fstpl  0x4(%esp)
 804c8a3:	8d 45 98             	lea    -0x68(%ebp),%eax
 804c8a6:	89 04 24             	mov    %eax,(%esp)
 804c8a9:	e8 a6 ec ff ff       	call   804b554 <_ZN7Vector2C1Edd>

	const Line foward_slash(bottom_left, top_right, color::RED);
 804c8ae:	c7 44 24 0c 9d 42 05 	movl   $0x805429d,0xc(%esp)
 804c8b5:	08 
 804c8b6:	8d 85 78 ff ff ff    	lea    -0x88(%ebp),%eax
 804c8bc:	89 44 24 08          	mov    %eax,0x8(%esp)
 804c8c0:	8d 45 88             	lea    -0x78(%ebp),%eax
 804c8c3:	89 44 24 04          	mov    %eax,0x4(%esp)
 804c8c7:	8d 45 a8             	lea    -0x58(%ebp),%eax
 804c8ca:	89 04 24             	mov    %eax,(%esp)
 804c8cd:	e8 3e 24 00 00       	call   804ed10 <_ZN4LineC1ERK7Vector2S2_RK9RGBAPixel>
	foward_slash.draw(canvas);
 804c8d2:	8b 45 0c             	mov    0xc(%ebp),%eax
 804c8d5:	89 44 24 04          	mov    %eax,0x4(%esp)
 804c8d9:	8d 45 a8             	lea    -0x58(%ebp),%eax
 804c8dc:	89 04 24             	mov    %eax,(%esp)
 804c8df:	e8 8e 24 00 00       	call   804ed72 <_ZNK4Line4drawEP3PNG>

	const Line backward_slash(top_left, bottom_right, color::RED);
 804c8e4:	c7 44 24 0c 9d 42 05 	movl   $0x805429d,0xc(%esp)
 804c8eb:	08 
 804c8ec:	8d 45 98             	lea    -0x68(%ebp),%eax
 804c8ef:	89 44 24 08          	mov    %eax,0x8(%esp)
 804c8f3:	8d 85 68 ff ff ff    	lea    -0x98(%ebp),%eax
 804c8f9:	89 44 24 04          	mov    %eax,0x4(%esp)
 804c8fd:	8d 45 d0             	lea    -0x30(%ebp),%eax
 804c900:	89 04 24             	mov    %eax,(%esp)
 804c903:	e8 08 24 00 00       	call   804ed10 <_ZN4LineC1ERK7Vector2S2_RK9RGBAPixel>
	backward_slash.draw(canvas);
 804c908:	8b 45 0c             	mov    0xc(%ebp),%eax
 804c90b:	89 44 24 04          	mov    %eax,0x4(%esp)
 804c90f:	8d 45 d0             	lea    -0x30(%ebp),%eax
 804c912:	89 04 24             	mov    %eax,(%esp)
 804c915:	e8 58 24 00 00       	call   804ed72 <_ZNK4Line4drawEP3PNG>
	const Vector2 bottom_right(this->center().x() + 8, this->center().y() + 8); 

	const Line foward_slash(bottom_left, top_right, color::RED);
	foward_slash.draw(canvas);

	const Line backward_slash(top_left, bottom_right, color::RED);
 804c91a:	8d 45 d0             	lea    -0x30(%ebp),%eax
 804c91d:	89 04 24             	mov    %eax,(%esp)
 804c920:	e8 51 02 00 00       	call   804cb76 <_ZN4LineD1Ev>
	backward_slash.draw(canvas);
 804c925:	8d 45 a8             	lea    -0x58(%ebp),%eax
 804c928:	89 04 24             	mov    %eax,(%esp)
 804c92b:	e8 46 02 00 00       	call   804cb76 <_ZN4LineD1Ev>
 804c930:	eb 26                	jmp    804c958 <_ZNK5Shape4drawEP3PNG+0x276>
 804c932:	89 c3                	mov    %eax,%ebx
	const Vector2 bottom_right(this->center().x() + 8, this->center().y() + 8); 

	const Line foward_slash(bottom_left, top_right, color::RED);
	foward_slash.draw(canvas);

	const Line backward_slash(top_left, bottom_right, color::RED);
 804c934:	8d 45 d0             	lea    -0x30(%ebp),%eax
 804c937:	89 04 24             	mov    %eax,(%esp)
 804c93a:	e8 37 02 00 00       	call   804cb76 <_ZN4LineD1Ev>
 804c93f:	eb 02                	jmp    804c943 <_ZNK5Shape4drawEP3PNG+0x261>
 804c941:	89 c3                	mov    %eax,%ebx
	backward_slash.draw(canvas);
 804c943:	8d 45 a8             	lea    -0x58(%ebp),%eax
 804c946:	89 04 24             	mov    %eax,(%esp)
 804c949:	e8 28 02 00 00       	call   804cb76 <_ZN4LineD1Ev>
 804c94e:	89 d8                	mov    %ebx,%eax
 804c950:	89 04 24             	mov    %eax,(%esp)
 804c953:	e8 78 cd ff ff       	call   80496d0 <_Unwind_Resume@plt>
}
 804c958:	8b 5d fc             	mov    -0x4(%ebp),%ebx
 804c95b:	c9                   	leave  
 804c95c:	c3                   	ret    

0804c95d <_Z41__static_initialization_and_destruction_0ii>:
 804c95d:	55                   	push   %ebp
 804c95e:	89 e5                	mov    %esp,%ebp
 804c960:	83 ec 28             	sub    $0x28,%esp
 804c963:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
 804c967:	0f 85 eb 01 00 00    	jne    804cb58 <_Z41__static_initialization_and_destruction_0ii+0x1fb>
 804c96d:	81 7d 0c ff ff 00 00 	cmpl   $0xffff,0xc(%ebp)
 804c974:	0f 85 de 01 00 00    	jne    804cb58 <_Z41__static_initialization_and_destruction_0ii+0x1fb>
 804c97a:	c7 04 24 90 42 05 08 	movl   $0x8054290,(%esp)
 804c981:	e8 ea c9 ff ff       	call   8049370 <_ZNSt8ios_base4InitC1Ev@plt>
 804c986:	c7 44 24 08 34 41 05 	movl   $0x8054134,0x8(%esp)
 804c98d:	08 
 804c98e:	c7 44 24 04 90 42 05 	movl   $0x8054290,0x4(%esp)
 804c995:	08 
 804c996:	c7 04 24 00 94 04 08 	movl   $0x8049400,(%esp)
 804c99d:	e8 4e c9 ff ff       	call   80492f0 <__cxa_atexit@plt>
#include "png.h"

namespace color { 

/* Format in initialization is blue, green, red, alpha */
const RGBAPixel WHITE(255, 255, 255);
 804c9a2:	c7 44 24 0c ff 00 00 	movl   $0xff,0xc(%esp)
 804c9a9:	00 
 804c9aa:	c7 44 24 08 ff 00 00 	movl   $0xff,0x8(%esp)
 804c9b1:	00 
 804c9b2:	c7 44 24 04 ff 00 00 	movl   $0xff,0x4(%esp)
 804c9b9:	00 
 804c9ba:	c7 04 24 91 42 05 08 	movl   $0x8054291,(%esp)
 804c9c1:	e8 44 d0 ff ff       	call   8049a0a <_ZN9RGBAPixelC1Ehhh>
const RGBAPixel BLACK(0, 0, 0);
 804c9c6:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
 804c9cd:	00 
 804c9ce:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
 804c9d5:	00 
 804c9d6:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
 804c9dd:	00 
 804c9de:	c7 04 24 95 42 05 08 	movl   $0x8054295,(%esp)
 804c9e5:	e8 20 d0 ff ff       	call   8049a0a <_ZN9RGBAPixelC1Ehhh>
const RGBAPixel GRAY(149, 145, 140);
 804c9ea:	c7 44 24 0c 8c 00 00 	movl   $0x8c,0xc(%esp)
 804c9f1:	00 
 804c9f2:	c7 44 24 08 91 00 00 	movl   $0x91,0x8(%esp)
 804c9f9:	00 
 804c9fa:	c7 44 24 04 95 00 00 	movl   $0x95,0x4(%esp)
 804ca01:	00 
 804ca02:	c7 04 24 99 42 05 08 	movl   $0x8054299,(%esp)
 804ca09:	e8 fc cf ff ff       	call   8049a0a <_ZN9RGBAPixelC1Ehhh>
const RGBAPixel RED(255, 0, 0);
 804ca0e:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
 804ca15:	00 
 804ca16:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
 804ca1d:	00 
 804ca1e:	c7 44 24 04 ff 00 00 	movl   $0xff,0x4(%esp)
 804ca25:	00 
 804ca26:	c7 04 24 9d 42 05 08 	movl   $0x805429d,(%esp)
 804ca2d:	e8 d8 cf ff ff       	call   8049a0a <_ZN9RGBAPixelC1Ehhh>
const RGBAPixel ORANGE(255, 127, 0);
 804ca32:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
 804ca39:	00 
 804ca3a:	c7 44 24 08 7f 00 00 	movl   $0x7f,0x8(%esp)
 804ca41:	00 
 804ca42:	c7 44 24 04 ff 00 00 	movl   $0xff,0x4(%esp)
 804ca49:	00 
 804ca4a:	c7 04 24 a1 42 05 08 	movl   $0x80542a1,(%esp)
 804ca51:	e8 b4 cf ff ff       	call   8049a0a <_ZN9RGBAPixelC1Ehhh>
const RGBAPixel YELLOW(255, 255, 0);
 804ca56:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
 804ca5d:	00 
 804ca5e:	c7 44 24 08 ff 00 00 	movl   $0xff,0x8(%esp)
 804ca65:	00 
 804ca66:	c7 44 24 04 ff 00 00 	movl   $0xff,0x4(%esp)
 804ca6d:	00 
 804ca6e:	c7 04 24 a5 42 05 08 	movl   $0x80542a5,(%esp)
 804ca75:	e8 90 cf ff ff       	call   8049a0a <_ZN9RGBAPixelC1Ehhh>
const RGBAPixel GREEN(0, 255, 0);
 804ca7a:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
 804ca81:	00 
 804ca82:	c7 44 24 08 ff 00 00 	movl   $0xff,0x8(%esp)
 804ca89:	00 
 804ca8a:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
 804ca91:	00 
 804ca92:	c7 04 24 a9 42 05 08 	movl   $0x80542a9,(%esp)
 804ca99:	e8 6c cf ff ff       	call   8049a0a <_ZN9RGBAPixelC1Ehhh>
const RGBAPixel TURQUOISE(0, 255, 255);
 804ca9e:	c7 44 24 0c ff 00 00 	movl   $0xff,0xc(%esp)
 804caa5:	00 
 804caa6:	c7 44 24 08 ff 00 00 	movl   $0xff,0x8(%esp)
 804caad:	00 
 804caae:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
 804cab5:	00 
 804cab6:	c7 04 24 ad 42 05 08 	movl   $0x80542ad,(%esp)
 804cabd:	e8 48 cf ff ff       	call   8049a0a <_ZN9RGBAPixelC1Ehhh>
const RGBAPixel BLUE(0, 0, 255);
 804cac2:	c7 44 24 0c ff 00 00 	movl   $0xff,0xc(%esp)
 804cac9:	00 
 804caca:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
 804cad1:	00 
 804cad2:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
 804cad9:	00 
 804cada:	c7 04 24 b1 42 05 08 	movl   $0x80542b1,(%esp)
 804cae1:	e8 24 cf ff ff       	call   8049a0a <_ZN9RGBAPixelC1Ehhh>
const RGBAPixel PURPLE(127, 0, 255);
 804cae6:	c7 44 24 0c ff 00 00 	movl   $0xff,0xc(%esp)
 804caed:	00 
 804caee:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
 804caf5:	00 
 804caf6:	c7 44 24 04 7f 00 00 	movl   $0x7f,0x4(%esp)
 804cafd:	00 
 804cafe:	c7 04 24 b5 42 05 08 	movl   $0x80542b5,(%esp)
 804cb05:	e8 00 cf ff ff       	call   8049a0a <_ZN9RGBAPixelC1Ehhh>
const RGBAPixel PINK(251, 126, 253);
 804cb0a:	c7 44 24 0c fd 00 00 	movl   $0xfd,0xc(%esp)
 804cb11:	00 
 804cb12:	c7 44 24 08 7e 00 00 	movl   $0x7e,0x8(%esp)
 804cb19:	00 
 804cb1a:	c7 44 24 04 fb 00 00 	movl   $0xfb,0x4(%esp)
 804cb21:	00 
 804cb22:	c7 04 24 b9 42 05 08 	movl   $0x80542b9,(%esp)
 804cb29:	e8 dc ce ff ff       	call   8049a0a <_ZN9RGBAPixelC1Ehhh>

#include "color.h"
#include "line.h"


const Vector2 DEFAULT_CENTER(64, 64);
 804cb2e:	dd 05 80 ff 04 08    	fldl   0x804ff80
 804cb34:	dd 5c 24 0c          	fstpl  0xc(%esp)
 804cb38:	dd 05 80 ff 04 08    	fldl   0x804ff80
 804cb3e:	dd 5c 24 04          	fstpl  0x4(%esp)
 804cb42:	c7 04 24 c0 42 05 08 	movl   $0x80542c0,(%esp)
 804cb49:	e8 06 ea ff ff       	call   804b554 <_ZN7Vector2C1Edd>
const RGBAPixel DEFAULT_COLOR = color::BLACK;
 804cb4e:	a1 95 42 05 08       	mov    0x8054295,%eax
 804cb53:	a3 d0 42 05 08       	mov    %eax,0x80542d0
	const Line foward_slash(bottom_left, top_right, color::RED);
	foward_slash.draw(canvas);

	const Line backward_slash(top_left, bottom_right, color::RED);
	backward_slash.draw(canvas);
}
 804cb58:	c9                   	leave  
 804cb59:	c3                   	ret    

0804cb5a <_GLOBAL__sub_I__ZN5ShapeC2Ev>:
 804cb5a:	55                   	push   %ebp
 804cb5b:	89 e5                	mov    %esp,%ebp
 804cb5d:	83 ec 18             	sub    $0x18,%esp
 804cb60:	c7 44 24 04 ff ff 00 	movl   $0xffff,0x4(%esp)
 804cb67:	00 
 804cb68:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
 804cb6f:	e8 e9 fd ff ff       	call   804c95d <_Z41__static_initialization_and_destruction_0ii>
 804cb74:	c9                   	leave  
 804cb75:	c3                   	ret    

0804cb76 <_ZN4LineD1Ev>:

/**
 * @brief The Line class is a subclass of Drawable and represents a line in 2D
 * space
 */
class Line : public Drawable
 804cb76:	55                   	push   %ebp
 804cb77:	89 e5                	mov    %esp,%ebp
 804cb79:	83 ec 18             	sub    $0x18,%esp
 804cb7c:	8b 45 08             	mov    0x8(%ebp),%eax
 804cb7f:	c7 00 30 01 05 08    	movl   $0x8050130,(%eax)
 804cb85:	8b 45 08             	mov    0x8(%ebp),%eax
 804cb88:	89 04 24             	mov    %eax,(%esp)
 804cb8b:	e8 52 f9 ff ff       	call   804c4e2 <_ZN8DrawableD1Ev>
 804cb90:	b8 00 00 00 00       	mov    $0x0,%eax
 804cb95:	85 c0                	test   %eax,%eax
 804cb97:	74 0b                	je     804cba4 <_ZN4LineD1Ev+0x2e>
 804cb99:	8b 45 08             	mov    0x8(%ebp),%eax
 804cb9c:	89 04 24             	mov    %eax,(%esp)
 804cb9f:	e8 9c c7 ff ff       	call   8049340 <_ZdlPv@plt>
 804cba4:	c9                   	leave  
 804cba5:	c3                   	ret    

0804cba6 <_ZN4LineD0Ev>:
 804cba6:	55                   	push   %ebp
 804cba7:	89 e5                	mov    %esp,%ebp
 804cba9:	83 ec 18             	sub    $0x18,%esp
 804cbac:	8b 45 08             	mov    0x8(%ebp),%eax
 804cbaf:	89 04 24             	mov    %eax,(%esp)
 804cbb2:	e8 bf ff ff ff       	call   804cb76 <_ZN4LineD1Ev>
 804cbb7:	8b 45 08             	mov    0x8(%ebp),%eax
 804cbba:	89 04 24             	mov    %eax,(%esp)
 804cbbd:	e8 7e c7 ff ff       	call   8049340 <_ZdlPv@plt>
 804cbc2:	c9                   	leave  
 804cbc3:	c3                   	ret    

0804cbc4 <_ZN8TriangleC1ERK9RGBAPixelRK7Vector2S5_S5_>:

#include "line.h"

using std::vector;

Triangle::Triangle(const RGBAPixel& pcolor, const Vector2& vertex1,
 804cbc4:	55                   	push   %ebp
 804cbc5:	89 e5                	mov    %esp,%ebp
 804cbc7:	53                   	push   %ebx
 804cbc8:	83 ec 54             	sub    $0x54,%esp
		const Vector2& vertex2, const Vector2& vertex3)
	: Shape(Vector2(0, 0), pcolor),
	vertices_(new Vector2*[3])
 804cbcb:	d9 ee                	fldz   
 804cbcd:	dd 5c 24 0c          	fstpl  0xc(%esp)
 804cbd1:	d9 ee                	fldz   
 804cbd3:	dd 5c 24 04          	fstpl  0x4(%esp)
 804cbd7:	8d 45 e8             	lea    -0x18(%ebp),%eax
 804cbda:	89 04 24             	mov    %eax,(%esp)
 804cbdd:	e8 72 e9 ff ff       	call   804b554 <_ZN7Vector2C1Edd>
 804cbe2:	8b 45 08             	mov    0x8(%ebp),%eax
 804cbe5:	8b 55 0c             	mov    0xc(%ebp),%edx
 804cbe8:	89 54 24 08          	mov    %edx,0x8(%esp)
 804cbec:	8d 55 e8             	lea    -0x18(%ebp),%edx
 804cbef:	89 54 24 04          	mov    %edx,0x4(%esp)
 804cbf3:	89 04 24             	mov    %eax,(%esp)
 804cbf6:	e8 25 fa ff ff       	call   804c620 <_ZN5ShapeC1ERK7Vector2RK9RGBAPixel>
 804cbfb:	8b 45 08             	mov    0x8(%ebp),%eax
 804cbfe:	c7 00 48 00 05 08    	movl   $0x8050048,(%eax)
 804cc04:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
 804cc0b:	e8 40 c9 ff ff       	call   8049550 <_Znaj@plt>
 804cc10:	8b 55 08             	mov    0x8(%ebp),%edx
 804cc13:	89 42 18             	mov    %eax,0x18(%edx)
{
	this->vertices_[0] = new Vector2(vertex1);
 804cc16:	c7 04 24 10 00 00 00 	movl   $0x10,(%esp)
 804cc1d:	e8 fe c8 ff ff       	call   8049520 <_Znwj@plt>
 804cc22:	8b 55 10             	mov    0x10(%ebp),%edx
 804cc25:	8b 0a                	mov    (%edx),%ecx
 804cc27:	89 08                	mov    %ecx,(%eax)
 804cc29:	8b 4a 04             	mov    0x4(%edx),%ecx
 804cc2c:	89 48 04             	mov    %ecx,0x4(%eax)
 804cc2f:	8b 4a 08             	mov    0x8(%edx),%ecx
 804cc32:	89 48 08             	mov    %ecx,0x8(%eax)
 804cc35:	8b 52 0c             	mov    0xc(%edx),%edx
 804cc38:	89 50 0c             	mov    %edx,0xc(%eax)
 804cc3b:	8b 55 08             	mov    0x8(%ebp),%edx
 804cc3e:	8b 52 18             	mov    0x18(%edx),%edx
 804cc41:	89 02                	mov    %eax,(%edx)
	this->vertices_[1] = new Vector2(vertex2);
 804cc43:	c7 04 24 10 00 00 00 	movl   $0x10,(%esp)
 804cc4a:	e8 d1 c8 ff ff       	call   8049520 <_Znwj@plt>
 804cc4f:	8b 55 14             	mov    0x14(%ebp),%edx
 804cc52:	8b 0a                	mov    (%edx),%ecx
 804cc54:	89 08                	mov    %ecx,(%eax)
 804cc56:	8b 4a 04             	mov    0x4(%edx),%ecx
 804cc59:	89 48 04             	mov    %ecx,0x4(%eax)
 804cc5c:	8b 4a 08             	mov    0x8(%edx),%ecx
 804cc5f:	89 48 08             	mov    %ecx,0x8(%eax)
 804cc62:	8b 52 0c             	mov    0xc(%edx),%edx
 804cc65:	89 50 0c             	mov    %edx,0xc(%eax)
 804cc68:	8b 55 08             	mov    0x8(%ebp),%edx
 804cc6b:	8b 52 18             	mov    0x18(%edx),%edx
 804cc6e:	83 c2 04             	add    $0x4,%edx
 804cc71:	89 02                	mov    %eax,(%edx)
	this->vertices_[2] = new Vector2(vertex3);
 804cc73:	c7 04 24 10 00 00 00 	movl   $0x10,(%esp)
 804cc7a:	e8 a1 c8 ff ff       	call   8049520 <_Znwj@plt>
 804cc7f:	8b 55 18             	mov    0x18(%ebp),%edx
 804cc82:	8b 0a                	mov    (%edx),%ecx
 804cc84:	89 08                	mov    %ecx,(%eax)
 804cc86:	8b 4a 04             	mov    0x4(%edx),%ecx
 804cc89:	89 48 04             	mov    %ecx,0x4(%eax)
 804cc8c:	8b 4a 08             	mov    0x8(%edx),%ecx
 804cc8f:	89 48 08             	mov    %ecx,0x8(%eax)
 804cc92:	8b 52 0c             	mov    0xc(%edx),%edx
 804cc95:	89 50 0c             	mov    %edx,0xc(%eax)
 804cc98:	8b 55 08             	mov    0x8(%ebp),%edx
 804cc9b:	8b 52 18             	mov    0x18(%edx),%edx
 804cc9e:	83 c2 08             	add    $0x8,%edx
 804cca1:	89 02                	mov    %eax,(%edx)
	this->center_ = (vertex1 + vertex2 + vertex3) / 3;
 804cca3:	8d 45 e8             	lea    -0x18(%ebp),%eax
 804cca6:	8b 55 14             	mov    0x14(%ebp),%edx
 804cca9:	89 54 24 08          	mov    %edx,0x8(%esp)
 804ccad:	8b 55 10             	mov    0x10(%ebp),%edx
 804ccb0:	89 54 24 04          	mov    %edx,0x4(%esp)
 804ccb4:	89 04 24             	mov    %eax,(%esp)
 804ccb7:	e8 06 e9 ff ff       	call   804b5c2 <_ZNK7Vector2plERKS_>
 804ccbc:	83 ec 04             	sub    $0x4,%esp
 804ccbf:	8d 45 d8             	lea    -0x28(%ebp),%eax
 804ccc2:	8b 55 18             	mov    0x18(%ebp),%edx
 804ccc5:	89 54 24 08          	mov    %edx,0x8(%esp)
 804ccc9:	8d 55 e8             	lea    -0x18(%ebp),%edx
 804cccc:	89 54 24 04          	mov    %edx,0x4(%esp)
 804ccd0:	89 04 24             	mov    %eax,(%esp)
 804ccd3:	e8 ea e8 ff ff       	call   804b5c2 <_ZNK7Vector2plERKS_>
 804ccd8:	83 ec 04             	sub    $0x4,%esp
 804ccdb:	8b 5d 08             	mov    0x8(%ebp),%ebx
 804ccde:	8d 45 c8             	lea    -0x38(%ebp),%eax
 804cce1:	c7 44 24 08 03 00 00 	movl   $0x3,0x8(%esp)
 804cce8:	00 
 804cce9:	8d 55 d8             	lea    -0x28(%ebp),%edx
 804ccec:	89 54 24 04          	mov    %edx,0x4(%esp)
 804ccf0:	89 04 24             	mov    %eax,(%esp)
 804ccf3:	e8 3e e9 ff ff       	call   804b636 <_ZN7Vector2dvEi>
 804ccf8:	83 ec 04             	sub    $0x4,%esp
 804ccfb:	8b 45 c8             	mov    -0x38(%ebp),%eax
 804ccfe:	89 43 04             	mov    %eax,0x4(%ebx)
 804cd01:	8b 45 cc             	mov    -0x34(%ebp),%eax
 804cd04:	89 43 08             	mov    %eax,0x8(%ebx)
 804cd07:	8b 45 d0             	mov    -0x30(%ebp),%eax
 804cd0a:	89 43 0c             	mov    %eax,0xc(%ebx)
 804cd0d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
 804cd10:	89 43 10             	mov    %eax,0x10(%ebx)
 804cd13:	eb 17                	jmp    804cd2c <_ZN8TriangleC1ERK9RGBAPixelRK7Vector2S5_S5_+0x168>
 804cd15:	89 c3                	mov    %eax,%ebx
using std::vector;

Triangle::Triangle(const RGBAPixel& pcolor, const Vector2& vertex1,
		const Vector2& vertex2, const Vector2& vertex3)
	: Shape(Vector2(0, 0), pcolor),
	vertices_(new Vector2*[3])
 804cd17:	8b 45 08             	mov    0x8(%ebp),%eax
 804cd1a:	89 04 24             	mov    %eax,(%esp)
 804cd1d:	e8 04 f8 ff ff       	call   804c526 <_ZN5ShapeD1Ev>
 804cd22:	89 d8                	mov    %ebx,%eax
 804cd24:	89 04 24             	mov    %eax,(%esp)
 804cd27:	e8 a4 c9 ff ff       	call   80496d0 <_Unwind_Resume@plt>
{
	this->vertices_[0] = new Vector2(vertex1);
	this->vertices_[1] = new Vector2(vertex2);
	this->vertices_[2] = new Vector2(vertex3);
	this->center_ = (vertex1 + vertex2 + vertex3) / 3;
}
 804cd2c:	8b 5d fc             	mov    -0x4(%ebp),%ebx
 804cd2f:	c9                   	leave  
 804cd30:	c3                   	ret    
 804cd31:	90                   	nop

0804cd32 <_ZN8TriangleC1ERKS_>:

Triangle::Triangle(const Triangle& other)
 804cd32:	55                   	push   %ebp
 804cd33:	89 e5                	mov    %esp,%ebp
 804cd35:	53                   	push   %ebx
 804cd36:	83 ec 44             	sub    $0x44,%esp
	: Shape(Vector2(0, 0), other.color()),
 804cd39:	8b 55 0c             	mov    0xc(%ebp),%edx
	vertices_(new Vector2*[3])
 804cd3c:	8d 45 e4             	lea    -0x1c(%ebp),%eax
 804cd3f:	89 54 24 04          	mov    %edx,0x4(%esp)
 804cd43:	89 04 24             	mov    %eax,(%esp)
 804cd46:	e8 81 f9 ff ff       	call   804c6cc <_ZNK5Shape5colorEv>
 804cd4b:	83 ec 04             	sub    $0x4,%esp
 804cd4e:	d9 ee                	fldz   
 804cd50:	dd 5c 24 0c          	fstpl  0xc(%esp)
 804cd54:	d9 ee                	fldz   
 804cd56:	dd 5c 24 04          	fstpl  0x4(%esp)
 804cd5a:	8d 45 e8             	lea    -0x18(%ebp),%eax
 804cd5d:	89 04 24             	mov    %eax,(%esp)
 804cd60:	e8 ef e7 ff ff       	call   804b554 <_ZN7Vector2C1Edd>
 804cd65:	8b 45 08             	mov    0x8(%ebp),%eax
 804cd68:	8d 55 e4             	lea    -0x1c(%ebp),%edx
 804cd6b:	89 54 24 08          	mov    %edx,0x8(%esp)
 804cd6f:	8d 55 e8             	lea    -0x18(%ebp),%edx
 804cd72:	89 54 24 04          	mov    %edx,0x4(%esp)
 804cd76:	89 04 24             	mov    %eax,(%esp)
 804cd79:	e8 a2 f8 ff ff       	call   804c620 <_ZN5ShapeC1ERK7Vector2RK9RGBAPixel>
 804cd7e:	8b 45 08             	mov    0x8(%ebp),%eax
 804cd81:	c7 00 48 00 05 08    	movl   $0x8050048,(%eax)
 804cd87:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
 804cd8e:	e8 bd c7 ff ff       	call   8049550 <_Znaj@plt>
 804cd93:	8b 55 08             	mov    0x8(%ebp),%edx
 804cd96:	89 42 18             	mov    %eax,0x18(%edx)
{
	this->vertices_[0] = new Vector2(other.vertex(0));
 804cd99:	c7 04 24 10 00 00 00 	movl   $0x10,(%esp)
 804cda0:	e8 7b c7 ff ff       	call   8049520 <_Znwj@plt>
 804cda5:	89 c3                	mov    %eax,%ebx
 804cda7:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
 804cdae:	00 
 804cdaf:	8b 45 0c             	mov    0xc(%ebp),%eax
 804cdb2:	89 44 24 04          	mov    %eax,0x4(%esp)
 804cdb6:	89 1c 24             	mov    %ebx,(%esp)
 804cdb9:	e8 1a 02 00 00       	call   804cfd8 <_ZNK8Triangle6vertexEi>
 804cdbe:	83 ec 04             	sub    $0x4,%esp
 804cdc1:	8b 45 08             	mov    0x8(%ebp),%eax
 804cdc4:	8b 40 18             	mov    0x18(%eax),%eax
 804cdc7:	89 18                	mov    %ebx,(%eax)
	this->vertices_[1] = new Vector2(other.vertex(1));
 804cdc9:	c7 04 24 10 00 00 00 	movl   $0x10,(%esp)
 804cdd0:	e8 4b c7 ff ff       	call   8049520 <_Znwj@plt>
 804cdd5:	89 c3                	mov    %eax,%ebx
 804cdd7:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
 804cdde:	00 
 804cddf:	8b 45 0c             	mov    0xc(%ebp),%eax
 804cde2:	89 44 24 04          	mov    %eax,0x4(%esp)
 804cde6:	89 1c 24             	mov    %ebx,(%esp)
 804cde9:	e8 ea 01 00 00       	call   804cfd8 <_ZNK8Triangle6vertexEi>
 804cdee:	83 ec 04             	sub    $0x4,%esp
 804cdf1:	8b 45 08             	mov    0x8(%ebp),%eax
 804cdf4:	8b 40 18             	mov    0x18(%eax),%eax
 804cdf7:	83 c0 04             	add    $0x4,%eax
 804cdfa:	89 18                	mov    %ebx,(%eax)
	this->vertices_[2] = new Vector2(other.vertex(2));
 804cdfc:	c7 04 24 10 00 00 00 	movl   $0x10,(%esp)
 804ce03:	e8 18 c7 ff ff       	call   8049520 <_Znwj@plt>
 804ce08:	89 c3                	mov    %eax,%ebx
 804ce0a:	c7 44 24 08 02 00 00 	movl   $0x2,0x8(%esp)
 804ce11:	00 
 804ce12:	8b 45 0c             	mov    0xc(%ebp),%eax
 804ce15:	89 44 24 04          	mov    %eax,0x4(%esp)
 804ce19:	89 1c 24             	mov    %ebx,(%esp)
 804ce1c:	e8 b7 01 00 00       	call   804cfd8 <_ZNK8Triangle6vertexEi>
 804ce21:	83 ec 04             	sub    $0x4,%esp
 804ce24:	8b 45 08             	mov    0x8(%ebp),%eax
 804ce27:	8b 40 18             	mov    0x18(%eax),%eax
 804ce2a:	83 c0 08             	add    $0x8,%eax
 804ce2d:	89 18                	mov    %ebx,(%eax)
 804ce2f:	eb 17                	jmp    804ce48 <_ZN8TriangleC1ERKS_+0x116>
 804ce31:	89 c3                	mov    %eax,%ebx
	this->center_ = (vertex1 + vertex2 + vertex3) / 3;
}

Triangle::Triangle(const Triangle& other)
	: Shape(Vector2(0, 0), other.color()),
	vertices_(new Vector2*[3])
 804ce33:	8b 45 08             	mov    0x8(%ebp),%eax
 804ce36:	89 04 24             	mov    %eax,(%esp)
 804ce39:	e8 e8 f6 ff ff       	call   804c526 <_ZN5ShapeD1Ev>
 804ce3e:	89 d8                	mov    %ebx,%eax
 804ce40:	89 04 24             	mov    %eax,(%esp)
 804ce43:	e8 88 c8 ff ff       	call   80496d0 <_Unwind_Resume@plt>
{
	this->vertices_[0] = new Vector2(other.vertex(0));
	this->vertices_[1] = new Vector2(other.vertex(1));
	this->vertices_[2] = new Vector2(other.vertex(2));
}
 804ce48:	8b 5d fc             	mov    -0x4(%ebp),%ebx
 804ce4b:	c9                   	leave  
 804ce4c:	c3                   	ret    
 804ce4d:	90                   	nop

0804ce4e <_ZN8TriangleD1Ev>:

Triangle::~Triangle()
 804ce4e:	55                   	push   %ebp
 804ce4f:	89 e5                	mov    %esp,%ebp
 804ce51:	83 ec 28             	sub    $0x28,%esp
 804ce54:	8b 45 08             	mov    0x8(%ebp),%eax
 804ce57:	c7 00 48 00 05 08    	movl   $0x8050048,(%eax)
{
	for (int i = 0; i < 3; i++)
 804ce5d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
 804ce64:	eb 30                	jmp    804ce96 <_ZN8TriangleD1Ev+0x48>
	{
		delete this->vertices_[i];
 804ce66:	8b 45 08             	mov    0x8(%ebp),%eax
 804ce69:	8b 40 18             	mov    0x18(%eax),%eax
 804ce6c:	8b 55 f4             	mov    -0xc(%ebp),%edx
 804ce6f:	c1 e2 02             	shl    $0x2,%edx
 804ce72:	01 d0                	add    %edx,%eax
 804ce74:	8b 00                	mov    (%eax),%eax
 804ce76:	89 04 24             	mov    %eax,(%esp)
 804ce79:	e8 c2 c4 ff ff       	call   8049340 <_ZdlPv@plt>
		this->vertices_[i] = NULL;
 804ce7e:	8b 45 08             	mov    0x8(%ebp),%eax
 804ce81:	8b 40 18             	mov    0x18(%eax),%eax
 804ce84:	8b 55 f4             	mov    -0xc(%ebp),%edx
 804ce87:	c1 e2 02             	shl    $0x2,%edx
 804ce8a:	01 d0                	add    %edx,%eax
 804ce8c:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	this->vertices_[2] = new Vector2(other.vertex(2));
}

Triangle::~Triangle()
{
	for (int i = 0; i < 3; i++)
 804ce92:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
 804ce96:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
 804ce9a:	7e ca                	jle    804ce66 <_ZN8TriangleD1Ev+0x18>
	{
		delete this->vertices_[i];
		this->vertices_[i] = NULL;
	}

	delete[] this->vertices_;
 804ce9c:	8b 45 08             	mov    0x8(%ebp),%eax
 804ce9f:	8b 40 18             	mov    0x18(%eax),%eax
 804cea2:	85 c0                	test   %eax,%eax
 804cea4:	74 0e                	je     804ceb4 <_ZN8TriangleD1Ev+0x66>
 804cea6:	8b 45 08             	mov    0x8(%ebp),%eax
 804cea9:	8b 40 18             	mov    0x18(%eax),%eax
 804ceac:	89 04 24             	mov    %eax,(%esp)
 804ceaf:	e8 fc c6 ff ff       	call   80495b0 <_ZdaPv@plt>
	this->vertices_ = NULL;
 804ceb4:	8b 45 08             	mov    0x8(%ebp),%eax
 804ceb7:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
	this->vertices_[0] = new Vector2(other.vertex(0));
	this->vertices_[1] = new Vector2(other.vertex(1));
	this->vertices_[2] = new Vector2(other.vertex(2));
}

Triangle::~Triangle()
 804cebe:	8b 45 08             	mov    0x8(%ebp),%eax
 804cec1:	89 04 24             	mov    %eax,(%esp)
 804cec4:	e8 5d f6 ff ff       	call   804c526 <_ZN5ShapeD1Ev>
		this->vertices_[i] = NULL;
	}

	delete[] this->vertices_;
	this->vertices_ = NULL;
}
 804cec9:	b8 00 00 00 00       	mov    $0x0,%eax
 804cece:	85 c0                	test   %eax,%eax
 804ced0:	74 0b                	je     804cedd <_ZN8TriangleD1Ev+0x8f>
 804ced2:	8b 45 08             	mov    0x8(%ebp),%eax
 804ced5:	89 04 24             	mov    %eax,(%esp)
 804ced8:	e8 63 c4 ff ff       	call   8049340 <_ZdlPv@plt>
 804cedd:	c9                   	leave  
 804cede:	c3                   	ret    
 804cedf:	90                   	nop

0804cee0 <_ZN8TriangleD0Ev>:
	this->vertices_[0] = new Vector2(other.vertex(0));
	this->vertices_[1] = new Vector2(other.vertex(1));
	this->vertices_[2] = new Vector2(other.vertex(2));
}

Triangle::~Triangle()
 804cee0:	55                   	push   %ebp
 804cee1:	89 e5                	mov    %esp,%ebp
 804cee3:	83 ec 18             	sub    $0x18,%esp
		this->vertices_[i] = NULL;
	}

	delete[] this->vertices_;
	this->vertices_ = NULL;
}
 804cee6:	8b 45 08             	mov    0x8(%ebp),%eax
 804cee9:	89 04 24             	mov    %eax,(%esp)
 804ceec:	e8 5d ff ff ff       	call   804ce4e <_ZN8TriangleD1Ev>
 804cef1:	8b 45 08             	mov    0x8(%ebp),%eax
 804cef4:	89 04 24             	mov    %eax,(%esp)
 804cef7:	e8 44 c4 ff ff       	call   8049340 <_ZdlPv@plt>
 804cefc:	c9                   	leave  
 804cefd:	c3                   	ret    

0804cefe <_ZN8TriangleaSERKS_>:

Triangle& Triangle::operator=(const Triangle& rhs)
{
 804cefe:	55                   	push   %ebp
 804ceff:	89 e5                	mov    %esp,%ebp
 804cf01:	53                   	push   %ebx
 804cf02:	83 ec 24             	sub    $0x24,%esp
	if (this == &rhs)
 804cf05:	8b 45 08             	mov    0x8(%ebp),%eax
 804cf08:	3b 45 0c             	cmp    0xc(%ebp),%eax
 804cf0b:	75 08                	jne    804cf15 <_ZN8TriangleaSERKS_+0x17>
	{
		return *this;
 804cf0d:	8b 45 08             	mov    0x8(%ebp),%eax
 804cf10:	e9 bd 00 00 00       	jmp    804cfd2 <_ZN8TriangleaSERKS_+0xd4>
	}

	*(this->vertices_[0]) = rhs.vertex(0);
 804cf15:	8b 45 08             	mov    0x8(%ebp),%eax
 804cf18:	8b 40 18             	mov    0x18(%eax),%eax
 804cf1b:	8b 18                	mov    (%eax),%ebx
 804cf1d:	8d 45 e8             	lea    -0x18(%ebp),%eax
 804cf20:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
 804cf27:	00 
 804cf28:	8b 55 0c             	mov    0xc(%ebp),%edx
 804cf2b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804cf2f:	89 04 24             	mov    %eax,(%esp)
 804cf32:	e8 a1 00 00 00       	call   804cfd8 <_ZNK8Triangle6vertexEi>
 804cf37:	83 ec 04             	sub    $0x4,%esp
 804cf3a:	8b 45 e8             	mov    -0x18(%ebp),%eax
 804cf3d:	89 03                	mov    %eax,(%ebx)
 804cf3f:	8b 45 ec             	mov    -0x14(%ebp),%eax
 804cf42:	89 43 04             	mov    %eax,0x4(%ebx)
 804cf45:	8b 45 f0             	mov    -0x10(%ebp),%eax
 804cf48:	89 43 08             	mov    %eax,0x8(%ebx)
 804cf4b:	8b 45 f4             	mov    -0xc(%ebp),%eax
 804cf4e:	89 43 0c             	mov    %eax,0xc(%ebx)
	*(this->vertices_[1]) = rhs.vertex(1);
 804cf51:	8b 45 08             	mov    0x8(%ebp),%eax
 804cf54:	8b 40 18             	mov    0x18(%eax),%eax
 804cf57:	83 c0 04             	add    $0x4,%eax
 804cf5a:	8b 18                	mov    (%eax),%ebx
 804cf5c:	8d 45 e8             	lea    -0x18(%ebp),%eax
 804cf5f:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
 804cf66:	00 
 804cf67:	8b 55 0c             	mov    0xc(%ebp),%edx
 804cf6a:	89 54 24 04          	mov    %edx,0x4(%esp)
 804cf6e:	89 04 24             	mov    %eax,(%esp)
 804cf71:	e8 62 00 00 00       	call   804cfd8 <_ZNK8Triangle6vertexEi>
 804cf76:	83 ec 04             	sub    $0x4,%esp
 804cf79:	8b 45 e8             	mov    -0x18(%ebp),%eax
 804cf7c:	89 03                	mov    %eax,(%ebx)
 804cf7e:	8b 45 ec             	mov    -0x14(%ebp),%eax
 804cf81:	89 43 04             	mov    %eax,0x4(%ebx)
 804cf84:	8b 45 f0             	mov    -0x10(%ebp),%eax
 804cf87:	89 43 08             	mov    %eax,0x8(%ebx)
 804cf8a:	8b 45 f4             	mov    -0xc(%ebp),%eax
 804cf8d:	89 43 0c             	mov    %eax,0xc(%ebx)
	*(this->vertices_[2]) = rhs.vertex(2);
 804cf90:	8b 45 08             	mov    0x8(%ebp),%eax
 804cf93:	8b 40 18             	mov    0x18(%eax),%eax
 804cf96:	83 c0 08             	add    $0x8,%eax
 804cf99:	8b 18                	mov    (%eax),%ebx
 804cf9b:	8d 45 e8             	lea    -0x18(%ebp),%eax
 804cf9e:	c7 44 24 08 02 00 00 	movl   $0x2,0x8(%esp)
 804cfa5:	00 
 804cfa6:	8b 55 0c             	mov    0xc(%ebp),%edx
 804cfa9:	89 54 24 04          	mov    %edx,0x4(%esp)
 804cfad:	89 04 24             	mov    %eax,(%esp)
 804cfb0:	e8 23 00 00 00       	call   804cfd8 <_ZNK8Triangle6vertexEi>
 804cfb5:	83 ec 04             	sub    $0x4,%esp
 804cfb8:	8b 45 e8             	mov    -0x18(%ebp),%eax
 804cfbb:	89 03                	mov    %eax,(%ebx)
 804cfbd:	8b 45 ec             	mov    -0x14(%ebp),%eax
 804cfc0:	89 43 04             	mov    %eax,0x4(%ebx)
 804cfc3:	8b 45 f0             	mov    -0x10(%ebp),%eax
 804cfc6:	89 43 08             	mov    %eax,0x8(%ebx)
 804cfc9:	8b 45 f4             	mov    -0xc(%ebp),%eax
 804cfcc:	89 43 0c             	mov    %eax,0xc(%ebx)

	return *this;
 804cfcf:	8b 45 08             	mov    0x8(%ebp),%eax
}
 804cfd2:	8b 5d fc             	mov    -0x4(%ebp),%ebx
 804cfd5:	c9                   	leave  
 804cfd6:	c3                   	ret    
 804cfd7:	90                   	nop

0804cfd8 <_ZNK8Triangle6vertexEi>:

Vector2 Triangle::vertex(int i) const
{
 804cfd8:	55                   	push   %ebp
 804cfd9:	89 e5                	mov    %esp,%ebp
 804cfdb:	83 ec 18             	sub    $0x18,%esp
	assert(i >= 0 && i <= 2);
 804cfde:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
 804cfe2:	78 06                	js     804cfea <_ZNK8Triangle6vertexEi+0x12>
 804cfe4:	83 7d 10 02          	cmpl   $0x2,0x10(%ebp)
 804cfe8:	7e 24                	jle    804d00e <_ZNK8Triangle6vertexEi+0x36>
 804cfea:	c7 44 24 0c c0 ff 04 	movl   $0x804ffc0,0xc(%esp)
 804cff1:	08 
 804cff2:	c7 44 24 08 44 00 00 	movl   $0x44,0x8(%esp)
 804cff9:	00 
 804cffa:	c7 44 24 04 a0 ff 04 	movl   $0x804ffa0,0x4(%esp)
 804d001:	08 
 804d002:	c7 04 24 ad ff 04 08 	movl   $0x804ffad,(%esp)
 804d009:	e8 d2 c3 ff ff       	call   80493e0 <__assert_fail@plt>
	return *(this->vertices_[i]);
 804d00e:	8b 45 0c             	mov    0xc(%ebp),%eax
 804d011:	8b 40 18             	mov    0x18(%eax),%eax
 804d014:	8b 55 10             	mov    0x10(%ebp),%edx
 804d017:	c1 e2 02             	shl    $0x2,%edx
 804d01a:	01 d0                	add    %edx,%eax
 804d01c:	8b 10                	mov    (%eax),%edx
 804d01e:	8b 45 08             	mov    0x8(%ebp),%eax
 804d021:	8b 0a                	mov    (%edx),%ecx
 804d023:	89 08                	mov    %ecx,(%eax)
 804d025:	8b 4a 04             	mov    0x4(%edx),%ecx
 804d028:	89 48 04             	mov    %ecx,0x4(%eax)
 804d02b:	8b 4a 08             	mov    0x8(%edx),%ecx
 804d02e:	89 48 08             	mov    %ecx,0x8(%eax)
 804d031:	8b 52 0c             	mov    0xc(%edx),%edx
 804d034:	89 50 0c             	mov    %edx,0xc(%eax)
}
 804d037:	8b 45 08             	mov    0x8(%ebp),%eax
 804d03a:	c9                   	leave  
 804d03b:	c2 04 00             	ret    $0x4

0804d03e <_ZN8Triangle10set_vertexEiRK7Vector2>:

void Triangle::set_vertex(int i, const Vector2& value)
{
 804d03e:	55                   	push   %ebp
 804d03f:	89 e5                	mov    %esp,%ebp
 804d041:	83 ec 18             	sub    $0x18,%esp
	assert(i >= 0 && i <= 2);
 804d044:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
 804d048:	78 06                	js     804d050 <_ZN8Triangle10set_vertexEiRK7Vector2+0x12>
 804d04a:	83 7d 0c 02          	cmpl   $0x2,0xc(%ebp)
 804d04e:	7e 24                	jle    804d074 <_ZN8Triangle10set_vertexEiRK7Vector2+0x36>
 804d050:	c7 44 24 0c 00 00 05 	movl   $0x8050000,0xc(%esp)
 804d057:	08 
 804d058:	c7 44 24 08 4a 00 00 	movl   $0x4a,0x8(%esp)
 804d05f:	00 
 804d060:	c7 44 24 04 a0 ff 04 	movl   $0x804ffa0,0x4(%esp)
 804d067:	08 
 804d068:	c7 04 24 ad ff 04 08 	movl   $0x804ffad,(%esp)
 804d06f:	e8 6c c3 ff ff       	call   80493e0 <__assert_fail@plt>
	*(this->vertices_[i]) = value;
 804d074:	8b 45 08             	mov    0x8(%ebp),%eax
 804d077:	8b 40 18             	mov    0x18(%eax),%eax
 804d07a:	8b 55 0c             	mov    0xc(%ebp),%edx
 804d07d:	c1 e2 02             	shl    $0x2,%edx
 804d080:	01 d0                	add    %edx,%eax
 804d082:	8b 00                	mov    (%eax),%eax
 804d084:	8b 55 10             	mov    0x10(%ebp),%edx
 804d087:	8b 0a                	mov    (%edx),%ecx
 804d089:	89 08                	mov    %ecx,(%eax)
 804d08b:	8b 4a 04             	mov    0x4(%edx),%ecx
 804d08e:	89 48 04             	mov    %ecx,0x4(%eax)
 804d091:	8b 4a 08             	mov    0x8(%edx),%ecx
 804d094:	89 48 08             	mov    %ecx,0x8(%eax)
 804d097:	8b 52 0c             	mov    0xc(%edx),%edx
 804d09a:	89 50 0c             	mov    %edx,0xc(%eax)
}
 804d09d:	c9                   	leave  
 804d09e:	c3                   	ret    
 804d09f:	90                   	nop

0804d0a0 <_ZNK8Triangle4areaEv>:

int Triangle::area() const
{
 804d0a0:	55                   	push   %ebp
 804d0a1:	89 e5                	mov    %esp,%ebp
 804d0a3:	83 ec 68             	sub    $0x68,%esp
	const Vector2 ab(this->vertex(0) - this->vertex(1));
 804d0a6:	8d 45 e8             	lea    -0x18(%ebp),%eax
 804d0a9:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
 804d0b0:	00 
 804d0b1:	8b 55 08             	mov    0x8(%ebp),%edx
 804d0b4:	89 54 24 04          	mov    %edx,0x4(%esp)
 804d0b8:	89 04 24             	mov    %eax,(%esp)
 804d0bb:	e8 18 ff ff ff       	call   804cfd8 <_ZNK8Triangle6vertexEi>
 804d0c0:	83 ec 04             	sub    $0x4,%esp
 804d0c3:	8d 45 d8             	lea    -0x28(%ebp),%eax
 804d0c6:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
 804d0cd:	00 
 804d0ce:	8b 55 08             	mov    0x8(%ebp),%edx
 804d0d1:	89 54 24 04          	mov    %edx,0x4(%esp)
 804d0d5:	89 04 24             	mov    %eax,(%esp)
 804d0d8:	e8 fb fe ff ff       	call   804cfd8 <_ZNK8Triangle6vertexEi>
 804d0dd:	83 ec 04             	sub    $0x4,%esp
 804d0e0:	8d 45 b8             	lea    -0x48(%ebp),%eax
 804d0e3:	8d 55 e8             	lea    -0x18(%ebp),%edx
 804d0e6:	89 54 24 08          	mov    %edx,0x8(%esp)
 804d0ea:	8d 55 d8             	lea    -0x28(%ebp),%edx
 804d0ed:	89 54 24 04          	mov    %edx,0x4(%esp)
 804d0f1:	89 04 24             	mov    %eax,(%esp)
 804d0f4:	e8 8d e4 ff ff       	call   804b586 <_ZNK7Vector2miERKS_>
 804d0f9:	83 ec 04             	sub    $0x4,%esp
	const Vector2 ac(this->vertex(0) - this->vertex(2));
 804d0fc:	8d 45 e8             	lea    -0x18(%ebp),%eax
 804d0ff:	c7 44 24 08 02 00 00 	movl   $0x2,0x8(%esp)
 804d106:	00 
 804d107:	8b 55 08             	mov    0x8(%ebp),%edx
 804d10a:	89 54 24 04          	mov    %edx,0x4(%esp)
 804d10e:	89 04 24             	mov    %eax,(%esp)
 804d111:	e8 c2 fe ff ff       	call   804cfd8 <_ZNK8Triangle6vertexEi>
 804d116:	83 ec 04             	sub    $0x4,%esp
 804d119:	8d 45 d8             	lea    -0x28(%ebp),%eax
 804d11c:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
 804d123:	00 
 804d124:	8b 55 08             	mov    0x8(%ebp),%edx
 804d127:	89 54 24 04          	mov    %edx,0x4(%esp)
 804d12b:	89 04 24             	mov    %eax,(%esp)
 804d12e:	e8 a5 fe ff ff       	call   804cfd8 <_ZNK8Triangle6vertexEi>
 804d133:	83 ec 04             	sub    $0x4,%esp
 804d136:	8d 45 c8             	lea    -0x38(%ebp),%eax
 804d139:	8d 55 e8             	lea    -0x18(%ebp),%edx
 804d13c:	89 54 24 08          	mov    %edx,0x8(%esp)
 804d140:	8d 55 d8             	lea    -0x28(%ebp),%edx
 804d143:	89 54 24 04          	mov    %edx,0x4(%esp)
 804d147:	89 04 24             	mov    %eax,(%esp)
 804d14a:	e8 37 e4 ff ff       	call   804b586 <_ZNK7Vector2miERKS_>
 804d14f:	83 ec 04             	sub    $0x4,%esp
	const int tarea = static_cast<int>(0.5 * ab.crossProduct(ab));
 804d152:	8d 45 b8             	lea    -0x48(%ebp),%eax
 804d155:	89 44 24 04          	mov    %eax,0x4(%esp)
 804d159:	8d 45 b8             	lea    -0x48(%ebp),%eax
 804d15c:	89 04 24             	mov    %eax,(%esp)
 804d15f:	e8 1e e6 ff ff       	call   804b782 <_ZNK7Vector212crossProductERKS_>
 804d164:	dd 05 30 00 05 08    	fldl   0x8050030
 804d16a:	de c9                	fmulp  %st,%st(1)
 804d16c:	d9 7d a6             	fnstcw -0x5a(%ebp)
 804d16f:	0f b7 45 a6          	movzwl -0x5a(%ebp),%eax
 804d173:	b4 0c                	mov    $0xc,%ah
 804d175:	66 89 45 a4          	mov    %ax,-0x5c(%ebp)
 804d179:	d9 6d a4             	fldcw  -0x5c(%ebp)
 804d17c:	db 5d b4             	fistpl -0x4c(%ebp)
 804d17f:	d9 6d a6             	fldcw  -0x5a(%ebp)
	return tarea;
 804d182:	8b 45 b4             	mov    -0x4c(%ebp),%eax
}
 804d185:	c9                   	leave  
 804d186:	c3                   	ret    
 804d187:	90                   	nop

0804d188 <_ZNK8Triangle9perimeterEv>:

int Triangle::perimeter() const
{
 804d188:	55                   	push   %ebp
 804d189:	89 e5                	mov    %esp,%ebp
 804d18b:	81 ec 98 00 00 00    	sub    $0x98,%esp
	const double distance = (this->vertex(0).distanceTo(this->vertex(1)) +
 804d191:	8d 45 a8             	lea    -0x58(%ebp),%eax
 804d194:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
 804d19b:	00 
 804d19c:	8b 55 08             	mov    0x8(%ebp),%edx
 804d19f:	89 54 24 04          	mov    %edx,0x4(%esp)
 804d1a3:	89 04 24             	mov    %eax,(%esp)
 804d1a6:	e8 2d fe ff ff       	call   804cfd8 <_ZNK8Triangle6vertexEi>
 804d1ab:	83 ec 04             	sub    $0x4,%esp
 804d1ae:	8d 45 98             	lea    -0x68(%ebp),%eax
 804d1b1:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
 804d1b8:	00 
 804d1b9:	8b 55 08             	mov    0x8(%ebp),%edx
 804d1bc:	89 54 24 04          	mov    %edx,0x4(%esp)
 804d1c0:	89 04 24             	mov    %eax,(%esp)
 804d1c3:	e8 10 fe ff ff       	call   804cfd8 <_ZNK8Triangle6vertexEi>
 804d1c8:	83 ec 04             	sub    $0x4,%esp
 804d1cb:	8d 45 a8             	lea    -0x58(%ebp),%eax
 804d1ce:	89 44 24 04          	mov    %eax,0x4(%esp)
 804d1d2:	8d 45 98             	lea    -0x68(%ebp),%eax
 804d1d5:	89 04 24             	mov    %eax,(%esp)
 804d1d8:	e8 f1 e4 ff ff       	call   804b6ce <_ZNK7Vector210distanceToERKS_>
 804d1dd:	dd 9d 78 ff ff ff    	fstpl  -0x88(%ebp)
			this->vertex(1).distanceTo(this->vertex(2)) +
 804d1e3:	8d 45 c8             	lea    -0x38(%ebp),%eax
 804d1e6:	c7 44 24 08 02 00 00 	movl   $0x2,0x8(%esp)
 804d1ed:	00 
 804d1ee:	8b 55 08             	mov    0x8(%ebp),%edx
 804d1f1:	89 54 24 04          	mov    %edx,0x4(%esp)
 804d1f5:	89 04 24             	mov    %eax,(%esp)
 804d1f8:	e8 db fd ff ff       	call   804cfd8 <_ZNK8Triangle6vertexEi>
 804d1fd:	83 ec 04             	sub    $0x4,%esp
 804d200:	8d 45 b8             	lea    -0x48(%ebp),%eax
 804d203:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
 804d20a:	00 
 804d20b:	8b 55 08             	mov    0x8(%ebp),%edx
 804d20e:	89 54 24 04          	mov    %edx,0x4(%esp)
 804d212:	89 04 24             	mov    %eax,(%esp)
 804d215:	e8 be fd ff ff       	call   804cfd8 <_ZNK8Triangle6vertexEi>
 804d21a:	83 ec 04             	sub    $0x4,%esp
 804d21d:	8d 45 c8             	lea    -0x38(%ebp),%eax
 804d220:	89 44 24 04          	mov    %eax,0x4(%esp)
 804d224:	8d 45 b8             	lea    -0x48(%ebp),%eax
 804d227:	89 04 24             	mov    %eax,(%esp)
 804d22a:	e8 9f e4 ff ff       	call   804b6ce <_ZNK7Vector210distanceToERKS_>
	return tarea;
}

int Triangle::perimeter() const
{
	const double distance = (this->vertex(0).distanceTo(this->vertex(1)) +
 804d22f:	dc 85 78 ff ff ff    	faddl  -0x88(%ebp)
 804d235:	dd 9d 78 ff ff ff    	fstpl  -0x88(%ebp)
			this->vertex(1).distanceTo(this->vertex(2)) +
			this->vertex(2).distanceTo(this->vertex(0)));
 804d23b:	8d 45 e8             	lea    -0x18(%ebp),%eax
 804d23e:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
 804d245:	00 
 804d246:	8b 55 08             	mov    0x8(%ebp),%edx
 804d249:	89 54 24 04          	mov    %edx,0x4(%esp)
 804d24d:	89 04 24             	mov    %eax,(%esp)
 804d250:	e8 83 fd ff ff       	call   804cfd8 <_ZNK8Triangle6vertexEi>
 804d255:	83 ec 04             	sub    $0x4,%esp
 804d258:	8d 45 d8             	lea    -0x28(%ebp),%eax
 804d25b:	c7 44 24 08 02 00 00 	movl   $0x2,0x8(%esp)
 804d262:	00 
 804d263:	8b 55 08             	mov    0x8(%ebp),%edx
 804d266:	89 54 24 04          	mov    %edx,0x4(%esp)
 804d26a:	89 04 24             	mov    %eax,(%esp)
 804d26d:	e8 66 fd ff ff       	call   804cfd8 <_ZNK8Triangle6vertexEi>
 804d272:	83 ec 04             	sub    $0x4,%esp
 804d275:	8d 45 e8             	lea    -0x18(%ebp),%eax
 804d278:	89 44 24 04          	mov    %eax,0x4(%esp)
 804d27c:	8d 45 d8             	lea    -0x28(%ebp),%eax
 804d27f:	89 04 24             	mov    %eax,(%esp)
 804d282:	e8 47 e4 ff ff       	call   804b6ce <_ZNK7Vector210distanceToERKS_>
 804d287:	dc 85 78 ff ff ff    	faddl  -0x88(%ebp)
 804d28d:	dd 5d 90             	fstpl  -0x70(%ebp)
	return static_cast<int>(distance);
 804d290:	dd 45 90             	fldl   -0x70(%ebp)
 804d293:	d9 7d 86             	fnstcw -0x7a(%ebp)
 804d296:	0f b7 45 86          	movzwl -0x7a(%ebp),%eax
 804d29a:	b4 0c                	mov    $0xc,%ah
 804d29c:	66 89 45 84          	mov    %ax,-0x7c(%ebp)
 804d2a0:	d9 6d 84             	fldcw  -0x7c(%ebp)
 804d2a3:	db 5d 80             	fistpl -0x80(%ebp)
 804d2a6:	d9 6d 86             	fldcw  -0x7a(%ebp)
 804d2a9:	8b 45 80             	mov    -0x80(%ebp),%eax
}
 804d2ac:	c9                   	leave  
 804d2ad:	c3                   	ret    

0804d2ae <_ZNK8Triangle8containsERK7Vector2>:

bool Triangle::contains(const Vector2& p) const
{
 804d2ae:	55                   	push   %ebp
 804d2af:	89 e5                	mov    %esp,%ebp
 804d2b1:	81 ec c8 00 00 00    	sub    $0xc8,%esp
	/* Code taken from http://www.blackpawn.com/texts/pointinpoly/default.html */
	const Vector2& a = this->vertex(0);
 804d2b7:	8d 45 98             	lea    -0x68(%ebp),%eax
 804d2ba:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
 804d2c1:	00 
 804d2c2:	8b 55 08             	mov    0x8(%ebp),%edx
 804d2c5:	89 54 24 04          	mov    %edx,0x4(%esp)
 804d2c9:	89 04 24             	mov    %eax,(%esp)
 804d2cc:	e8 07 fd ff ff       	call   804cfd8 <_ZNK8Triangle6vertexEi>
 804d2d1:	83 ec 04             	sub    $0x4,%esp
 804d2d4:	8d 45 98             	lea    -0x68(%ebp),%eax
 804d2d7:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
	const Vector2& b = this->vertex(1);
 804d2dd:	8d 45 a8             	lea    -0x58(%ebp),%eax
 804d2e0:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
 804d2e7:	00 
 804d2e8:	8b 55 08             	mov    0x8(%ebp),%edx
 804d2eb:	89 54 24 04          	mov    %edx,0x4(%esp)
 804d2ef:	89 04 24             	mov    %eax,(%esp)
 804d2f2:	e8 e1 fc ff ff       	call   804cfd8 <_ZNK8Triangle6vertexEi>
 804d2f7:	83 ec 04             	sub    $0x4,%esp
 804d2fa:	8d 45 a8             	lea    -0x58(%ebp),%eax
 804d2fd:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
	const Vector2& c = this->vertex(2);
 804d303:	8d 45 b8             	lea    -0x48(%ebp),%eax
 804d306:	c7 44 24 08 02 00 00 	movl   $0x2,0x8(%esp)
 804d30d:	00 
 804d30e:	8b 55 08             	mov    0x8(%ebp),%edx
 804d311:	89 54 24 04          	mov    %edx,0x4(%esp)
 804d315:	89 04 24             	mov    %eax,(%esp)
 804d318:	e8 bb fc ff ff       	call   804cfd8 <_ZNK8Triangle6vertexEi>
 804d31d:	83 ec 04             	sub    $0x4,%esp
 804d320:	8d 45 b8             	lea    -0x48(%ebp),%eax
 804d323:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
	const Vector2 v0 = c - a;
 804d329:	8d 45 c8             	lea    -0x38(%ebp),%eax
 804d32c:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
 804d332:	89 54 24 08          	mov    %edx,0x8(%esp)
 804d336:	8b 95 54 ff ff ff    	mov    -0xac(%ebp),%edx
 804d33c:	89 54 24 04          	mov    %edx,0x4(%esp)
 804d340:	89 04 24             	mov    %eax,(%esp)
 804d343:	e8 3e e2 ff ff       	call   804b586 <_ZNK7Vector2miERKS_>
 804d348:	83 ec 04             	sub    $0x4,%esp
	const Vector2 v1 = b - a;
 804d34b:	8d 45 d8             	lea    -0x28(%ebp),%eax
 804d34e:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
 804d354:	89 54 24 08          	mov    %edx,0x8(%esp)
 804d358:	8b 95 50 ff ff ff    	mov    -0xb0(%ebp),%edx
 804d35e:	89 54 24 04          	mov    %edx,0x4(%esp)
 804d362:	89 04 24             	mov    %eax,(%esp)
 804d365:	e8 1c e2 ff ff       	call   804b586 <_ZNK7Vector2miERKS_>
 804d36a:	83 ec 04             	sub    $0x4,%esp
	const Vector2 v2 = p - a;
 804d36d:	8d 45 e8             	lea    -0x18(%ebp),%eax
 804d370:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
 804d376:	89 54 24 08          	mov    %edx,0x8(%esp)
 804d37a:	8b 55 0c             	mov    0xc(%ebp),%edx
 804d37d:	89 54 24 04          	mov    %edx,0x4(%esp)
 804d381:	89 04 24             	mov    %eax,(%esp)
 804d384:	e8 fd e1 ff ff       	call   804b586 <_ZNK7Vector2miERKS_>
 804d389:	83 ec 04             	sub    $0x4,%esp

	const double dot00 = v0.dotProduct(v0);
 804d38c:	8d 45 c8             	lea    -0x38(%ebp),%eax
 804d38f:	89 44 24 04          	mov    %eax,0x4(%esp)
 804d393:	8d 45 c8             	lea    -0x38(%ebp),%eax
 804d396:	89 04 24             	mov    %eax,(%esp)
 804d399:	e8 98 e3 ff ff       	call   804b736 <_ZNK7Vector210dotProductERKS_>
 804d39e:	dd 9d 58 ff ff ff    	fstpl  -0xa8(%ebp)
	const double dot01 = v0.dotProduct(v1);
 804d3a4:	8d 45 d8             	lea    -0x28(%ebp),%eax
 804d3a7:	89 44 24 04          	mov    %eax,0x4(%esp)
 804d3ab:	8d 45 c8             	lea    -0x38(%ebp),%eax
 804d3ae:	89 04 24             	mov    %eax,(%esp)
 804d3b1:	e8 80 e3 ff ff       	call   804b736 <_ZNK7Vector210dotProductERKS_>
 804d3b6:	dd 9d 60 ff ff ff    	fstpl  -0xa0(%ebp)
	const double dot02 = v0.dotProduct(v2);
 804d3bc:	8d 45 e8             	lea    -0x18(%ebp),%eax
 804d3bf:	89 44 24 04          	mov    %eax,0x4(%esp)
 804d3c3:	8d 45 c8             	lea    -0x38(%ebp),%eax
 804d3c6:	89 04 24             	mov    %eax,(%esp)
 804d3c9:	e8 68 e3 ff ff       	call   804b736 <_ZNK7Vector210dotProductERKS_>
 804d3ce:	dd 9d 68 ff ff ff    	fstpl  -0x98(%ebp)
	const double dot11 = v1.dotProduct(v1);
 804d3d4:	8d 45 d8             	lea    -0x28(%ebp),%eax
 804d3d7:	89 44 24 04          	mov    %eax,0x4(%esp)
 804d3db:	8d 45 d8             	lea    -0x28(%ebp),%eax
 804d3de:	89 04 24             	mov    %eax,(%esp)
 804d3e1:	e8 50 e3 ff ff       	call   804b736 <_ZNK7Vector210dotProductERKS_>
 804d3e6:	dd 9d 70 ff ff ff    	fstpl  -0x90(%ebp)
	const double dot12 = v1.dotProduct(v2);
 804d3ec:	8d 45 e8             	lea    -0x18(%ebp),%eax
 804d3ef:	89 44 24 04          	mov    %eax,0x4(%esp)
 804d3f3:	8d 45 d8             	lea    -0x28(%ebp),%eax
 804d3f6:	89 04 24             	mov    %eax,(%esp)
 804d3f9:	e8 38 e3 ff ff       	call   804b736 <_ZNK7Vector210dotProductERKS_>
 804d3fe:	dd 9d 78 ff ff ff    	fstpl  -0x88(%ebp)

	const double inv_denom = 1 / (dot00 * dot11 - dot01 * dot01);
 804d404:	dd 85 58 ff ff ff    	fldl   -0xa8(%ebp)
 804d40a:	dc 8d 70 ff ff ff    	fmull  -0x90(%ebp)
 804d410:	dd 85 60 ff ff ff    	fldl   -0xa0(%ebp)
 804d416:	dc 8d 60 ff ff ff    	fmull  -0xa0(%ebp)
 804d41c:	de e9                	fsubrp %st,%st(1)
 804d41e:	d9 e8                	fld1   
 804d420:	de f1                	fdivp  %st,%st(1)
 804d422:	dd 5d 80             	fstpl  -0x80(%ebp)
	const double u = (dot11 * dot02 - dot01 * dot12) * inv_denom;
 804d425:	dd 85 70 ff ff ff    	fldl   -0x90(%ebp)
 804d42b:	dc 8d 68 ff ff ff    	fmull  -0x98(%ebp)
 804d431:	dd 85 60 ff ff ff    	fldl   -0xa0(%ebp)
 804d437:	dc 8d 78 ff ff ff    	fmull  -0x88(%ebp)
 804d43d:	de e9                	fsubrp %st,%st(1)
 804d43f:	dc 4d 80             	fmull  -0x80(%ebp)
 804d442:	dd 5d 88             	fstpl  -0x78(%ebp)
	const double v = (dot00 * dot12 - dot01 * dot02) * inv_denom;
 804d445:	dd 85 58 ff ff ff    	fldl   -0xa8(%ebp)
 804d44b:	dc 8d 78 ff ff ff    	fmull  -0x88(%ebp)
 804d451:	dd 85 60 ff ff ff    	fldl   -0xa0(%ebp)
 804d457:	dc 8d 68 ff ff ff    	fmull  -0x98(%ebp)
 804d45d:	de e9                	fsubrp %st,%st(1)
 804d45f:	dc 4d 80             	fmull  -0x80(%ebp)
 804d462:	dd 5d 90             	fstpl  -0x70(%ebp)

	return (u > 0) && (v > 0) && (u + v < 1);
 804d465:	dd 45 88             	fldl   -0x78(%ebp)
 804d468:	d9 ee                	fldz   
 804d46a:	d9 c9                	fxch   %st(1)
 804d46c:	df e9                	fucomip %st(1),%st
 804d46e:	dd d8                	fstp   %st(0)
 804d470:	76 22                	jbe    804d494 <_ZNK8Triangle8containsERK7Vector2+0x1e6>
 804d472:	dd 45 90             	fldl   -0x70(%ebp)
 804d475:	d9 ee                	fldz   
 804d477:	d9 c9                	fxch   %st(1)
 804d479:	df e9                	fucomip %st(1),%st
 804d47b:	dd d8                	fstp   %st(0)
 804d47d:	76 15                	jbe    804d494 <_ZNK8Triangle8containsERK7Vector2+0x1e6>
 804d47f:	dd 45 88             	fldl   -0x78(%ebp)
 804d482:	dc 45 90             	faddl  -0x70(%ebp)
 804d485:	d9 e8                	fld1   
 804d487:	df e9                	fucomip %st(1),%st
 804d489:	dd d8                	fstp   %st(0)
 804d48b:	76 07                	jbe    804d494 <_ZNK8Triangle8containsERK7Vector2+0x1e6>
 804d48d:	b8 01 00 00 00       	mov    $0x1,%eax
 804d492:	eb 05                	jmp    804d499 <_ZNK8Triangle8containsERK7Vector2+0x1eb>
 804d494:	b8 00 00 00 00       	mov    $0x0,%eax
}
 804d499:	c9                   	leave  
 804d49a:	c3                   	ret    
 804d49b:	90                   	nop

0804d49c <_ZNK8Triangle4drawEP3PNG>:

void Triangle::draw(PNG* canvas) const
{
 804d49c:	55                   	push   %ebp
 804d49d:	89 e5                	mov    %esp,%ebp
 804d49f:	53                   	push   %ebx
 804d4a0:	81 ec f4 00 00 00    	sub    $0xf4,%esp
	/* Code taken from
	 * http://gabrielongraphics.blogspot.com/2005/09/drawing-triangles.html */
	const Vector2 a = this->vertex(0);
 804d4a6:	8d 45 80             	lea    -0x80(%ebp),%eax
 804d4a9:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
 804d4b0:	00 
 804d4b1:	8b 55 08             	mov    0x8(%ebp),%edx
 804d4b4:	89 54 24 04          	mov    %edx,0x4(%esp)
 804d4b8:	89 04 24             	mov    %eax,(%esp)
 804d4bb:	e8 18 fb ff ff       	call   804cfd8 <_ZNK8Triangle6vertexEi>
 804d4c0:	83 ec 04             	sub    $0x4,%esp
	const Vector2 b = this->vertex(1);
 804d4c3:	8d 45 90             	lea    -0x70(%ebp),%eax
 804d4c6:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
 804d4cd:	00 
 804d4ce:	8b 55 08             	mov    0x8(%ebp),%edx
 804d4d1:	89 54 24 04          	mov    %edx,0x4(%esp)
 804d4d5:	89 04 24             	mov    %eax,(%esp)
 804d4d8:	e8 fb fa ff ff       	call   804cfd8 <_ZNK8Triangle6vertexEi>
 804d4dd:	83 ec 04             	sub    $0x4,%esp
	const Vector2 c = this->vertex(2);
 804d4e0:	8d 45 a0             	lea    -0x60(%ebp),%eax
 804d4e3:	c7 44 24 08 02 00 00 	movl   $0x2,0x8(%esp)
 804d4ea:	00 
 804d4eb:	8b 55 08             	mov    0x8(%ebp),%edx
 804d4ee:	89 54 24 04          	mov    %edx,0x4(%esp)
 804d4f2:	89 04 24             	mov    %eax,(%esp)
 804d4f5:	e8 de fa ff ff       	call   804cfd8 <_ZNK8Triangle6vertexEi>
 804d4fa:	83 ec 04             	sub    $0x4,%esp
	const Vector2* small = &a;
 804d4fd:	8d 45 80             	lea    -0x80(%ebp),%eax
 804d500:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
	const Vector2* medium = &b;
 804d506:	8d 45 90             	lea    -0x70(%ebp),%eax
 804d509:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
	const Vector2* large = &c;
 804d50f:	8d 45 a0             	lea    -0x60(%ebp),%eax
 804d512:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
	const Vector2* temp;

	if (small->isSouthOf(*medium))
 804d518:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
 804d51e:	89 44 24 04          	mov    %eax,0x4(%esp)
 804d522:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
 804d528:	89 04 24             	mov    %eax,(%esp)
 804d52b:	e8 0c e5 ff ff       	call   804ba3c <_ZNK7Vector29isSouthOfERKS_>
 804d530:	84 c0                	test   %al,%al
 804d532:	74 24                	je     804d558 <_ZNK8Triangle4drawEP3PNG+0xbc>
	{
		temp = small;
 804d534:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
 804d53a:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
		small = medium;
 804d540:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
 804d546:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
		medium = temp;
 804d54c:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
 804d552:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
	}

	if (small->isSouthOf(*large))
 804d558:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
 804d55e:	89 44 24 04          	mov    %eax,0x4(%esp)
 804d562:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
 804d568:	89 04 24             	mov    %eax,(%esp)
 804d56b:	e8 cc e4 ff ff       	call   804ba3c <_ZNK7Vector29isSouthOfERKS_>
 804d570:	84 c0                	test   %al,%al
 804d572:	74 24                	je     804d598 <_ZNK8Triangle4drawEP3PNG+0xfc>
	{
		temp = small;
 804d574:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
 804d57a:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
		small = large;
 804d580:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
 804d586:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
		large = temp;
 804d58c:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
 804d592:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
	}

	if (medium->isSouthOf(*large))
 804d598:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
 804d59e:	89 44 24 04          	mov    %eax,0x4(%esp)
 804d5a2:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
 804d5a8:	89 04 24             	mov    %eax,(%esp)
 804d5ab:	e8 8c e4 ff ff       	call   804ba3c <_ZNK7Vector29isSouthOfERKS_>
 804d5b0:	84 c0                	test   %al,%al
 804d5b2:	74 24                	je     804d5d8 <_ZNK8Triangle4drawEP3PNG+0x13c>
	{
		temp = medium;
 804d5b4:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
 804d5ba:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
		medium = large;
 804d5c0:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
 804d5c6:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		large = temp;
 804d5cc:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
 804d5d2:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
	}

	vector<double> x_small_medium =
		Line::linearInterpolation(Vector2(small->y(), small->x()),
				Vector2(medium->y(), medium->x()));
 804d5d8:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
 804d5de:	89 04 24             	mov    %eax,(%esp)
 804d5e1:	e8 58 e3 ff ff       	call   804b93e <_ZNK7Vector21xEv>
 804d5e6:	dd 9d 28 ff ff ff    	fstpl  -0xd8(%ebp)
 804d5ec:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
 804d5f2:	89 04 24             	mov    %eax,(%esp)
 804d5f5:	e8 6a e3 ff ff       	call   804b964 <_ZNK7Vector21yEv>
 804d5fa:	dd 85 28 ff ff ff    	fldl   -0xd8(%ebp)
 804d600:	dd 5c 24 0c          	fstpl  0xc(%esp)
 804d604:	dd 5c 24 04          	fstpl  0x4(%esp)
 804d608:	8d 45 d0             	lea    -0x30(%ebp),%eax
 804d60b:	89 04 24             	mov    %eax,(%esp)
 804d60e:	e8 41 df ff ff       	call   804b554 <_ZN7Vector2C1Edd>
 804d613:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
 804d619:	89 04 24             	mov    %eax,(%esp)
 804d61c:	e8 1d e3 ff ff       	call   804b93e <_ZNK7Vector21xEv>
 804d621:	dd 9d 28 ff ff ff    	fstpl  -0xd8(%ebp)
 804d627:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
 804d62d:	89 04 24             	mov    %eax,(%esp)
 804d630:	e8 2f e3 ff ff       	call   804b964 <_ZNK7Vector21yEv>
 804d635:	dd 85 28 ff ff ff    	fldl   -0xd8(%ebp)
 804d63b:	dd 5c 24 0c          	fstpl  0xc(%esp)
 804d63f:	dd 5c 24 04          	fstpl  0x4(%esp)
 804d643:	8d 45 c0             	lea    -0x40(%ebp),%eax
 804d646:	89 04 24             	mov    %eax,(%esp)
 804d649:	e8 06 df ff ff       	call   804b554 <_ZN7Vector2C1Edd>
 804d64e:	8d 85 5c ff ff ff    	lea    -0xa4(%ebp),%eax
 804d654:	8d 55 d0             	lea    -0x30(%ebp),%edx
 804d657:	89 54 24 08          	mov    %edx,0x8(%esp)
 804d65b:	8d 55 c0             	lea    -0x40(%ebp),%edx
 804d65e:	89 54 24 04          	mov    %edx,0x4(%esp)
 804d662:	89 04 24             	mov    %eax,(%esp)
 804d665:	e8 a0 15 00 00       	call   804ec0a <_ZN4Line19linearInterpolationERK7Vector2S2_>
 804d66a:	83 ec 04             	sub    $0x4,%esp
	vector<double> x_medium_large =
		Line::linearInterpolation(Vector2(medium->y(), medium->x()),
				Vector2(large->y(), large->x()));
 804d66d:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
 804d673:	89 04 24             	mov    %eax,(%esp)
 804d676:	e8 c3 e2 ff ff       	call   804b93e <_ZNK7Vector21xEv>
 804d67b:	dd 9d 28 ff ff ff    	fstpl  -0xd8(%ebp)
 804d681:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
 804d687:	89 04 24             	mov    %eax,(%esp)
 804d68a:	e8 d5 e2 ff ff       	call   804b964 <_ZNK7Vector21yEv>
 804d68f:	dd 85 28 ff ff ff    	fldl   -0xd8(%ebp)
 804d695:	dd 5c 24 0c          	fstpl  0xc(%esp)
 804d699:	dd 5c 24 04          	fstpl  0x4(%esp)
 804d69d:	8d 45 d0             	lea    -0x30(%ebp),%eax
 804d6a0:	89 04 24             	mov    %eax,(%esp)
 804d6a3:	e8 ac de ff ff       	call   804b554 <_ZN7Vector2C1Edd>
 804d6a8:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
 804d6ae:	89 04 24             	mov    %eax,(%esp)
 804d6b1:	e8 88 e2 ff ff       	call   804b93e <_ZNK7Vector21xEv>
 804d6b6:	dd 9d 28 ff ff ff    	fstpl  -0xd8(%ebp)
 804d6bc:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
 804d6c2:	89 04 24             	mov    %eax,(%esp)
 804d6c5:	e8 9a e2 ff ff       	call   804b964 <_ZNK7Vector21yEv>
 804d6ca:	dd 85 28 ff ff ff    	fldl   -0xd8(%ebp)
 804d6d0:	dd 5c 24 0c          	fstpl  0xc(%esp)
 804d6d4:	dd 5c 24 04          	fstpl  0x4(%esp)
 804d6d8:	8d 45 c0             	lea    -0x40(%ebp),%eax
 804d6db:	89 04 24             	mov    %eax,(%esp)
 804d6de:	e8 71 de ff ff       	call   804b554 <_ZN7Vector2C1Edd>
 804d6e3:	8d 85 68 ff ff ff    	lea    -0x98(%ebp),%eax
 804d6e9:	8d 55 d0             	lea    -0x30(%ebp),%edx
 804d6ec:	89 54 24 08          	mov    %edx,0x8(%esp)
 804d6f0:	8d 55 c0             	lea    -0x40(%ebp),%edx
 804d6f3:	89 54 24 04          	mov    %edx,0x4(%esp)
 804d6f7:	89 04 24             	mov    %eax,(%esp)
 804d6fa:	e8 0b 15 00 00       	call   804ec0a <_ZN4Line19linearInterpolationERK7Vector2S2_>
 804d6ff:	83 ec 04             	sub    $0x4,%esp
	vector<double> x_small_large =
		Line::linearInterpolation(Vector2(small->y(), small->x()),
				Vector2(large->y(), large->x()));
 804d702:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
 804d708:	89 04 24             	mov    %eax,(%esp)
 804d70b:	e8 2e e2 ff ff       	call   804b93e <_ZNK7Vector21xEv>
 804d710:	dd 9d 28 ff ff ff    	fstpl  -0xd8(%ebp)
 804d716:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
 804d71c:	89 04 24             	mov    %eax,(%esp)
 804d71f:	e8 40 e2 ff ff       	call   804b964 <_ZNK7Vector21yEv>
 804d724:	dd 85 28 ff ff ff    	fldl   -0xd8(%ebp)
 804d72a:	dd 5c 24 0c          	fstpl  0xc(%esp)
 804d72e:	dd 5c 24 04          	fstpl  0x4(%esp)
 804d732:	8d 45 d0             	lea    -0x30(%ebp),%eax
 804d735:	89 04 24             	mov    %eax,(%esp)
 804d738:	e8 17 de ff ff       	call   804b554 <_ZN7Vector2C1Edd>
 804d73d:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
 804d743:	89 04 24             	mov    %eax,(%esp)
 804d746:	e8 f3 e1 ff ff       	call   804b93e <_ZNK7Vector21xEv>
 804d74b:	dd 9d 28 ff ff ff    	fstpl  -0xd8(%ebp)
 804d751:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
 804d757:	89 04 24             	mov    %eax,(%esp)
 804d75a:	e8 05 e2 ff ff       	call   804b964 <_ZNK7Vector21yEv>
 804d75f:	dd 85 28 ff ff ff    	fldl   -0xd8(%ebp)
 804d765:	dd 5c 24 0c          	fstpl  0xc(%esp)
 804d769:	dd 5c 24 04          	fstpl  0x4(%esp)
 804d76d:	8d 45 c0             	lea    -0x40(%ebp),%eax
 804d770:	89 04 24             	mov    %eax,(%esp)
 804d773:	e8 dc dd ff ff       	call   804b554 <_ZN7Vector2C1Edd>
 804d778:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
 804d77e:	8d 55 d0             	lea    -0x30(%ebp),%edx
 804d781:	89 54 24 08          	mov    %edx,0x8(%esp)
 804d785:	8d 55 c0             	lea    -0x40(%ebp),%edx
 804d788:	89 54 24 04          	mov    %edx,0x4(%esp)
 804d78c:	89 04 24             	mov    %eax,(%esp)
 804d78f:	e8 76 14 00 00       	call   804ec0a <_ZN4Line19linearInterpolationERK7Vector2S2_>
 804d794:	83 ec 04             	sub    $0x4,%esp

	for (int y = static_cast<int>(small->y()); y < static_cast<int>(medium->y()); y++)
 804d797:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
 804d79d:	89 04 24             	mov    %eax,(%esp)
 804d7a0:	e8 bf e1 ff ff       	call   804b964 <_ZNK7Vector21yEv>
 804d7a5:	d9 bd 36 ff ff ff    	fnstcw -0xca(%ebp)
 804d7ab:	0f b7 85 36 ff ff ff 	movzwl -0xca(%ebp),%eax
 804d7b2:	b4 0c                	mov    $0xc,%ah
 804d7b4:	66 89 85 34 ff ff ff 	mov    %ax,-0xcc(%ebp)
 804d7bb:	d9 ad 34 ff ff ff    	fldcw  -0xcc(%ebp)
 804d7c1:	db 9d 4c ff ff ff    	fistpl -0xb4(%ebp)
 804d7c7:	d9 ad 36 ff ff ff    	fldcw  -0xca(%ebp)
 804d7cd:	e9 6d 01 00 00       	jmp    804d93f <_ZNK8Triangle4drawEP3PNG+0x4a3>
	{
		const Vector2 p(x_small_medium[static_cast<int>(y - small->y())], static_cast<double>(y));
 804d7d2:	db 85 4c ff ff ff    	fildl  -0xb4(%ebp)
 804d7d8:	dd 9d 28 ff ff ff    	fstpl  -0xd8(%ebp)
 804d7de:	db 85 4c ff ff ff    	fildl  -0xb4(%ebp)
 804d7e4:	dd 9d 20 ff ff ff    	fstpl  -0xe0(%ebp)
 804d7ea:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
 804d7f0:	89 04 24             	mov    %eax,(%esp)
 804d7f3:	e8 6c e1 ff ff       	call   804b964 <_ZNK7Vector21yEv>
 804d7f8:	dc ad 20 ff ff ff    	fsubrl -0xe0(%ebp)
 804d7fe:	d9 bd 36 ff ff ff    	fnstcw -0xca(%ebp)
 804d804:	0f b7 85 36 ff ff ff 	movzwl -0xca(%ebp),%eax
 804d80b:	b4 0c                	mov    $0xc,%ah
 804d80d:	66 89 85 34 ff ff ff 	mov    %ax,-0xcc(%ebp)
 804d814:	d9 ad 34 ff ff ff    	fldcw  -0xcc(%ebp)
 804d81a:	db 9d 30 ff ff ff    	fistpl -0xd0(%ebp)
 804d820:	d9 ad 36 ff ff ff    	fldcw  -0xca(%ebp)
 804d826:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
 804d82c:	89 44 24 04          	mov    %eax,0x4(%esp)
 804d830:	8d 85 5c ff ff ff    	lea    -0xa4(%ebp),%eax
 804d836:	89 04 24             	mov    %eax,(%esp)
 804d839:	e8 c8 05 00 00       	call   804de06 <_ZNSt6vectorIdSaIdEEixEj>
 804d83e:	dd 00                	fldl   (%eax)
 804d840:	dd 85 28 ff ff ff    	fldl   -0xd8(%ebp)
 804d846:	dd 5c 24 0c          	fstpl  0xc(%esp)
 804d84a:	dd 5c 24 04          	fstpl  0x4(%esp)
 804d84e:	8d 45 b0             	lea    -0x50(%ebp),%eax
 804d851:	89 04 24             	mov    %eax,(%esp)
 804d854:	e8 fb dc ff ff       	call   804b554 <_ZN7Vector2C1Edd>
		const Vector2 q(x_small_large[static_cast<int>(y - small->y())], static_cast<double>(y));
 804d859:	db 85 4c ff ff ff    	fildl  -0xb4(%ebp)
 804d85f:	dd 9d 28 ff ff ff    	fstpl  -0xd8(%ebp)
 804d865:	db 85 4c ff ff ff    	fildl  -0xb4(%ebp)
 804d86b:	dd 9d 20 ff ff ff    	fstpl  -0xe0(%ebp)
 804d871:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
 804d877:	89 04 24             	mov    %eax,(%esp)
 804d87a:	e8 e5 e0 ff ff       	call   804b964 <_ZNK7Vector21yEv>
 804d87f:	dc ad 20 ff ff ff    	fsubrl -0xe0(%ebp)
 804d885:	d9 bd 36 ff ff ff    	fnstcw -0xca(%ebp)
 804d88b:	0f b7 85 36 ff ff ff 	movzwl -0xca(%ebp),%eax
 804d892:	b4 0c                	mov    $0xc,%ah
 804d894:	66 89 85 34 ff ff ff 	mov    %ax,-0xcc(%ebp)
 804d89b:	d9 ad 34 ff ff ff    	fldcw  -0xcc(%ebp)
 804d8a1:	db 9d 30 ff ff ff    	fistpl -0xd0(%ebp)
 804d8a7:	d9 ad 36 ff ff ff    	fldcw  -0xca(%ebp)
 804d8ad:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
 804d8b3:	89 44 24 04          	mov    %eax,0x4(%esp)
 804d8b7:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
 804d8bd:	89 04 24             	mov    %eax,(%esp)
 804d8c0:	e8 41 05 00 00       	call   804de06 <_ZNSt6vectorIdSaIdEEixEj>
 804d8c5:	dd 00                	fldl   (%eax)
 804d8c7:	dd 85 28 ff ff ff    	fldl   -0xd8(%ebp)
 804d8cd:	dd 5c 24 0c          	fstpl  0xc(%esp)
 804d8d1:	dd 5c 24 04          	fstpl  0x4(%esp)
 804d8d5:	8d 45 c0             	lea    -0x40(%ebp),%eax
 804d8d8:	89 04 24             	mov    %eax,(%esp)
 804d8db:	e8 74 dc ff ff       	call   804b554 <_ZN7Vector2C1Edd>
		const Line pq(p, q, this->color());
 804d8e0:	8b 55 08             	mov    0x8(%ebp),%edx
 804d8e3:	8d 85 58 ff ff ff    	lea    -0xa8(%ebp),%eax
 804d8e9:	89 54 24 04          	mov    %edx,0x4(%esp)
 804d8ed:	89 04 24             	mov    %eax,(%esp)
 804d8f0:	e8 d7 ed ff ff       	call   804c6cc <_ZNK5Shape5colorEv>
 804d8f5:	83 ec 04             	sub    $0x4,%esp
 804d8f8:	8d 85 58 ff ff ff    	lea    -0xa8(%ebp),%eax
 804d8fe:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804d902:	8d 45 c0             	lea    -0x40(%ebp),%eax
 804d905:	89 44 24 08          	mov    %eax,0x8(%esp)
 804d909:	8d 45 b0             	lea    -0x50(%ebp),%eax
 804d90c:	89 44 24 04          	mov    %eax,0x4(%esp)
 804d910:	8d 45 d0             	lea    -0x30(%ebp),%eax
 804d913:	89 04 24             	mov    %eax,(%esp)
 804d916:	e8 f5 13 00 00       	call   804ed10 <_ZN4LineC1ERK7Vector2S2_RK9RGBAPixel>
		pq.draw(canvas);
 804d91b:	8b 45 0c             	mov    0xc(%ebp),%eax
 804d91e:	89 44 24 04          	mov    %eax,0x4(%esp)
 804d922:	8d 45 d0             	lea    -0x30(%ebp),%eax
 804d925:	89 04 24             	mov    %eax,(%esp)
 804d928:	e8 45 14 00 00       	call   804ed72 <_ZNK4Line4drawEP3PNG>
	}
 804d92d:	8d 45 d0             	lea    -0x30(%ebp),%eax
 804d930:	89 04 24             	mov    %eax,(%esp)
 804d933:	e8 3e f2 ff ff       	call   804cb76 <_ZN4LineD1Ev>
				Vector2(large->y(), large->x()));
	vector<double> x_small_large =
		Line::linearInterpolation(Vector2(small->y(), small->x()),
				Vector2(large->y(), large->x()));

	for (int y = static_cast<int>(small->y()); y < static_cast<int>(medium->y()); y++)
 804d938:	83 85 4c ff ff ff 01 	addl   $0x1,-0xb4(%ebp)
 804d93f:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
 804d945:	89 04 24             	mov    %eax,(%esp)
 804d948:	e8 17 e0 ff ff       	call   804b964 <_ZNK7Vector21yEv>
 804d94d:	d9 bd 36 ff ff ff    	fnstcw -0xca(%ebp)
 804d953:	0f b7 85 36 ff ff ff 	movzwl -0xca(%ebp),%eax
 804d95a:	b4 0c                	mov    $0xc,%ah
 804d95c:	66 89 85 34 ff ff ff 	mov    %ax,-0xcc(%ebp)
 804d963:	d9 ad 34 ff ff ff    	fldcw  -0xcc(%ebp)
 804d969:	db 9d 30 ff ff ff    	fistpl -0xd0(%ebp)
 804d96f:	d9 ad 36 ff ff ff    	fldcw  -0xca(%ebp)
 804d975:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
 804d97b:	3b 85 4c ff ff ff    	cmp    -0xb4(%ebp),%eax
 804d981:	0f 9f c0             	setg   %al
 804d984:	84 c0                	test   %al,%al
 804d986:	0f 85 46 fe ff ff    	jne    804d7d2 <_ZNK8Triangle4drawEP3PNG+0x336>
		const Vector2 q(x_small_large[static_cast<int>(y - small->y())], static_cast<double>(y));
		const Line pq(p, q, this->color());
		pq.draw(canvas);
	}

	for (int y = static_cast<int>(medium->y()); y < static_cast<int>(large->y()); y++)
 804d98c:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
 804d992:	89 04 24             	mov    %eax,(%esp)
 804d995:	e8 ca df ff ff       	call   804b964 <_ZNK7Vector21yEv>
 804d99a:	d9 bd 36 ff ff ff    	fnstcw -0xca(%ebp)
 804d9a0:	0f b7 85 36 ff ff ff 	movzwl -0xca(%ebp),%eax
 804d9a7:	b4 0c                	mov    $0xc,%ah
 804d9a9:	66 89 85 34 ff ff ff 	mov    %ax,-0xcc(%ebp)
 804d9b0:	d9 ad 34 ff ff ff    	fldcw  -0xcc(%ebp)
 804d9b6:	db 9d 50 ff ff ff    	fistpl -0xb0(%ebp)
 804d9bc:	d9 ad 36 ff ff ff    	fldcw  -0xca(%ebp)
 804d9c2:	e9 6d 01 00 00       	jmp    804db34 <_ZNK8Triangle4drawEP3PNG+0x698>
	{
		const Vector2 p(x_medium_large[static_cast<int>(y - medium->y())], static_cast<double>(y));
 804d9c7:	db 85 50 ff ff ff    	fildl  -0xb0(%ebp)
 804d9cd:	dd 9d 28 ff ff ff    	fstpl  -0xd8(%ebp)
 804d9d3:	db 85 50 ff ff ff    	fildl  -0xb0(%ebp)
 804d9d9:	dd 9d 20 ff ff ff    	fstpl  -0xe0(%ebp)
 804d9df:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
 804d9e5:	89 04 24             	mov    %eax,(%esp)
 804d9e8:	e8 77 df ff ff       	call   804b964 <_ZNK7Vector21yEv>
 804d9ed:	dc ad 20 ff ff ff    	fsubrl -0xe0(%ebp)
 804d9f3:	d9 bd 36 ff ff ff    	fnstcw -0xca(%ebp)
 804d9f9:	0f b7 85 36 ff ff ff 	movzwl -0xca(%ebp),%eax
 804da00:	b4 0c                	mov    $0xc,%ah
 804da02:	66 89 85 34 ff ff ff 	mov    %ax,-0xcc(%ebp)
 804da09:	d9 ad 34 ff ff ff    	fldcw  -0xcc(%ebp)
 804da0f:	db 9d 30 ff ff ff    	fistpl -0xd0(%ebp)
 804da15:	d9 ad 36 ff ff ff    	fldcw  -0xca(%ebp)
 804da1b:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
 804da21:	89 44 24 04          	mov    %eax,0x4(%esp)
 804da25:	8d 85 68 ff ff ff    	lea    -0x98(%ebp),%eax
 804da2b:	89 04 24             	mov    %eax,(%esp)
 804da2e:	e8 d3 03 00 00       	call   804de06 <_ZNSt6vectorIdSaIdEEixEj>
 804da33:	dd 00                	fldl   (%eax)
 804da35:	dd 85 28 ff ff ff    	fldl   -0xd8(%ebp)
 804da3b:	dd 5c 24 0c          	fstpl  0xc(%esp)
 804da3f:	dd 5c 24 04          	fstpl  0x4(%esp)
 804da43:	8d 45 b0             	lea    -0x50(%ebp),%eax
 804da46:	89 04 24             	mov    %eax,(%esp)
 804da49:	e8 06 db ff ff       	call   804b554 <_ZN7Vector2C1Edd>
		const Vector2 q(x_small_large[static_cast<int>(y - small->y())], static_cast<double>(y));
 804da4e:	db 85 50 ff ff ff    	fildl  -0xb0(%ebp)
 804da54:	dd 9d 28 ff ff ff    	fstpl  -0xd8(%ebp)
 804da5a:	db 85 50 ff ff ff    	fildl  -0xb0(%ebp)
 804da60:	dd 9d 20 ff ff ff    	fstpl  -0xe0(%ebp)
 804da66:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
 804da6c:	89 04 24             	mov    %eax,(%esp)
 804da6f:	e8 f0 de ff ff       	call   804b964 <_ZNK7Vector21yEv>
 804da74:	dc ad 20 ff ff ff    	fsubrl -0xe0(%ebp)
 804da7a:	d9 bd 36 ff ff ff    	fnstcw -0xca(%ebp)
 804da80:	0f b7 85 36 ff ff ff 	movzwl -0xca(%ebp),%eax
 804da87:	b4 0c                	mov    $0xc,%ah
 804da89:	66 89 85 34 ff ff ff 	mov    %ax,-0xcc(%ebp)
 804da90:	d9 ad 34 ff ff ff    	fldcw  -0xcc(%ebp)
 804da96:	db 9d 30 ff ff ff    	fistpl -0xd0(%ebp)
 804da9c:	d9 ad 36 ff ff ff    	fldcw  -0xca(%ebp)
 804daa2:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
 804daa8:	89 44 24 04          	mov    %eax,0x4(%esp)
 804daac:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
 804dab2:	89 04 24             	mov    %eax,(%esp)
 804dab5:	e8 4c 03 00 00       	call   804de06 <_ZNSt6vectorIdSaIdEEixEj>
 804daba:	dd 00                	fldl   (%eax)
 804dabc:	dd 85 28 ff ff ff    	fldl   -0xd8(%ebp)
 804dac2:	dd 5c 24 0c          	fstpl  0xc(%esp)
 804dac6:	dd 5c 24 04          	fstpl  0x4(%esp)
 804daca:	8d 45 c0             	lea    -0x40(%ebp),%eax
 804dacd:	89 04 24             	mov    %eax,(%esp)
 804dad0:	e8 7f da ff ff       	call   804b554 <_ZN7Vector2C1Edd>
		const Line pq(p, q, this->color());
 804dad5:	8b 55 08             	mov    0x8(%ebp),%edx
 804dad8:	8d 85 58 ff ff ff    	lea    -0xa8(%ebp),%eax
 804dade:	89 54 24 04          	mov    %edx,0x4(%esp)
 804dae2:	89 04 24             	mov    %eax,(%esp)
 804dae5:	e8 e2 eb ff ff       	call   804c6cc <_ZNK5Shape5colorEv>
 804daea:	83 ec 04             	sub    $0x4,%esp
 804daed:	8d 85 58 ff ff ff    	lea    -0xa8(%ebp),%eax
 804daf3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804daf7:	8d 45 c0             	lea    -0x40(%ebp),%eax
 804dafa:	89 44 24 08          	mov    %eax,0x8(%esp)
 804dafe:	8d 45 b0             	lea    -0x50(%ebp),%eax
 804db01:	89 44 24 04          	mov    %eax,0x4(%esp)
 804db05:	8d 45 d0             	lea    -0x30(%ebp),%eax
 804db08:	89 04 24             	mov    %eax,(%esp)
 804db0b:	e8 00 12 00 00       	call   804ed10 <_ZN4LineC1ERK7Vector2S2_RK9RGBAPixel>
		pq.draw(canvas);
 804db10:	8b 45 0c             	mov    0xc(%ebp),%eax
 804db13:	89 44 24 04          	mov    %eax,0x4(%esp)
 804db17:	8d 45 d0             	lea    -0x30(%ebp),%eax
 804db1a:	89 04 24             	mov    %eax,(%esp)
 804db1d:	e8 50 12 00 00       	call   804ed72 <_ZNK4Line4drawEP3PNG>

	}
 804db22:	8d 45 d0             	lea    -0x30(%ebp),%eax
 804db25:	89 04 24             	mov    %eax,(%esp)
 804db28:	e8 49 f0 ff ff       	call   804cb76 <_ZN4LineD1Ev>
		const Vector2 q(x_small_large[static_cast<int>(y - small->y())], static_cast<double>(y));
		const Line pq(p, q, this->color());
		pq.draw(canvas);
	}

	for (int y = static_cast<int>(medium->y()); y < static_cast<int>(large->y()); y++)
 804db2d:	83 85 50 ff ff ff 01 	addl   $0x1,-0xb0(%ebp)
 804db34:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
 804db3a:	89 04 24             	mov    %eax,(%esp)
 804db3d:	e8 22 de ff ff       	call   804b964 <_ZNK7Vector21yEv>
 804db42:	d9 bd 36 ff ff ff    	fnstcw -0xca(%ebp)
 804db48:	0f b7 85 36 ff ff ff 	movzwl -0xca(%ebp),%eax
 804db4f:	b4 0c                	mov    $0xc,%ah
 804db51:	66 89 85 34 ff ff ff 	mov    %ax,-0xcc(%ebp)
 804db58:	d9 ad 34 ff ff ff    	fldcw  -0xcc(%ebp)
 804db5e:	db 9d 30 ff ff ff    	fistpl -0xd0(%ebp)
 804db64:	d9 ad 36 ff ff ff    	fldcw  -0xca(%ebp)
 804db6a:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
 804db70:	3b 85 50 ff ff ff    	cmp    -0xb0(%ebp),%eax
 804db76:	0f 9f c0             	setg   %al
 804db79:	84 c0                	test   %al,%al
 804db7b:	0f 85 46 fe ff ff    	jne    804d9c7 <_ZNK8Triangle4drawEP3PNG+0x52b>
	vector<double> x_medium_large =
		Line::linearInterpolation(Vector2(medium->y(), medium->x()),
				Vector2(large->y(), large->x()));
	vector<double> x_small_large =
		Line::linearInterpolation(Vector2(small->y(), small->x()),
				Vector2(large->y(), large->x()));
 804db81:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
 804db87:	89 04 24             	mov    %eax,(%esp)
 804db8a:	e8 1f 02 00 00       	call   804ddae <_ZNSt6vectorIdSaIdEED1Ev>
	vector<double> x_small_medium =
		Line::linearInterpolation(Vector2(small->y(), small->x()),
				Vector2(medium->y(), medium->x()));
	vector<double> x_medium_large =
		Line::linearInterpolation(Vector2(medium->y(), medium->x()),
				Vector2(large->y(), large->x()));
 804db8f:	8d 85 68 ff ff ff    	lea    -0x98(%ebp),%eax
 804db95:	89 04 24             	mov    %eax,(%esp)
 804db98:	e8 11 02 00 00       	call   804ddae <_ZNSt6vectorIdSaIdEED1Ev>
		const Vector2 p(x_medium_large[static_cast<int>(y - medium->y())], static_cast<double>(y));
		const Vector2 q(x_small_large[static_cast<int>(y - small->y())], static_cast<double>(y));
		const Line pq(p, q, this->color());
		pq.draw(canvas);

	}
 804db9d:	8d 85 5c ff ff ff    	lea    -0xa4(%ebp),%eax
 804dba3:	89 04 24             	mov    %eax,(%esp)
 804dba6:	e8 03 02 00 00       	call   804ddae <_ZNSt6vectorIdSaIdEED1Ev>
 804dbab:	eb 5c                	jmp    804dc09 <_ZNK8Triangle4drawEP3PNG+0x76d>
 804dbad:	89 c3                	mov    %eax,%ebx
	{
		const Vector2 p(x_small_medium[static_cast<int>(y - small->y())], static_cast<double>(y));
		const Vector2 q(x_small_large[static_cast<int>(y - small->y())], static_cast<double>(y));
		const Line pq(p, q, this->color());
		pq.draw(canvas);
	}
 804dbaf:	8d 45 d0             	lea    -0x30(%ebp),%eax
 804dbb2:	89 04 24             	mov    %eax,(%esp)
 804dbb5:	e8 bc ef ff ff       	call   804cb76 <_ZN4LineD1Ev>
 804dbba:	eb 11                	jmp    804dbcd <_ZNK8Triangle4drawEP3PNG+0x731>
 804dbbc:	89 c3                	mov    %eax,%ebx
		const Vector2 p(x_medium_large[static_cast<int>(y - medium->y())], static_cast<double>(y));
		const Vector2 q(x_small_large[static_cast<int>(y - small->y())], static_cast<double>(y));
		const Line pq(p, q, this->color());
		pq.draw(canvas);

	}
 804dbbe:	8d 45 d0             	lea    -0x30(%ebp),%eax
 804dbc1:	89 04 24             	mov    %eax,(%esp)
 804dbc4:	e8 ad ef ff ff       	call   804cb76 <_ZN4LineD1Ev>
 804dbc9:	eb 02                	jmp    804dbcd <_ZNK8Triangle4drawEP3PNG+0x731>
 804dbcb:	89 c3                	mov    %eax,%ebx
	vector<double> x_medium_large =
		Line::linearInterpolation(Vector2(medium->y(), medium->x()),
				Vector2(large->y(), large->x()));
	vector<double> x_small_large =
		Line::linearInterpolation(Vector2(small->y(), small->x()),
				Vector2(large->y(), large->x()));
 804dbcd:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
 804dbd3:	89 04 24             	mov    %eax,(%esp)
 804dbd6:	e8 d3 01 00 00       	call   804ddae <_ZNSt6vectorIdSaIdEED1Ev>
 804dbdb:	eb 02                	jmp    804dbdf <_ZNK8Triangle4drawEP3PNG+0x743>
 804dbdd:	89 c3                	mov    %eax,%ebx
	vector<double> x_small_medium =
		Line::linearInterpolation(Vector2(small->y(), small->x()),
				Vector2(medium->y(), medium->x()));
	vector<double> x_medium_large =
		Line::linearInterpolation(Vector2(medium->y(), medium->x()),
				Vector2(large->y(), large->x()));
 804dbdf:	8d 85 68 ff ff ff    	lea    -0x98(%ebp),%eax
 804dbe5:	89 04 24             	mov    %eax,(%esp)
 804dbe8:	e8 c1 01 00 00       	call   804ddae <_ZNSt6vectorIdSaIdEED1Ev>
 804dbed:	eb 02                	jmp    804dbf1 <_ZNK8Triangle4drawEP3PNG+0x755>
 804dbef:	89 c3                	mov    %eax,%ebx
		const Vector2 p(x_medium_large[static_cast<int>(y - medium->y())], static_cast<double>(y));
		const Vector2 q(x_small_large[static_cast<int>(y - small->y())], static_cast<double>(y));
		const Line pq(p, q, this->color());
		pq.draw(canvas);

	}
 804dbf1:	8d 85 5c ff ff ff    	lea    -0xa4(%ebp),%eax
 804dbf7:	89 04 24             	mov    %eax,(%esp)
 804dbfa:	e8 af 01 00 00       	call   804ddae <_ZNSt6vectorIdSaIdEED1Ev>
 804dbff:	89 d8                	mov    %ebx,%eax
 804dc01:	89 04 24             	mov    %eax,(%esp)
 804dc04:	e8 c7 ba ff ff       	call   80496d0 <_Unwind_Resume@plt>
}
 804dc09:	8b 5d fc             	mov    -0x4(%ebp),%ebx
 804dc0c:	c9                   	leave  
 804dc0d:	c3                   	ret    

0804dc0e <_ZN8Triangle10set_centerERK7Vector2>:

void Triangle::set_center(const Vector2& pcenter)
{
 804dc0e:	55                   	push   %ebp
 804dc0f:	89 e5                	mov    %esp,%ebp
 804dc11:	83 ec 48             	sub    $0x48,%esp
	const Vector2 delta(pcenter - this->center());
 804dc14:	8b 55 08             	mov    0x8(%ebp),%edx
 804dc17:	8d 45 e8             	lea    -0x18(%ebp),%eax
 804dc1a:	89 54 24 04          	mov    %edx,0x4(%esp)
 804dc1e:	89 04 24             	mov    %eax,(%esp)
 804dc21:	e8 5c ea ff ff       	call   804c682 <_ZNK5Shape6centerEv>
 804dc26:	83 ec 04             	sub    $0x4,%esp
 804dc29:	8d 45 c8             	lea    -0x38(%ebp),%eax
 804dc2c:	8d 55 e8             	lea    -0x18(%ebp),%edx
 804dc2f:	89 54 24 08          	mov    %edx,0x8(%esp)
 804dc33:	8b 55 0c             	mov    0xc(%ebp),%edx
 804dc36:	89 54 24 04          	mov    %edx,0x4(%esp)
 804dc3a:	89 04 24             	mov    %eax,(%esp)
 804dc3d:	e8 44 d9 ff ff       	call   804b586 <_ZNK7Vector2miERKS_>
 804dc42:	83 ec 04             	sub    $0x4,%esp
	/* Move the three vertices by the delta from
	   the new center to the old center. */
	this->set_vertex(0, this->vertex(0) + delta);
 804dc45:	8d 45 d8             	lea    -0x28(%ebp),%eax
 804dc48:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
 804dc4f:	00 
 804dc50:	8b 55 08             	mov    0x8(%ebp),%edx
 804dc53:	89 54 24 04          	mov    %edx,0x4(%esp)
 804dc57:	89 04 24             	mov    %eax,(%esp)
 804dc5a:	e8 79 f3 ff ff       	call   804cfd8 <_ZNK8Triangle6vertexEi>
 804dc5f:	83 ec 04             	sub    $0x4,%esp
 804dc62:	8d 45 e8             	lea    -0x18(%ebp),%eax
 804dc65:	8d 55 c8             	lea    -0x38(%ebp),%edx
 804dc68:	89 54 24 08          	mov    %edx,0x8(%esp)
 804dc6c:	8d 55 d8             	lea    -0x28(%ebp),%edx
 804dc6f:	89 54 24 04          	mov    %edx,0x4(%esp)
 804dc73:	89 04 24             	mov    %eax,(%esp)
 804dc76:	e8 47 d9 ff ff       	call   804b5c2 <_ZNK7Vector2plERKS_>
 804dc7b:	83 ec 04             	sub    $0x4,%esp
 804dc7e:	8d 45 e8             	lea    -0x18(%ebp),%eax
 804dc81:	89 44 24 08          	mov    %eax,0x8(%esp)
 804dc85:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
 804dc8c:	00 
 804dc8d:	8b 45 08             	mov    0x8(%ebp),%eax
 804dc90:	89 04 24             	mov    %eax,(%esp)
 804dc93:	e8 a6 f3 ff ff       	call   804d03e <_ZN8Triangle10set_vertexEiRK7Vector2>
	this->set_vertex(1, this->vertex(1) + delta);
 804dc98:	8d 45 d8             	lea    -0x28(%ebp),%eax
 804dc9b:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
 804dca2:	00 
 804dca3:	8b 55 08             	mov    0x8(%ebp),%edx
 804dca6:	89 54 24 04          	mov    %edx,0x4(%esp)
 804dcaa:	89 04 24             	mov    %eax,(%esp)
 804dcad:	e8 26 f3 ff ff       	call   804cfd8 <_ZNK8Triangle6vertexEi>
 804dcb2:	83 ec 04             	sub    $0x4,%esp
 804dcb5:	8d 45 e8             	lea    -0x18(%ebp),%eax
 804dcb8:	8d 55 c8             	lea    -0x38(%ebp),%edx
 804dcbb:	89 54 24 08          	mov    %edx,0x8(%esp)
 804dcbf:	8d 55 d8             	lea    -0x28(%ebp),%edx
 804dcc2:	89 54 24 04          	mov    %edx,0x4(%esp)
 804dcc6:	89 04 24             	mov    %eax,(%esp)
 804dcc9:	e8 f4 d8 ff ff       	call   804b5c2 <_ZNK7Vector2plERKS_>
 804dcce:	83 ec 04             	sub    $0x4,%esp
 804dcd1:	8d 45 e8             	lea    -0x18(%ebp),%eax
 804dcd4:	89 44 24 08          	mov    %eax,0x8(%esp)
 804dcd8:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
 804dcdf:	00 
 804dce0:	8b 45 08             	mov    0x8(%ebp),%eax
 804dce3:	89 04 24             	mov    %eax,(%esp)
 804dce6:	e8 53 f3 ff ff       	call   804d03e <_ZN8Triangle10set_vertexEiRK7Vector2>
	this->set_vertex(2, this->vertex(2) + delta);
 804dceb:	8d 45 d8             	lea    -0x28(%ebp),%eax
 804dcee:	c7 44 24 08 02 00 00 	movl   $0x2,0x8(%esp)
 804dcf5:	00 
 804dcf6:	8b 55 08             	mov    0x8(%ebp),%edx
 804dcf9:	89 54 24 04          	mov    %edx,0x4(%esp)
 804dcfd:	89 04 24             	mov    %eax,(%esp)
 804dd00:	e8 d3 f2 ff ff       	call   804cfd8 <_ZNK8Triangle6vertexEi>
 804dd05:	83 ec 04             	sub    $0x4,%esp
 804dd08:	8d 45 e8             	lea    -0x18(%ebp),%eax
 804dd0b:	8d 55 c8             	lea    -0x38(%ebp),%edx
 804dd0e:	89 54 24 08          	mov    %edx,0x8(%esp)
 804dd12:	8d 55 d8             	lea    -0x28(%ebp),%edx
 804dd15:	89 54 24 04          	mov    %edx,0x4(%esp)
 804dd19:	89 04 24             	mov    %eax,(%esp)
 804dd1c:	e8 a1 d8 ff ff       	call   804b5c2 <_ZNK7Vector2plERKS_>
 804dd21:	83 ec 04             	sub    $0x4,%esp
 804dd24:	8d 45 e8             	lea    -0x18(%ebp),%eax
 804dd27:	89 44 24 08          	mov    %eax,0x8(%esp)
 804dd2b:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
 804dd32:	00 
 804dd33:	8b 45 08             	mov    0x8(%ebp),%eax
 804dd36:	89 04 24             	mov    %eax,(%esp)
 804dd39:	e8 00 f3 ff ff       	call   804d03e <_ZN8Triangle10set_vertexEiRK7Vector2>
	Shape::set_center(pcenter);
 804dd3e:	8b 45 08             	mov    0x8(%ebp),%eax
 804dd41:	8b 55 0c             	mov    0xc(%ebp),%edx
 804dd44:	89 54 24 04          	mov    %edx,0x4(%esp)
 804dd48:	89 04 24             	mov    %eax,(%esp)
 804dd4b:	e8 5a e9 ff ff       	call   804c6aa <_ZN5Shape10set_centerERK7Vector2>
}
 804dd50:	c9                   	leave  
 804dd51:	c3                   	ret    

0804dd52 <_Z41__static_initialization_and_destruction_0ii>:
 804dd52:	55                   	push   %ebp
 804dd53:	89 e5                	mov    %esp,%ebp
 804dd55:	83 ec 18             	sub    $0x18,%esp
 804dd58:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
 804dd5c:	75 31                	jne    804dd8f <_Z41__static_initialization_and_destruction_0ii+0x3d>
 804dd5e:	81 7d 0c ff ff 00 00 	cmpl   $0xffff,0xc(%ebp)
 804dd65:	75 28                	jne    804dd8f <_Z41__static_initialization_and_destruction_0ii+0x3d>
 804dd67:	c7 04 24 d4 42 05 08 	movl   $0x80542d4,(%esp)
 804dd6e:	e8 fd b5 ff ff       	call   8049370 <_ZNSt8ios_base4InitC1Ev@plt>
 804dd73:	c7 44 24 08 34 41 05 	movl   $0x8054134,0x8(%esp)
 804dd7a:	08 
 804dd7b:	c7 44 24 04 d4 42 05 	movl   $0x80542d4,0x4(%esp)
 804dd82:	08 
 804dd83:	c7 04 24 00 94 04 08 	movl   $0x8049400,(%esp)
 804dd8a:	e8 61 b5 ff ff       	call   80492f0 <__cxa_atexit@plt>
 804dd8f:	c9                   	leave  
 804dd90:	c3                   	ret    

0804dd91 <_GLOBAL__sub_I__ZN8TriangleC2ERK9RGBAPixelRK7Vector2S5_S5_>:
 804dd91:	55                   	push   %ebp
 804dd92:	89 e5                	mov    %esp,%ebp
 804dd94:	83 ec 18             	sub    $0x18,%esp
 804dd97:	c7 44 24 04 ff ff 00 	movl   $0xffff,0x4(%esp)
 804dd9e:	00 
 804dd9f:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
 804dda6:	e8 a7 ff ff ff       	call   804dd52 <_Z41__static_initialization_and_destruction_0ii>
 804ddab:	c9                   	leave  
 804ddac:	c3                   	ret    
 804ddad:	90                   	nop

0804ddae <_ZNSt6vectorIdSaIdEED1Ev>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
 804ddae:	55                   	push   %ebp
 804ddaf:	89 e5                	mov    %esp,%ebp
 804ddb1:	53                   	push   %ebx
 804ddb2:	83 ec 14             	sub    $0x14,%esp
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
		      _M_get_Tp_allocator()); }
 804ddb5:	8b 45 08             	mov    0x8(%ebp),%eax
 804ddb8:	89 04 24             	mov    %eax,(%esp)
 804ddbb:	e8 cc 00 00 00       	call   804de8c <_ZNSt12_Vector_baseIdSaIdEE19_M_get_Tp_allocatorEv>
 804ddc0:	8b 55 08             	mov    0x8(%ebp),%edx
 804ddc3:	8b 4a 04             	mov    0x4(%edx),%ecx
 804ddc6:	8b 55 08             	mov    0x8(%ebp),%edx
 804ddc9:	8b 12                	mov    (%edx),%edx
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 804ddcb:	89 44 24 08          	mov    %eax,0x8(%esp)
 804ddcf:	89 4c 24 04          	mov    %ecx,0x4(%esp)
 804ddd3:	89 14 24             	mov    %edx,(%esp)
 804ddd6:	e8 b9 00 00 00       	call   804de94 <_ZSt8_DestroyIPddEvT_S1_RSaIT0_E>
		      _M_get_Tp_allocator()); }
 804dddb:	8b 45 08             	mov    0x8(%ebp),%eax
 804ddde:	89 04 24             	mov    %eax,(%esp)
 804dde1:	e8 46 00 00 00       	call   804de2c <_ZNSt12_Vector_baseIdSaIdEED1Ev>
 804dde6:	eb 17                	jmp    804ddff <_ZNSt6vectorIdSaIdEED1Ev+0x51>
 804dde8:	89 c3                	mov    %eax,%ebx
 804ddea:	8b 45 08             	mov    0x8(%ebp),%eax
 804dded:	89 04 24             	mov    %eax,(%esp)
 804ddf0:	e8 37 00 00 00       	call   804de2c <_ZNSt12_Vector_baseIdSaIdEED1Ev>
 804ddf5:	89 d8                	mov    %ebx,%eax
 804ddf7:	89 04 24             	mov    %eax,(%esp)
 804ddfa:	e8 d1 b8 ff ff       	call   80496d0 <_Unwind_Resume@plt>
 804ddff:	83 c4 14             	add    $0x14,%esp
 804de02:	5b                   	pop    %ebx
 804de03:	5d                   	pop    %ebp
 804de04:	c3                   	ret    
 804de05:	90                   	nop

0804de06 <_ZNSt6vectorIdSaIdEEixEj>:
       *  Note that data access with this operator is unchecked and
       *  out_of_range lookups are not defined. (For checked lookups
       *  see at().)
       */
      reference
      operator[](size_type __n)
 804de06:	55                   	push   %ebp
 804de07:	89 e5                	mov    %esp,%ebp
      { return *(this->_M_impl._M_start + __n); }
 804de09:	8b 45 08             	mov    0x8(%ebp),%eax
 804de0c:	8b 00                	mov    (%eax),%eax
 804de0e:	8b 55 0c             	mov    0xc(%ebp),%edx
 804de11:	c1 e2 03             	shl    $0x3,%edx
 804de14:	01 d0                	add    %edx,%eax
 804de16:	5d                   	pop    %ebp
 804de17:	c3                   	ret    

0804de18 <_ZNSt12_Vector_baseIdSaIdEE12_Vector_implD1Ev>:
      typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template
        rebind<_Tp>::other _Tp_alloc_type;
      typedef typename __gnu_cxx::__alloc_traits<_Tp_alloc_type>::pointer
       	pointer;

      struct _Vector_impl 
 804de18:	55                   	push   %ebp
 804de19:	89 e5                	mov    %esp,%ebp
 804de1b:	83 ec 18             	sub    $0x18,%esp
 804de1e:	8b 45 08             	mov    0x8(%ebp),%eax
 804de21:	89 04 24             	mov    %eax,(%esp)
 804de24:	e8 85 00 00 00       	call   804deae <_ZNSaIdED1Ev>
 804de29:	c9                   	leave  
 804de2a:	c3                   	ret    
 804de2b:	90                   	nop

0804de2c <_ZNSt12_Vector_baseIdSaIdEED1Ev>:
	    _M_create_storage(__n);
	  }
      }
#endif

      ~_Vector_base()
 804de2c:	55                   	push   %ebp
 804de2d:	89 e5                	mov    %esp,%ebp
 804de2f:	53                   	push   %ebx
 804de30:	83 ec 14             	sub    $0x14,%esp
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
		      - this->_M_impl._M_start); }
 804de33:	8b 45 08             	mov    0x8(%ebp),%eax
 804de36:	8b 40 08             	mov    0x8(%eax),%eax
 804de39:	89 c2                	mov    %eax,%edx
 804de3b:	8b 45 08             	mov    0x8(%ebp),%eax
 804de3e:	8b 00                	mov    (%eax),%eax
 804de40:	29 c2                	sub    %eax,%edx
 804de42:	89 d0                	mov    %edx,%eax
 804de44:	c1 f8 03             	sar    $0x3,%eax
 804de47:	89 c2                	mov    %eax,%edx
 804de49:	8b 45 08             	mov    0x8(%ebp),%eax
 804de4c:	8b 00                	mov    (%eax),%eax
	  }
      }
#endif

      ~_Vector_base()
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 804de4e:	89 54 24 08          	mov    %edx,0x8(%esp)
 804de52:	89 44 24 04          	mov    %eax,0x4(%esp)
 804de56:	8b 45 08             	mov    0x8(%ebp),%eax
 804de59:	89 04 24             	mov    %eax,(%esp)
 804de5c:	e8 61 00 00 00       	call   804dec2 <_ZNSt12_Vector_baseIdSaIdEE13_M_deallocateEPdj>
		      - this->_M_impl._M_start); }
 804de61:	8b 45 08             	mov    0x8(%ebp),%eax
 804de64:	89 04 24             	mov    %eax,(%esp)
 804de67:	e8 ac ff ff ff       	call   804de18 <_ZNSt12_Vector_baseIdSaIdEE12_Vector_implD1Ev>
 804de6c:	eb 17                	jmp    804de85 <_ZNSt12_Vector_baseIdSaIdEED1Ev+0x59>
 804de6e:	89 c3                	mov    %eax,%ebx
 804de70:	8b 45 08             	mov    0x8(%ebp),%eax
 804de73:	89 04 24             	mov    %eax,(%esp)
 804de76:	e8 9d ff ff ff       	call   804de18 <_ZNSt12_Vector_baseIdSaIdEE12_Vector_implD1Ev>
 804de7b:	89 d8                	mov    %ebx,%eax
 804de7d:	89 04 24             	mov    %eax,(%esp)
 804de80:	e8 4b b8 ff ff       	call   80496d0 <_Unwind_Resume@plt>
 804de85:	83 c4 14             	add    $0x14,%esp
 804de88:	5b                   	pop    %ebx
 804de89:	5d                   	pop    %ebp
 804de8a:	c3                   	ret    
 804de8b:	90                   	nop

0804de8c <_ZNSt12_Vector_baseIdSaIdEE19_M_get_Tp_allocatorEv>:
      
    public:
      typedef _Alloc allocator_type;

      _Tp_alloc_type&
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 804de8c:	55                   	push   %ebp
 804de8d:	89 e5                	mov    %esp,%ebp
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
 804de8f:	8b 45 08             	mov    0x8(%ebp),%eax
 804de92:	5d                   	pop    %ebp
 804de93:	c3                   	ret    

0804de94 <_ZSt8_DestroyIPddEvT_S1_RSaIT0_E>:
	__traits::destroy(__alloc, std::__addressof(*__first));
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 804de94:	55                   	push   %ebp
 804de95:	89 e5                	mov    %esp,%ebp
 804de97:	83 ec 18             	sub    $0x18,%esp
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 804de9a:	8b 45 0c             	mov    0xc(%ebp),%eax
 804de9d:	89 44 24 04          	mov    %eax,0x4(%esp)
 804dea1:	8b 45 08             	mov    0x8(%ebp),%eax
 804dea4:	89 04 24             	mov    %eax,(%esp)
 804dea7:	e8 3d 00 00 00       	call   804dee9 <_ZSt8_DestroyIPdEvT_S1_>
    }
 804deac:	c9                   	leave  
 804dead:	c3                   	ret    

0804deae <_ZNSaIdED1Ev>:
      : __allocator_base<_Tp>(__a) { }

      template<typename _Tp1>
        allocator(const allocator<_Tp1>&) throw() { }

      ~allocator() throw() { }
 804deae:	55                   	push   %ebp
 804deaf:	89 e5                	mov    %esp,%ebp
 804deb1:	83 ec 18             	sub    $0x18,%esp
 804deb4:	8b 45 08             	mov    0x8(%ebp),%eax
 804deb7:	89 04 24             	mov    %eax,(%esp)
 804deba:	e8 45 00 00 00       	call   804df04 <_ZN9__gnu_cxx13new_allocatorIdED1Ev>
 804debf:	c9                   	leave  
 804dec0:	c3                   	ret    
 804dec1:	90                   	nop

0804dec2 <_ZNSt12_Vector_baseIdSaIdEE13_M_deallocateEPdj>:
      pointer
      _M_allocate(size_t __n)
      { return __n != 0 ? _M_impl.allocate(__n) : 0; }

      void
      _M_deallocate(pointer __p, size_t __n)
 804dec2:	55                   	push   %ebp
 804dec3:	89 e5                	mov    %esp,%ebp
 804dec5:	83 ec 18             	sub    $0x18,%esp
      {
	if (__p)
 804dec8:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
 804decc:	74 19                	je     804dee7 <_ZNSt12_Vector_baseIdSaIdEE13_M_deallocateEPdj+0x25>
	  _M_impl.deallocate(__p, __n);
 804dece:	8b 45 08             	mov    0x8(%ebp),%eax
 804ded1:	8b 55 10             	mov    0x10(%ebp),%edx
 804ded4:	89 54 24 08          	mov    %edx,0x8(%esp)
 804ded8:	8b 55 0c             	mov    0xc(%ebp),%edx
 804dedb:	89 54 24 04          	mov    %edx,0x4(%esp)
 804dedf:	89 04 24             	mov    %eax,(%esp)
 804dee2:	e8 23 00 00 00       	call   804df0a <_ZN9__gnu_cxx13new_allocatorIdE10deallocateEPdj>
      }
 804dee7:	c9                   	leave  
 804dee8:	c3                   	ret    

0804dee9 <_ZSt8_DestroyIPdEvT_S1_>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 804dee9:	55                   	push   %ebp
 804deea:	89 e5                	mov    %esp,%ebp
 804deec:	83 ec 18             	sub    $0x18,%esp
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
                       _Value_type;
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
 804deef:	8b 45 0c             	mov    0xc(%ebp),%eax
 804def2:	89 44 24 04          	mov    %eax,0x4(%esp)
 804def6:	8b 45 08             	mov    0x8(%ebp),%eax
 804def9:	89 04 24             	mov    %eax,(%esp)
 804defc:	e8 1c 00 00 00       	call   804df1d <_ZNSt12_Destroy_auxILb1EE9__destroyIPdEEvT_S3_>
	__destroy(__first, __last);
    }
 804df01:	c9                   	leave  
 804df02:	c3                   	ret    
 804df03:	90                   	nop

0804df04 <_ZN9__gnu_cxx13new_allocatorIdED1Ev>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }

      template<typename _Tp1>
        new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 804df04:	55                   	push   %ebp
 804df05:	89 e5                	mov    %esp,%ebp
 804df07:	5d                   	pop    %ebp
 804df08:	c3                   	ret    
 804df09:	90                   	nop

0804df0a <_ZN9__gnu_cxx13new_allocatorIdE10deallocateEPdj>:
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
 804df0a:	55                   	push   %ebp
 804df0b:	89 e5                	mov    %esp,%ebp
 804df0d:	83 ec 18             	sub    $0x18,%esp
      { ::operator delete(__p); }
 804df10:	8b 45 0c             	mov    0xc(%ebp),%eax
 804df13:	89 04 24             	mov    %eax,(%esp)
 804df16:	e8 25 b4 ff ff       	call   8049340 <_ZdlPv@plt>
 804df1b:	c9                   	leave  
 804df1c:	c3                   	ret    

0804df1d <_ZNSt12_Destroy_auxILb1EE9__destroyIPdEEvT_S3_>:
  template<>
    struct _Destroy_aux<true>
    {
      template<typename _ForwardIterator>
        static void
        __destroy(_ForwardIterator, _ForwardIterator) { }
 804df1d:	55                   	push   %ebp
 804df1e:	89 e5                	mov    %esp,%ebp
 804df20:	5d                   	pop    %ebp
 804df21:	c3                   	ret    

0804df22 <_ZN9RectangleC1ERK7Vector2RK9RGBAPixelii>:

#include "rectangle.h"

#include <cstdio>

Rectangle::Rectangle(const Vector2& pcenter, const RGBAPixel& pcolor,
 804df22:	55                   	push   %ebp
 804df23:	89 e5                	mov    %esp,%ebp
 804df25:	83 ec 18             	sub    $0x18,%esp
		int pwidth, int pheight)
: Shape(pcenter, pcolor),
	width_(pwidth),
	height_(pheight)
 804df28:	8b 45 08             	mov    0x8(%ebp),%eax
 804df2b:	8b 55 10             	mov    0x10(%ebp),%edx
 804df2e:	89 54 24 08          	mov    %edx,0x8(%esp)
 804df32:	8b 55 0c             	mov    0xc(%ebp),%edx
 804df35:	89 54 24 04          	mov    %edx,0x4(%esp)
 804df39:	89 04 24             	mov    %eax,(%esp)
 804df3c:	e8 df e6 ff ff       	call   804c620 <_ZN5ShapeC1ERK7Vector2RK9RGBAPixel>
 804df41:	8b 45 08             	mov    0x8(%ebp),%eax
 804df44:	c7 00 88 00 05 08    	movl   $0x8050088,(%eax)
 804df4a:	8b 45 08             	mov    0x8(%ebp),%eax
 804df4d:	8b 55 14             	mov    0x14(%ebp),%edx
 804df50:	89 50 18             	mov    %edx,0x18(%eax)
 804df53:	8b 45 08             	mov    0x8(%ebp),%eax
 804df56:	8b 55 18             	mov    0x18(%ebp),%edx
 804df59:	89 50 1c             	mov    %edx,0x1c(%eax)
{
	/* Nothing.  See initialization list. */
}
 804df5c:	c9                   	leave  
 804df5d:	c3                   	ret    

0804df5e <_ZNK9Rectangle4areaEv>:

int Rectangle::area() const
{
 804df5e:	55                   	push   %ebp
 804df5f:	89 e5                	mov    %esp,%ebp
	return this->width_ * this->height_;
 804df61:	8b 45 08             	mov    0x8(%ebp),%eax
 804df64:	8b 50 18             	mov    0x18(%eax),%edx
 804df67:	8b 45 08             	mov    0x8(%ebp),%eax
 804df6a:	8b 40 1c             	mov    0x1c(%eax),%eax
 804df6d:	0f af c2             	imul   %edx,%eax
}
 804df70:	5d                   	pop    %ebp
 804df71:	c3                   	ret    

0804df72 <_ZNK9Rectangle9perimeterEv>:

int Rectangle::perimeter() const
{
 804df72:	55                   	push   %ebp
 804df73:	89 e5                	mov    %esp,%ebp
	return 2 * (this->width_ + this->height_);
 804df75:	8b 45 08             	mov    0x8(%ebp),%eax
 804df78:	8b 50 18             	mov    0x18(%eax),%edx
 804df7b:	8b 45 08             	mov    0x8(%ebp),%eax
 804df7e:	8b 40 1c             	mov    0x1c(%eax),%eax
 804df81:	01 d0                	add    %edx,%eax
 804df83:	01 c0                	add    %eax,%eax
}
 804df85:	5d                   	pop    %ebp
 804df86:	c3                   	ret    
 804df87:	90                   	nop

0804df88 <_ZNK9Rectangle8containsERK7Vector2>:

bool Rectangle::contains(const Vector2& p) const
{
 804df88:	55                   	push   %ebp
 804df89:	89 e5                	mov    %esp,%ebp
 804df8b:	81 ec 88 00 00 00    	sub    $0x88,%esp
	const Vector2 top_left_corner(center().x() - (width_-1)/2,
			center().y() - (height_-1)/2);
 804df91:	8b 55 08             	mov    0x8(%ebp),%edx
 804df94:	8d 45 e8             	lea    -0x18(%ebp),%eax
 804df97:	89 54 24 04          	mov    %edx,0x4(%esp)
 804df9b:	89 04 24             	mov    %eax,(%esp)
 804df9e:	e8 df e6 ff ff       	call   804c682 <_ZNK5Shape6centerEv>
 804dfa3:	83 ec 04             	sub    $0x4,%esp
 804dfa6:	8d 45 e8             	lea    -0x18(%ebp),%eax
 804dfa9:	89 04 24             	mov    %eax,(%esp)
 804dfac:	e8 b3 d9 ff ff       	call   804b964 <_ZNK7Vector21yEv>
 804dfb1:	8b 45 08             	mov    0x8(%ebp),%eax
 804dfb4:	8b 40 1c             	mov    0x1c(%eax),%eax
 804dfb7:	83 e8 01             	sub    $0x1,%eax
 804dfba:	89 c2                	mov    %eax,%edx
 804dfbc:	c1 ea 1f             	shr    $0x1f,%edx
 804dfbf:	01 d0                	add    %edx,%eax
 804dfc1:	d1 f8                	sar    %eax
 804dfc3:	89 45 a4             	mov    %eax,-0x5c(%ebp)
 804dfc6:	db 45 a4             	fildl  -0x5c(%ebp)
 804dfc9:	de e9                	fsubrp %st,%st(1)
 804dfcb:	dd 5d 98             	fstpl  -0x68(%ebp)
	return 2 * (this->width_ + this->height_);
}

bool Rectangle::contains(const Vector2& p) const
{
	const Vector2 top_left_corner(center().x() - (width_-1)/2,
 804dfce:	8b 55 08             	mov    0x8(%ebp),%edx
 804dfd1:	8d 45 d8             	lea    -0x28(%ebp),%eax
 804dfd4:	89 54 24 04          	mov    %edx,0x4(%esp)
 804dfd8:	89 04 24             	mov    %eax,(%esp)
 804dfdb:	e8 a2 e6 ff ff       	call   804c682 <_ZNK5Shape6centerEv>
 804dfe0:	83 ec 04             	sub    $0x4,%esp
 804dfe3:	8d 45 d8             	lea    -0x28(%ebp),%eax
 804dfe6:	89 04 24             	mov    %eax,(%esp)
 804dfe9:	e8 50 d9 ff ff       	call   804b93e <_ZNK7Vector21xEv>
 804dfee:	8b 45 08             	mov    0x8(%ebp),%eax
 804dff1:	8b 40 18             	mov    0x18(%eax),%eax
 804dff4:	83 e8 01             	sub    $0x1,%eax
 804dff7:	89 c2                	mov    %eax,%edx
 804dff9:	c1 ea 1f             	shr    $0x1f,%edx
 804dffc:	01 d0                	add    %edx,%eax
 804dffe:	d1 f8                	sar    %eax
			center().y() - (height_-1)/2);
 804e000:	89 45 a4             	mov    %eax,-0x5c(%ebp)
 804e003:	db 45 a4             	fildl  -0x5c(%ebp)
 804e006:	de e9                	fsubrp %st,%st(1)
 804e008:	dd 45 98             	fldl   -0x68(%ebp)
 804e00b:	dd 5c 24 0c          	fstpl  0xc(%esp)
 804e00f:	dd 5c 24 04          	fstpl  0x4(%esp)
 804e013:	8d 45 b8             	lea    -0x48(%ebp),%eax
 804e016:	89 04 24             	mov    %eax,(%esp)
 804e019:	e8 36 d5 ff ff       	call   804b554 <_ZN7Vector2C1Edd>
	const Vector2 bottom_right_corner(center().x() + width_/2,
			center().y() + height_/2);
 804e01e:	8b 55 08             	mov    0x8(%ebp),%edx
 804e021:	8d 45 e8             	lea    -0x18(%ebp),%eax
 804e024:	89 54 24 04          	mov    %edx,0x4(%esp)
 804e028:	89 04 24             	mov    %eax,(%esp)
 804e02b:	e8 52 e6 ff ff       	call   804c682 <_ZNK5Shape6centerEv>
 804e030:	83 ec 04             	sub    $0x4,%esp
 804e033:	8d 45 e8             	lea    -0x18(%ebp),%eax
 804e036:	89 04 24             	mov    %eax,(%esp)
 804e039:	e8 26 d9 ff ff       	call   804b964 <_ZNK7Vector21yEv>
 804e03e:	8b 45 08             	mov    0x8(%ebp),%eax
 804e041:	8b 40 1c             	mov    0x1c(%eax),%eax
 804e044:	89 c2                	mov    %eax,%edx
 804e046:	c1 ea 1f             	shr    $0x1f,%edx
 804e049:	01 d0                	add    %edx,%eax
 804e04b:	d1 f8                	sar    %eax
 804e04d:	89 45 a4             	mov    %eax,-0x5c(%ebp)
 804e050:	db 45 a4             	fildl  -0x5c(%ebp)
 804e053:	de c1                	faddp  %st,%st(1)
 804e055:	dd 5d 98             	fstpl  -0x68(%ebp)

bool Rectangle::contains(const Vector2& p) const
{
	const Vector2 top_left_corner(center().x() - (width_-1)/2,
			center().y() - (height_-1)/2);
	const Vector2 bottom_right_corner(center().x() + width_/2,
 804e058:	8b 55 08             	mov    0x8(%ebp),%edx
 804e05b:	8d 45 d8             	lea    -0x28(%ebp),%eax
 804e05e:	89 54 24 04          	mov    %edx,0x4(%esp)
 804e062:	89 04 24             	mov    %eax,(%esp)
 804e065:	e8 18 e6 ff ff       	call   804c682 <_ZNK5Shape6centerEv>
 804e06a:	83 ec 04             	sub    $0x4,%esp
 804e06d:	8d 45 d8             	lea    -0x28(%ebp),%eax
 804e070:	89 04 24             	mov    %eax,(%esp)
 804e073:	e8 c6 d8 ff ff       	call   804b93e <_ZNK7Vector21xEv>
 804e078:	8b 45 08             	mov    0x8(%ebp),%eax
 804e07b:	8b 40 18             	mov    0x18(%eax),%eax
 804e07e:	89 c2                	mov    %eax,%edx
 804e080:	c1 ea 1f             	shr    $0x1f,%edx
 804e083:	01 d0                	add    %edx,%eax
 804e085:	d1 f8                	sar    %eax
			center().y() + height_/2);
 804e087:	89 45 a4             	mov    %eax,-0x5c(%ebp)
 804e08a:	db 45 a4             	fildl  -0x5c(%ebp)
 804e08d:	de c1                	faddp  %st,%st(1)
 804e08f:	dd 45 98             	fldl   -0x68(%ebp)
 804e092:	dd 5c 24 0c          	fstpl  0xc(%esp)
 804e096:	dd 5c 24 04          	fstpl  0x4(%esp)
 804e09a:	8d 45 c8             	lea    -0x38(%ebp),%eax
 804e09d:	89 04 24             	mov    %eax,(%esp)
 804e0a0:	e8 af d4 ff ff       	call   804b554 <_ZN7Vector2C1Edd>
	const bool inside_top_left = (p.x() == top_left_corner.x() ||
 804e0a5:	8b 45 0c             	mov    0xc(%ebp),%eax
 804e0a8:	89 04 24             	mov    %eax,(%esp)
 804e0ab:	e8 8e d8 ff ff       	call   804b93e <_ZNK7Vector21xEv>
 804e0b0:	dd 5d 98             	fstpl  -0x68(%ebp)
 804e0b3:	8d 45 b8             	lea    -0x48(%ebp),%eax
 804e0b6:	89 04 24             	mov    %eax,(%esp)
 804e0b9:	e8 80 d8 ff ff       	call   804b93e <_ZNK7Vector21xEv>
		p.y() == top_left_corner.y() ||
 804e0be:	dd 45 98             	fldl   -0x68(%ebp)
 804e0c1:	df e9                	fucomip %st(1),%st
 804e0c3:	7a 0b                	jp     804e0d0 <_ZNK9Rectangle8containsERK7Vector2+0x148>
 804e0c5:	dd 45 98             	fldl   -0x68(%ebp)
 804e0c8:	df e9                	fucomip %st(1),%st
 804e0ca:	dd d8                	fstp   %st(0)
 804e0cc:	74 47                	je     804e115 <_ZNK9Rectangle8containsERK7Vector2+0x18d>
 804e0ce:	eb 02                	jmp    804e0d2 <_ZNK9Rectangle8containsERK7Vector2+0x14a>
 804e0d0:	dd d8                	fstp   %st(0)
 804e0d2:	8b 45 0c             	mov    0xc(%ebp),%eax
 804e0d5:	89 04 24             	mov    %eax,(%esp)
 804e0d8:	e8 87 d8 ff ff       	call   804b964 <_ZNK7Vector21yEv>
 804e0dd:	dd 5d 98             	fstpl  -0x68(%ebp)
 804e0e0:	8d 45 b8             	lea    -0x48(%ebp),%eax
 804e0e3:	89 04 24             	mov    %eax,(%esp)
 804e0e6:	e8 79 d8 ff ff       	call   804b964 <_ZNK7Vector21yEv>
{
	const Vector2 top_left_corner(center().x() - (width_-1)/2,
			center().y() - (height_-1)/2);
	const Vector2 bottom_right_corner(center().x() + width_/2,
			center().y() + height_/2);
	const bool inside_top_left = (p.x() == top_left_corner.x() ||
 804e0eb:	dd 45 98             	fldl   -0x68(%ebp)
 804e0ee:	df e9                	fucomip %st(1),%st
 804e0f0:	7a 0b                	jp     804e0fd <_ZNK9Rectangle8containsERK7Vector2+0x175>
 804e0f2:	dd 45 98             	fldl   -0x68(%ebp)
 804e0f5:	df e9                	fucomip %st(1),%st
 804e0f7:	dd d8                	fstp   %st(0)
 804e0f9:	74 1a                	je     804e115 <_ZNK9Rectangle8containsERK7Vector2+0x18d>
 804e0fb:	eb 02                	jmp    804e0ff <_ZNK9Rectangle8containsERK7Vector2+0x177>
 804e0fd:	dd d8                	fstp   %st(0)
		p.y() == top_left_corner.y() ||
		p.isSouthEastOf(top_left_corner));
 804e0ff:	8d 45 b8             	lea    -0x48(%ebp),%eax
 804e102:	89 44 24 04          	mov    %eax,0x4(%esp)
 804e106:	8b 45 0c             	mov    0xc(%ebp),%eax
 804e109:	89 04 24             	mov    %eax,(%esp)
 804e10c:	e8 97 d9 ff ff       	call   804baa8 <_ZNK7Vector213isSouthEastOfERKS_>
	const Vector2 top_left_corner(center().x() - (width_-1)/2,
			center().y() - (height_-1)/2);
	const Vector2 bottom_right_corner(center().x() + width_/2,
			center().y() + height_/2);
	const bool inside_top_left = (p.x() == top_left_corner.x() ||
		p.y() == top_left_corner.y() ||
 804e111:	84 c0                	test   %al,%al
 804e113:	74 07                	je     804e11c <_ZNK9Rectangle8containsERK7Vector2+0x194>
 804e115:	b8 01 00 00 00       	mov    $0x1,%eax
 804e11a:	eb 05                	jmp    804e121 <_ZNK9Rectangle8containsERK7Vector2+0x199>
 804e11c:	b8 00 00 00 00       	mov    $0x0,%eax
		p.isSouthEastOf(top_left_corner));
 804e121:	88 45 b6             	mov    %al,-0x4a(%ebp)
	const bool inside_bottom_right = (p.x() == bottom_right_corner.x() ||
 804e124:	8b 45 0c             	mov    0xc(%ebp),%eax
 804e127:	89 04 24             	mov    %eax,(%esp)
 804e12a:	e8 0f d8 ff ff       	call   804b93e <_ZNK7Vector21xEv>
 804e12f:	dd 5d 98             	fstpl  -0x68(%ebp)
 804e132:	8d 45 c8             	lea    -0x38(%ebp),%eax
 804e135:	89 04 24             	mov    %eax,(%esp)
 804e138:	e8 01 d8 ff ff       	call   804b93e <_ZNK7Vector21xEv>
		p.y() == bottom_right_corner.y() ||
 804e13d:	dd 45 98             	fldl   -0x68(%ebp)
 804e140:	df e9                	fucomip %st(1),%st
 804e142:	7a 0b                	jp     804e14f <_ZNK9Rectangle8containsERK7Vector2+0x1c7>
 804e144:	dd 45 98             	fldl   -0x68(%ebp)
 804e147:	df e9                	fucomip %st(1),%st
 804e149:	dd d8                	fstp   %st(0)
 804e14b:	74 47                	je     804e194 <_ZNK9Rectangle8containsERK7Vector2+0x20c>
 804e14d:	eb 02                	jmp    804e151 <_ZNK9Rectangle8containsERK7Vector2+0x1c9>
 804e14f:	dd d8                	fstp   %st(0)
 804e151:	8b 45 0c             	mov    0xc(%ebp),%eax
 804e154:	89 04 24             	mov    %eax,(%esp)
 804e157:	e8 08 d8 ff ff       	call   804b964 <_ZNK7Vector21yEv>
 804e15c:	dd 5d 98             	fstpl  -0x68(%ebp)
 804e15f:	8d 45 c8             	lea    -0x38(%ebp),%eax
 804e162:	89 04 24             	mov    %eax,(%esp)
 804e165:	e8 fa d7 ff ff       	call   804b964 <_ZNK7Vector21yEv>
	const Vector2 bottom_right_corner(center().x() + width_/2,
			center().y() + height_/2);
	const bool inside_top_left = (p.x() == top_left_corner.x() ||
		p.y() == top_left_corner.y() ||
		p.isSouthEastOf(top_left_corner));
	const bool inside_bottom_right = (p.x() == bottom_right_corner.x() ||
 804e16a:	dd 45 98             	fldl   -0x68(%ebp)
 804e16d:	df e9                	fucomip %st(1),%st
 804e16f:	7a 0b                	jp     804e17c <_ZNK9Rectangle8containsERK7Vector2+0x1f4>
 804e171:	dd 45 98             	fldl   -0x68(%ebp)
 804e174:	df e9                	fucomip %st(1),%st
 804e176:	dd d8                	fstp   %st(0)
 804e178:	74 1a                	je     804e194 <_ZNK9Rectangle8containsERK7Vector2+0x20c>
 804e17a:	eb 02                	jmp    804e17e <_ZNK9Rectangle8containsERK7Vector2+0x1f6>
 804e17c:	dd d8                	fstp   %st(0)
		p.y() == bottom_right_corner.y() ||
		p.isNorthWestOf(bottom_right_corner));
 804e17e:	8d 45 c8             	lea    -0x38(%ebp),%eax
 804e181:	89 44 24 04          	mov    %eax,0x4(%esp)
 804e185:	8b 45 0c             	mov    0xc(%ebp),%eax
 804e188:	89 04 24             	mov    %eax,(%esp)
 804e18b:	e8 2c d8 ff ff       	call   804b9bc <_ZNK7Vector213isNorthWestOfERKS_>
			center().y() + height_/2);
	const bool inside_top_left = (p.x() == top_left_corner.x() ||
		p.y() == top_left_corner.y() ||
		p.isSouthEastOf(top_left_corner));
	const bool inside_bottom_right = (p.x() == bottom_right_corner.x() ||
		p.y() == bottom_right_corner.y() ||
 804e190:	84 c0                	test   %al,%al
 804e192:	74 07                	je     804e19b <_ZNK9Rectangle8containsERK7Vector2+0x213>
 804e194:	b8 01 00 00 00       	mov    $0x1,%eax
 804e199:	eb 05                	jmp    804e1a0 <_ZNK9Rectangle8containsERK7Vector2+0x218>
 804e19b:	b8 00 00 00 00       	mov    $0x0,%eax
		p.isNorthWestOf(bottom_right_corner));
 804e1a0:	88 45 b7             	mov    %al,-0x49(%ebp)
	return inside_top_left && inside_bottom_right;
 804e1a3:	80 7d b6 00          	cmpb   $0x0,-0x4a(%ebp)
 804e1a7:	74 0d                	je     804e1b6 <_ZNK9Rectangle8containsERK7Vector2+0x22e>
 804e1a9:	80 7d b7 00          	cmpb   $0x0,-0x49(%ebp)
 804e1ad:	74 07                	je     804e1b6 <_ZNK9Rectangle8containsERK7Vector2+0x22e>
 804e1af:	b8 01 00 00 00       	mov    $0x1,%eax
 804e1b4:	eb 05                	jmp    804e1bb <_ZNK9Rectangle8containsERK7Vector2+0x233>
 804e1b6:	b8 00 00 00 00       	mov    $0x0,%eax
}
 804e1bb:	c9                   	leave  
 804e1bc:	c3                   	ret    
 804e1bd:	90                   	nop

0804e1be <_ZNK9Rectangle4drawEP3PNG>:

void Rectangle::draw(PNG* canvas) const
{
 804e1be:	55                   	push   %ebp
 804e1bf:	89 e5                	mov    %esp,%ebp
 804e1c1:	53                   	push   %ebx
 804e1c2:	83 ec 54             	sub    $0x54,%esp
	RGBAPixel* pixel;
	const int x_offset = static_cast<int>(this->center().x() - (this->width_ / 2));
 804e1c5:	8b 55 08             	mov    0x8(%ebp),%edx
 804e1c8:	8d 45 e8             	lea    -0x18(%ebp),%eax
 804e1cb:	89 54 24 04          	mov    %edx,0x4(%esp)
 804e1cf:	89 04 24             	mov    %eax,(%esp)
 804e1d2:	e8 ab e4 ff ff       	call   804c682 <_ZNK5Shape6centerEv>
 804e1d7:	83 ec 04             	sub    $0x4,%esp
 804e1da:	8d 45 e8             	lea    -0x18(%ebp),%eax
 804e1dd:	89 04 24             	mov    %eax,(%esp)
 804e1e0:	e8 59 d7 ff ff       	call   804b93e <_ZNK7Vector21xEv>
 804e1e5:	8b 45 08             	mov    0x8(%ebp),%eax
 804e1e8:	8b 40 18             	mov    0x18(%eax),%eax
 804e1eb:	89 c2                	mov    %eax,%edx
 804e1ed:	c1 ea 1f             	shr    $0x1f,%edx
 804e1f0:	01 d0                	add    %edx,%eax
 804e1f2:	d1 f8                	sar    %eax
 804e1f4:	89 45 c0             	mov    %eax,-0x40(%ebp)
 804e1f7:	db 45 c0             	fildl  -0x40(%ebp)
 804e1fa:	de e9                	fsubrp %st,%st(1)
 804e1fc:	d9 7d be             	fnstcw -0x42(%ebp)
 804e1ff:	0f b7 45 be          	movzwl -0x42(%ebp),%eax
 804e203:	b4 0c                	mov    $0xc,%ah
 804e205:	66 89 45 bc          	mov    %ax,-0x44(%ebp)
 804e209:	d9 6d bc             	fldcw  -0x44(%ebp)
 804e20c:	db 5d dc             	fistpl -0x24(%ebp)
 804e20f:	d9 6d be             	fldcw  -0x42(%ebp)
	const int y_offset = static_cast<int>(this->center().y() - (this->height_ / 2));
 804e212:	8b 55 08             	mov    0x8(%ebp),%edx
 804e215:	8d 45 e8             	lea    -0x18(%ebp),%eax
 804e218:	89 54 24 04          	mov    %edx,0x4(%esp)
 804e21c:	89 04 24             	mov    %eax,(%esp)
 804e21f:	e8 5e e4 ff ff       	call   804c682 <_ZNK5Shape6centerEv>
 804e224:	83 ec 04             	sub    $0x4,%esp
 804e227:	8d 45 e8             	lea    -0x18(%ebp),%eax
 804e22a:	89 04 24             	mov    %eax,(%esp)
 804e22d:	e8 32 d7 ff ff       	call   804b964 <_ZNK7Vector21yEv>
 804e232:	8b 45 08             	mov    0x8(%ebp),%eax
 804e235:	8b 40 1c             	mov    0x1c(%eax),%eax
 804e238:	89 c2                	mov    %eax,%edx
 804e23a:	c1 ea 1f             	shr    $0x1f,%edx
 804e23d:	01 d0                	add    %edx,%eax
 804e23f:	d1 f8                	sar    %eax
 804e241:	89 45 c0             	mov    %eax,-0x40(%ebp)
 804e244:	db 45 c0             	fildl  -0x40(%ebp)
 804e247:	de e9                	fsubrp %st,%st(1)
 804e249:	d9 7d be             	fnstcw -0x42(%ebp)
 804e24c:	0f b7 45 be          	movzwl -0x42(%ebp),%eax
 804e250:	b4 0c                	mov    $0xc,%ah
 804e252:	66 89 45 bc          	mov    %ax,-0x44(%ebp)
 804e256:	d9 6d bc             	fldcw  -0x44(%ebp)
 804e259:	db 5d e0             	fistpl -0x20(%ebp)
 804e25c:	d9 6d be             	fldcw  -0x42(%ebp)
	for (int i = 0; i < this->width_; i++)
 804e25f:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
 804e266:	eb 61                	jmp    804e2c9 <_ZNK9Rectangle4drawEP3PNG+0x10b>
	{
		for (int j = 0; j < this->height_; j++)
 804e268:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
 804e26f:	eb 49                	jmp    804e2ba <_ZNK9Rectangle4drawEP3PNG+0xfc>
		{
			pixel = (*canvas)(x_offset+i, y_offset+j);
 804e271:	8b 45 d8             	mov    -0x28(%ebp),%eax
 804e274:	8b 55 e0             	mov    -0x20(%ebp),%edx
 804e277:	01 d0                	add    %edx,%eax
 804e279:	89 c2                	mov    %eax,%edx
 804e27b:	8b 45 d4             	mov    -0x2c(%ebp),%eax
 804e27e:	8b 4d dc             	mov    -0x24(%ebp),%ecx
 804e281:	01 c8                	add    %ecx,%eax
 804e283:	89 54 24 08          	mov    %edx,0x8(%esp)
 804e287:	89 44 24 04          	mov    %eax,0x4(%esp)
 804e28b:	8b 45 0c             	mov    0xc(%ebp),%eax
 804e28e:	89 04 24             	mov    %eax,(%esp)
 804e291:	e8 90 c1 ff ff       	call   804a426 <_ZN3PNGclEjj>
 804e296:	89 45 e4             	mov    %eax,-0x1c(%ebp)
			*pixel = this->color();
 804e299:	8b 55 08             	mov    0x8(%ebp),%edx
 804e29c:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
 804e29f:	8d 45 c4             	lea    -0x3c(%ebp),%eax
 804e2a2:	89 54 24 04          	mov    %edx,0x4(%esp)
 804e2a6:	89 04 24             	mov    %eax,(%esp)
 804e2a9:	e8 1e e4 ff ff       	call   804c6cc <_ZNK5Shape5colorEv>
 804e2ae:	83 ec 04             	sub    $0x4,%esp
 804e2b1:	8b 45 c4             	mov    -0x3c(%ebp),%eax
 804e2b4:	89 03                	mov    %eax,(%ebx)
	RGBAPixel* pixel;
	const int x_offset = static_cast<int>(this->center().x() - (this->width_ / 2));
	const int y_offset = static_cast<int>(this->center().y() - (this->height_ / 2));
	for (int i = 0; i < this->width_; i++)
	{
		for (int j = 0; j < this->height_; j++)
 804e2b6:	83 45 d8 01          	addl   $0x1,-0x28(%ebp)
 804e2ba:	8b 45 08             	mov    0x8(%ebp),%eax
 804e2bd:	8b 40 1c             	mov    0x1c(%eax),%eax
 804e2c0:	3b 45 d8             	cmp    -0x28(%ebp),%eax
 804e2c3:	7f ac                	jg     804e271 <_ZNK9Rectangle4drawEP3PNG+0xb3>
void Rectangle::draw(PNG* canvas) const
{
	RGBAPixel* pixel;
	const int x_offset = static_cast<int>(this->center().x() - (this->width_ / 2));
	const int y_offset = static_cast<int>(this->center().y() - (this->height_ / 2));
	for (int i = 0; i < this->width_; i++)
 804e2c5:	83 45 d4 01          	addl   $0x1,-0x2c(%ebp)
 804e2c9:	8b 45 08             	mov    0x8(%ebp),%eax
 804e2cc:	8b 40 18             	mov    0x18(%eax),%eax
 804e2cf:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
 804e2d2:	7f 94                	jg     804e268 <_ZNK9Rectangle4drawEP3PNG+0xaa>
		{
			pixel = (*canvas)(x_offset+i, y_offset+j);
			*pixel = this->color();
		}
	}
}
 804e2d4:	8b 5d fc             	mov    -0x4(%ebp),%ebx
 804e2d7:	c9                   	leave  
 804e2d8:	c3                   	ret    
 804e2d9:	90                   	nop

0804e2da <_ZNK9Rectangle5widthEv>:

int Rectangle::width() const
{
 804e2da:	55                   	push   %ebp
 804e2db:	89 e5                	mov    %esp,%ebp
	return this->width_;
 804e2dd:	8b 45 08             	mov    0x8(%ebp),%eax
 804e2e0:	8b 40 18             	mov    0x18(%eax),%eax
}
 804e2e3:	5d                   	pop    %ebp
 804e2e4:	c3                   	ret    
 804e2e5:	90                   	nop

0804e2e6 <_ZN9Rectangle9set_widthEi>:

void Rectangle::set_width(int pwidth)
{
 804e2e6:	55                   	push   %ebp
 804e2e7:	89 e5                	mov    %esp,%ebp
	this->width_ = pwidth;
 804e2e9:	8b 45 08             	mov    0x8(%ebp),%eax
 804e2ec:	8b 55 0c             	mov    0xc(%ebp),%edx
 804e2ef:	89 50 18             	mov    %edx,0x18(%eax)
}
 804e2f2:	5d                   	pop    %ebp
 804e2f3:	c3                   	ret    

0804e2f4 <_ZNK9Rectangle6heightEv>:

int Rectangle::height() const
{
 804e2f4:	55                   	push   %ebp
 804e2f5:	89 e5                	mov    %esp,%ebp
	return this->height_;
 804e2f7:	8b 45 08             	mov    0x8(%ebp),%eax
 804e2fa:	8b 40 1c             	mov    0x1c(%eax),%eax
}
 804e2fd:	5d                   	pop    %ebp
 804e2fe:	c3                   	ret    
 804e2ff:	90                   	nop

0804e300 <_ZN9Rectangle10set_heightEi>:

void Rectangle::set_height(int pheight)
{
 804e300:	55                   	push   %ebp
 804e301:	89 e5                	mov    %esp,%ebp
	this->height_ = pheight;
 804e303:	8b 45 08             	mov    0x8(%ebp),%eax
 804e306:	8b 55 0c             	mov    0xc(%ebp),%edx
 804e309:	89 50 1c             	mov    %edx,0x1c(%eax)
}
 804e30c:	5d                   	pop    %ebp
 804e30d:	c3                   	ret    

0804e30e <_Z41__static_initialization_and_destruction_0ii>:
 804e30e:	55                   	push   %ebp
 804e30f:	89 e5                	mov    %esp,%ebp
 804e311:	83 ec 18             	sub    $0x18,%esp
 804e314:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
 804e318:	75 31                	jne    804e34b <_Z41__static_initialization_and_destruction_0ii+0x3d>
 804e31a:	81 7d 0c ff ff 00 00 	cmpl   $0xffff,0xc(%ebp)
 804e321:	75 28                	jne    804e34b <_Z41__static_initialization_and_destruction_0ii+0x3d>
 804e323:	c7 04 24 d5 42 05 08 	movl   $0x80542d5,(%esp)
 804e32a:	e8 41 b0 ff ff       	call   8049370 <_ZNSt8ios_base4InitC1Ev@plt>
 804e32f:	c7 44 24 08 34 41 05 	movl   $0x8054134,0x8(%esp)
 804e336:	08 
 804e337:	c7 44 24 04 d5 42 05 	movl   $0x80542d5,0x4(%esp)
 804e33e:	08 
 804e33f:	c7 04 24 00 94 04 08 	movl   $0x8049400,(%esp)
 804e346:	e8 a5 af ff ff       	call   80492f0 <__cxa_atexit@plt>
 804e34b:	c9                   	leave  
 804e34c:	c3                   	ret    

0804e34d <_GLOBAL__sub_I__ZN9RectangleC2ERK7Vector2RK9RGBAPixelii>:
 804e34d:	55                   	push   %ebp
 804e34e:	89 e5                	mov    %esp,%ebp
 804e350:	83 ec 18             	sub    $0x18,%esp
 804e353:	c7 44 24 04 ff ff 00 	movl   $0xffff,0x4(%esp)
 804e35a:	00 
 804e35b:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
 804e362:	e8 a7 ff ff ff       	call   804e30e <_Z41__static_initialization_and_destruction_0ii>
 804e367:	c9                   	leave  
 804e368:	c3                   	ret    
 804e369:	90                   	nop

0804e36a <_ZN9RectangleD1Ev>:

/**
 * @brief The Rectangle class is a subclass of Shape and represents a rectangle
 * in 2D space
 */
class Rectangle : public Shape
 804e36a:	55                   	push   %ebp
 804e36b:	89 e5                	mov    %esp,%ebp
 804e36d:	83 ec 18             	sub    $0x18,%esp
 804e370:	8b 45 08             	mov    0x8(%ebp),%eax
 804e373:	c7 00 88 00 05 08    	movl   $0x8050088,(%eax)
 804e379:	8b 45 08             	mov    0x8(%ebp),%eax
 804e37c:	89 04 24             	mov    %eax,(%esp)
 804e37f:	e8 a2 e1 ff ff       	call   804c526 <_ZN5ShapeD1Ev>
 804e384:	b8 00 00 00 00       	mov    $0x0,%eax
 804e389:	85 c0                	test   %eax,%eax
 804e38b:	74 0b                	je     804e398 <_ZN9RectangleD1Ev+0x2e>
 804e38d:	8b 45 08             	mov    0x8(%ebp),%eax
 804e390:	89 04 24             	mov    %eax,(%esp)
 804e393:	e8 a8 af ff ff       	call   8049340 <_ZdlPv@plt>
 804e398:	c9                   	leave  
 804e399:	c3                   	ret    

0804e39a <_ZN9RectangleD0Ev>:
 804e39a:	55                   	push   %ebp
 804e39b:	89 e5                	mov    %esp,%ebp
 804e39d:	83 ec 18             	sub    $0x18,%esp
 804e3a0:	8b 45 08             	mov    0x8(%ebp),%eax
 804e3a3:	89 04 24             	mov    %eax,(%esp)
 804e3a6:	e8 bf ff ff ff       	call   804e36a <_ZN9RectangleD1Ev>
 804e3ab:	8b 45 08             	mov    0x8(%ebp),%eax
 804e3ae:	89 04 24             	mov    %eax,(%esp)
 804e3b1:	e8 8a af ff ff       	call   8049340 <_ZdlPv@plt>
 804e3b6:	c9                   	leave  
 804e3b7:	c3                   	ret    

0804e3b8 <_ZN6CircleC1ERK7Vector2RK9RGBAPixeli>:
#include <cstdio>
#include <cmath>

const double PI = 3.141592;

Circle::Circle(const Vector2& pcenter, const RGBAPixel& pcolor, int pradius)
 804e3b8:	55                   	push   %ebp
 804e3b9:	89 e5                	mov    %esp,%ebp
 804e3bb:	83 ec 18             	sub    $0x18,%esp
    : radius_(pradius), Shape(pcenter, pcolor)
 804e3be:	8b 45 08             	mov    0x8(%ebp),%eax
 804e3c1:	8b 55 10             	mov    0x10(%ebp),%edx
 804e3c4:	89 54 24 08          	mov    %edx,0x8(%esp)
 804e3c8:	8b 55 0c             	mov    0xc(%ebp),%edx
 804e3cb:	89 54 24 04          	mov    %edx,0x4(%esp)
 804e3cf:	89 04 24             	mov    %eax,(%esp)
 804e3d2:	e8 49 e2 ff ff       	call   804c620 <_ZN5ShapeC1ERK7Vector2RK9RGBAPixel>
 804e3d7:	8b 45 08             	mov    0x8(%ebp),%eax
 804e3da:	c7 00 c8 00 05 08    	movl   $0x80500c8,(%eax)
 804e3e0:	8b 45 08             	mov    0x8(%ebp),%eax
 804e3e3:	8b 55 14             	mov    0x14(%ebp),%edx
 804e3e6:	89 50 18             	mov    %edx,0x18(%eax)
{
	/* Nothing.  See initialization list. */
}
 804e3e9:	c9                   	leave  
 804e3ea:	c3                   	ret    
 804e3eb:	90                   	nop

0804e3ec <_ZNK6Circle4areaEv>:

int Circle::area() const
{
 804e3ec:	55                   	push   %ebp
 804e3ed:	89 e5                	mov    %esp,%ebp
 804e3ef:	83 ec 18             	sub    $0x18,%esp
	const int tarea = static_cast<int>(PI * radius_ * radius_);
 804e3f2:	8b 45 08             	mov    0x8(%ebp),%eax
 804e3f5:	8b 40 18             	mov    0x18(%eax),%eax
 804e3f8:	89 45 ec             	mov    %eax,-0x14(%ebp)
 804e3fb:	db 45 ec             	fildl  -0x14(%ebp)
 804e3fe:	dd 05 00 01 05 08    	fldl   0x8050100
 804e404:	de c9                	fmulp  %st,%st(1)
 804e406:	8b 45 08             	mov    0x8(%ebp),%eax
 804e409:	8b 40 18             	mov    0x18(%eax),%eax
 804e40c:	89 45 ec             	mov    %eax,-0x14(%ebp)
 804e40f:	db 45 ec             	fildl  -0x14(%ebp)
 804e412:	de c9                	fmulp  %st,%st(1)
 804e414:	d9 7d ea             	fnstcw -0x16(%ebp)
 804e417:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
 804e41b:	b4 0c                	mov    $0xc,%ah
 804e41d:	66 89 45 e8          	mov    %ax,-0x18(%ebp)
 804e421:	d9 6d e8             	fldcw  -0x18(%ebp)
 804e424:	db 5d fc             	fistpl -0x4(%ebp)
 804e427:	d9 6d ea             	fldcw  -0x16(%ebp)
	return tarea;
 804e42a:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
 804e42d:	c9                   	leave  
 804e42e:	c3                   	ret    
 804e42f:	90                   	nop

0804e430 <_ZNK6Circle9perimeterEv>:

int Circle::perimeter() const
{
 804e430:	55                   	push   %ebp
 804e431:	89 e5                	mov    %esp,%ebp
 804e433:	83 ec 18             	sub    $0x18,%esp
	const int tperimeter = static_cast<int>(PI * 2 * radius_);
 804e436:	8b 45 08             	mov    0x8(%ebp),%eax
 804e439:	8b 40 18             	mov    0x18(%eax),%eax
 804e43c:	89 45 ec             	mov    %eax,-0x14(%ebp)
 804e43f:	db 45 ec             	fildl  -0x14(%ebp)
 804e442:	dd 05 08 01 05 08    	fldl   0x8050108
 804e448:	de c9                	fmulp  %st,%st(1)
 804e44a:	d9 7d ea             	fnstcw -0x16(%ebp)
 804e44d:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
 804e451:	b4 0c                	mov    $0xc,%ah
 804e453:	66 89 45 e8          	mov    %ax,-0x18(%ebp)
 804e457:	d9 6d e8             	fldcw  -0x18(%ebp)
 804e45a:	db 5d fc             	fistpl -0x4(%ebp)
 804e45d:	d9 6d ea             	fldcw  -0x16(%ebp)
	return tperimeter;
 804e460:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
 804e463:	c9                   	leave  
 804e464:	c3                   	ret    
 804e465:	90                   	nop

0804e466 <_ZNK6Circle8containsERK7Vector2>:

bool Circle::contains(const Vector2& p) const
{
 804e466:	55                   	push   %ebp
 804e467:	89 e5                	mov    %esp,%ebp
 804e469:	83 ec 38             	sub    $0x38,%esp
	const double distance = this->center().distanceTo(p);
 804e46c:	8b 55 08             	mov    0x8(%ebp),%edx
 804e46f:	8d 45 e8             	lea    -0x18(%ebp),%eax
 804e472:	89 54 24 04          	mov    %edx,0x4(%esp)
 804e476:	89 04 24             	mov    %eax,(%esp)
 804e479:	e8 04 e2 ff ff       	call   804c682 <_ZNK5Shape6centerEv>
 804e47e:	83 ec 04             	sub    $0x4,%esp
 804e481:	8b 45 0c             	mov    0xc(%ebp),%eax
 804e484:	89 44 24 04          	mov    %eax,0x4(%esp)
 804e488:	8d 45 e8             	lea    -0x18(%ebp),%eax
 804e48b:	89 04 24             	mov    %eax,(%esp)
 804e48e:	e8 3b d2 ff ff       	call   804b6ce <_ZNK7Vector210distanceToERKS_>
 804e493:	dd 5d e0             	fstpl  -0x20(%ebp)
	return distance <= this->radius_;
 804e496:	8b 45 08             	mov    0x8(%ebp),%eax
 804e499:	8b 40 18             	mov    0x18(%eax),%eax
 804e49c:	89 45 d4             	mov    %eax,-0x2c(%ebp)
 804e49f:	db 45 d4             	fildl  -0x2c(%ebp)
 804e4a2:	dd 45 e0             	fldl   -0x20(%ebp)
 804e4a5:	d9 c9                	fxch   %st(1)
 804e4a7:	df e9                	fucomip %st(1),%st
 804e4a9:	dd d8                	fstp   %st(0)
 804e4ab:	0f 93 c0             	setae  %al
}
 804e4ae:	c9                   	leave  
 804e4af:	c3                   	ret    

0804e4b0 <_ZNK6Circle10drawPointsEP3PNGii>:

void Circle::drawPoints(PNG* canvas, int x, int y) const
{
 804e4b0:	55                   	push   %ebp
 804e4b1:	89 e5                	mov    %esp,%ebp
 804e4b3:	53                   	push   %ebx
 804e4b4:	83 ec 44             	sub    $0x44,%esp
	RGBAPixel* pixel;
	int i;
	int j;
	while (y > 0)
 804e4b7:	e9 7c 05 00 00       	jmp    804ea38 <_ZNK6Circle10drawPointsEP3PNGii+0x588>
	{
		i = static_cast<int>(this->center().x() + x);
 804e4bc:	8b 55 08             	mov    0x8(%ebp),%edx
 804e4bf:	8d 45 e8             	lea    -0x18(%ebp),%eax
 804e4c2:	89 54 24 04          	mov    %edx,0x4(%esp)
 804e4c6:	89 04 24             	mov    %eax,(%esp)
 804e4c9:	e8 b4 e1 ff ff       	call   804c682 <_ZNK5Shape6centerEv>
 804e4ce:	83 ec 04             	sub    $0x4,%esp
 804e4d1:	8d 45 e8             	lea    -0x18(%ebp),%eax
 804e4d4:	89 04 24             	mov    %eax,(%esp)
 804e4d7:	e8 62 d4 ff ff       	call   804b93e <_ZNK7Vector21xEv>
 804e4dc:	db 45 10             	fildl  0x10(%ebp)
 804e4df:	de c1                	faddp  %st,%st(1)
 804e4e1:	d9 7d d2             	fnstcw -0x2e(%ebp)
 804e4e4:	0f b7 45 d2          	movzwl -0x2e(%ebp),%eax
 804e4e8:	b4 0c                	mov    $0xc,%ah
 804e4ea:	66 89 45 d0          	mov    %ax,-0x30(%ebp)
 804e4ee:	d9 6d d0             	fldcw  -0x30(%ebp)
 804e4f1:	db 5d dc             	fistpl -0x24(%ebp)
 804e4f4:	d9 6d d2             	fldcw  -0x2e(%ebp)
		j = static_cast<int>(this->center().y() + y);
 804e4f7:	8b 55 08             	mov    0x8(%ebp),%edx
 804e4fa:	8d 45 e8             	lea    -0x18(%ebp),%eax
 804e4fd:	89 54 24 04          	mov    %edx,0x4(%esp)
 804e501:	89 04 24             	mov    %eax,(%esp)
 804e504:	e8 79 e1 ff ff       	call   804c682 <_ZNK5Shape6centerEv>
 804e509:	83 ec 04             	sub    $0x4,%esp
 804e50c:	8d 45 e8             	lea    -0x18(%ebp),%eax
 804e50f:	89 04 24             	mov    %eax,(%esp)
 804e512:	e8 4d d4 ff ff       	call   804b964 <_ZNK7Vector21yEv>
 804e517:	db 45 14             	fildl  0x14(%ebp)
 804e51a:	de c1                	faddp  %st,%st(1)
 804e51c:	d9 7d d2             	fnstcw -0x2e(%ebp)
 804e51f:	0f b7 45 d2          	movzwl -0x2e(%ebp),%eax
 804e523:	b4 0c                	mov    $0xc,%ah
 804e525:	66 89 45 d0          	mov    %ax,-0x30(%ebp)
 804e529:	d9 6d d0             	fldcw  -0x30(%ebp)
 804e52c:	db 5d e0             	fistpl -0x20(%ebp)
 804e52f:	d9 6d d2             	fldcw  -0x2e(%ebp)
		pixel = (*canvas)(i, j);
 804e532:	8b 55 e0             	mov    -0x20(%ebp),%edx
 804e535:	8b 45 dc             	mov    -0x24(%ebp),%eax
 804e538:	89 54 24 08          	mov    %edx,0x8(%esp)
 804e53c:	89 44 24 04          	mov    %eax,0x4(%esp)
 804e540:	8b 45 0c             	mov    0xc(%ebp),%eax
 804e543:	89 04 24             	mov    %eax,(%esp)
 804e546:	e8 db be ff ff       	call   804a426 <_ZN3PNGclEjj>
 804e54b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		*pixel = this->color();
 804e54e:	8b 55 08             	mov    0x8(%ebp),%edx
 804e551:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
 804e554:	8d 45 d4             	lea    -0x2c(%ebp),%eax
 804e557:	89 54 24 04          	mov    %edx,0x4(%esp)
 804e55b:	89 04 24             	mov    %eax,(%esp)
 804e55e:	e8 69 e1 ff ff       	call   804c6cc <_ZNK5Shape5colorEv>
 804e563:	83 ec 04             	sub    $0x4,%esp
 804e566:	8b 45 d4             	mov    -0x2c(%ebp),%eax
 804e569:	89 03                	mov    %eax,(%ebx)

		i = static_cast<int>(this->center().x() + x);
 804e56b:	8b 55 08             	mov    0x8(%ebp),%edx
 804e56e:	8d 45 e8             	lea    -0x18(%ebp),%eax
 804e571:	89 54 24 04          	mov    %edx,0x4(%esp)
 804e575:	89 04 24             	mov    %eax,(%esp)
 804e578:	e8 05 e1 ff ff       	call   804c682 <_ZNK5Shape6centerEv>
 804e57d:	83 ec 04             	sub    $0x4,%esp
 804e580:	8d 45 e8             	lea    -0x18(%ebp),%eax
 804e583:	89 04 24             	mov    %eax,(%esp)
 804e586:	e8 b3 d3 ff ff       	call   804b93e <_ZNK7Vector21xEv>
 804e58b:	db 45 10             	fildl  0x10(%ebp)
 804e58e:	de c1                	faddp  %st,%st(1)
 804e590:	d9 7d d2             	fnstcw -0x2e(%ebp)
 804e593:	0f b7 45 d2          	movzwl -0x2e(%ebp),%eax
 804e597:	b4 0c                	mov    $0xc,%ah
 804e599:	66 89 45 d0          	mov    %ax,-0x30(%ebp)
 804e59d:	d9 6d d0             	fldcw  -0x30(%ebp)
 804e5a0:	db 5d dc             	fistpl -0x24(%ebp)
 804e5a3:	d9 6d d2             	fldcw  -0x2e(%ebp)
		j = static_cast<int>(this->center().y() - y);
 804e5a6:	8b 55 08             	mov    0x8(%ebp),%edx
 804e5a9:	8d 45 e8             	lea    -0x18(%ebp),%eax
 804e5ac:	89 54 24 04          	mov    %edx,0x4(%esp)
 804e5b0:	89 04 24             	mov    %eax,(%esp)
 804e5b3:	e8 ca e0 ff ff       	call   804c682 <_ZNK5Shape6centerEv>
 804e5b8:	83 ec 04             	sub    $0x4,%esp
 804e5bb:	8d 45 e8             	lea    -0x18(%ebp),%eax
 804e5be:	89 04 24             	mov    %eax,(%esp)
 804e5c1:	e8 9e d3 ff ff       	call   804b964 <_ZNK7Vector21yEv>
 804e5c6:	db 45 14             	fildl  0x14(%ebp)
 804e5c9:	de e9                	fsubrp %st,%st(1)
 804e5cb:	d9 7d d2             	fnstcw -0x2e(%ebp)
 804e5ce:	0f b7 45 d2          	movzwl -0x2e(%ebp),%eax
 804e5d2:	b4 0c                	mov    $0xc,%ah
 804e5d4:	66 89 45 d0          	mov    %ax,-0x30(%ebp)
 804e5d8:	d9 6d d0             	fldcw  -0x30(%ebp)
 804e5db:	db 5d e0             	fistpl -0x20(%ebp)
 804e5de:	d9 6d d2             	fldcw  -0x2e(%ebp)
		pixel = (*canvas)(i, j);
 804e5e1:	8b 55 e0             	mov    -0x20(%ebp),%edx
 804e5e4:	8b 45 dc             	mov    -0x24(%ebp),%eax
 804e5e7:	89 54 24 08          	mov    %edx,0x8(%esp)
 804e5eb:	89 44 24 04          	mov    %eax,0x4(%esp)
 804e5ef:	8b 45 0c             	mov    0xc(%ebp),%eax
 804e5f2:	89 04 24             	mov    %eax,(%esp)
 804e5f5:	e8 2c be ff ff       	call   804a426 <_ZN3PNGclEjj>
 804e5fa:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		*pixel = this->color();
 804e5fd:	8b 55 08             	mov    0x8(%ebp),%edx
 804e600:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
 804e603:	8d 45 d4             	lea    -0x2c(%ebp),%eax
 804e606:	89 54 24 04          	mov    %edx,0x4(%esp)
 804e60a:	89 04 24             	mov    %eax,(%esp)
 804e60d:	e8 ba e0 ff ff       	call   804c6cc <_ZNK5Shape5colorEv>
 804e612:	83 ec 04             	sub    $0x4,%esp
 804e615:	8b 45 d4             	mov    -0x2c(%ebp),%eax
 804e618:	89 03                	mov    %eax,(%ebx)

		i = static_cast<int>(this->center().x() - x);
 804e61a:	8b 55 08             	mov    0x8(%ebp),%edx
 804e61d:	8d 45 e8             	lea    -0x18(%ebp),%eax
 804e620:	89 54 24 04          	mov    %edx,0x4(%esp)
 804e624:	89 04 24             	mov    %eax,(%esp)
 804e627:	e8 56 e0 ff ff       	call   804c682 <_ZNK5Shape6centerEv>
 804e62c:	83 ec 04             	sub    $0x4,%esp
 804e62f:	8d 45 e8             	lea    -0x18(%ebp),%eax
 804e632:	89 04 24             	mov    %eax,(%esp)
 804e635:	e8 04 d3 ff ff       	call   804b93e <_ZNK7Vector21xEv>
 804e63a:	db 45 10             	fildl  0x10(%ebp)
 804e63d:	de e9                	fsubrp %st,%st(1)
 804e63f:	d9 7d d2             	fnstcw -0x2e(%ebp)
 804e642:	0f b7 45 d2          	movzwl -0x2e(%ebp),%eax
 804e646:	b4 0c                	mov    $0xc,%ah
 804e648:	66 89 45 d0          	mov    %ax,-0x30(%ebp)
 804e64c:	d9 6d d0             	fldcw  -0x30(%ebp)
 804e64f:	db 5d dc             	fistpl -0x24(%ebp)
 804e652:	d9 6d d2             	fldcw  -0x2e(%ebp)
		j = static_cast<int>(this->center().y() + y);
 804e655:	8b 55 08             	mov    0x8(%ebp),%edx
 804e658:	8d 45 e8             	lea    -0x18(%ebp),%eax
 804e65b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804e65f:	89 04 24             	mov    %eax,(%esp)
 804e662:	e8 1b e0 ff ff       	call   804c682 <_ZNK5Shape6centerEv>
 804e667:	83 ec 04             	sub    $0x4,%esp
 804e66a:	8d 45 e8             	lea    -0x18(%ebp),%eax
 804e66d:	89 04 24             	mov    %eax,(%esp)
 804e670:	e8 ef d2 ff ff       	call   804b964 <_ZNK7Vector21yEv>
 804e675:	db 45 14             	fildl  0x14(%ebp)
 804e678:	de c1                	faddp  %st,%st(1)
 804e67a:	d9 7d d2             	fnstcw -0x2e(%ebp)
 804e67d:	0f b7 45 d2          	movzwl -0x2e(%ebp),%eax
 804e681:	b4 0c                	mov    $0xc,%ah
 804e683:	66 89 45 d0          	mov    %ax,-0x30(%ebp)
 804e687:	d9 6d d0             	fldcw  -0x30(%ebp)
 804e68a:	db 5d e0             	fistpl -0x20(%ebp)
 804e68d:	d9 6d d2             	fldcw  -0x2e(%ebp)
		pixel = (*canvas)(i, j);
 804e690:	8b 55 e0             	mov    -0x20(%ebp),%edx
 804e693:	8b 45 dc             	mov    -0x24(%ebp),%eax
 804e696:	89 54 24 08          	mov    %edx,0x8(%esp)
 804e69a:	89 44 24 04          	mov    %eax,0x4(%esp)
 804e69e:	8b 45 0c             	mov    0xc(%ebp),%eax
 804e6a1:	89 04 24             	mov    %eax,(%esp)
 804e6a4:	e8 7d bd ff ff       	call   804a426 <_ZN3PNGclEjj>
 804e6a9:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		*pixel = this->color();
 804e6ac:	8b 55 08             	mov    0x8(%ebp),%edx
 804e6af:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
 804e6b2:	8d 45 d4             	lea    -0x2c(%ebp),%eax
 804e6b5:	89 54 24 04          	mov    %edx,0x4(%esp)
 804e6b9:	89 04 24             	mov    %eax,(%esp)
 804e6bc:	e8 0b e0 ff ff       	call   804c6cc <_ZNK5Shape5colorEv>
 804e6c1:	83 ec 04             	sub    $0x4,%esp
 804e6c4:	8b 45 d4             	mov    -0x2c(%ebp),%eax
 804e6c7:	89 03                	mov    %eax,(%ebx)

		i = static_cast<int>(this->center().x() - x);
 804e6c9:	8b 55 08             	mov    0x8(%ebp),%edx
 804e6cc:	8d 45 e8             	lea    -0x18(%ebp),%eax
 804e6cf:	89 54 24 04          	mov    %edx,0x4(%esp)
 804e6d3:	89 04 24             	mov    %eax,(%esp)
 804e6d6:	e8 a7 df ff ff       	call   804c682 <_ZNK5Shape6centerEv>
 804e6db:	83 ec 04             	sub    $0x4,%esp
 804e6de:	8d 45 e8             	lea    -0x18(%ebp),%eax
 804e6e1:	89 04 24             	mov    %eax,(%esp)
 804e6e4:	e8 55 d2 ff ff       	call   804b93e <_ZNK7Vector21xEv>
 804e6e9:	db 45 10             	fildl  0x10(%ebp)
 804e6ec:	de e9                	fsubrp %st,%st(1)
 804e6ee:	d9 7d d2             	fnstcw -0x2e(%ebp)
 804e6f1:	0f b7 45 d2          	movzwl -0x2e(%ebp),%eax
 804e6f5:	b4 0c                	mov    $0xc,%ah
 804e6f7:	66 89 45 d0          	mov    %ax,-0x30(%ebp)
 804e6fb:	d9 6d d0             	fldcw  -0x30(%ebp)
 804e6fe:	db 5d dc             	fistpl -0x24(%ebp)
 804e701:	d9 6d d2             	fldcw  -0x2e(%ebp)
		j = static_cast<int>(this->center().y() - y);
 804e704:	8b 55 08             	mov    0x8(%ebp),%edx
 804e707:	8d 45 e8             	lea    -0x18(%ebp),%eax
 804e70a:	89 54 24 04          	mov    %edx,0x4(%esp)
 804e70e:	89 04 24             	mov    %eax,(%esp)
 804e711:	e8 6c df ff ff       	call   804c682 <_ZNK5Shape6centerEv>
 804e716:	83 ec 04             	sub    $0x4,%esp
 804e719:	8d 45 e8             	lea    -0x18(%ebp),%eax
 804e71c:	89 04 24             	mov    %eax,(%esp)
 804e71f:	e8 40 d2 ff ff       	call   804b964 <_ZNK7Vector21yEv>
 804e724:	db 45 14             	fildl  0x14(%ebp)
 804e727:	de e9                	fsubrp %st,%st(1)
 804e729:	d9 7d d2             	fnstcw -0x2e(%ebp)
 804e72c:	0f b7 45 d2          	movzwl -0x2e(%ebp),%eax
 804e730:	b4 0c                	mov    $0xc,%ah
 804e732:	66 89 45 d0          	mov    %ax,-0x30(%ebp)
 804e736:	d9 6d d0             	fldcw  -0x30(%ebp)
 804e739:	db 5d e0             	fistpl -0x20(%ebp)
 804e73c:	d9 6d d2             	fldcw  -0x2e(%ebp)
		pixel = (*canvas)(i, j);
 804e73f:	8b 55 e0             	mov    -0x20(%ebp),%edx
 804e742:	8b 45 dc             	mov    -0x24(%ebp),%eax
 804e745:	89 54 24 08          	mov    %edx,0x8(%esp)
 804e749:	89 44 24 04          	mov    %eax,0x4(%esp)
 804e74d:	8b 45 0c             	mov    0xc(%ebp),%eax
 804e750:	89 04 24             	mov    %eax,(%esp)
 804e753:	e8 ce bc ff ff       	call   804a426 <_ZN3PNGclEjj>
 804e758:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		*pixel = this->color();
 804e75b:	8b 55 08             	mov    0x8(%ebp),%edx
 804e75e:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
 804e761:	8d 45 d4             	lea    -0x2c(%ebp),%eax
 804e764:	89 54 24 04          	mov    %edx,0x4(%esp)
 804e768:	89 04 24             	mov    %eax,(%esp)
 804e76b:	e8 5c df ff ff       	call   804c6cc <_ZNK5Shape5colorEv>
 804e770:	83 ec 04             	sub    $0x4,%esp
 804e773:	8b 45 d4             	mov    -0x2c(%ebp),%eax
 804e776:	89 03                	mov    %eax,(%ebx)

		i = static_cast<int>(this->center().x() + y);
 804e778:	8b 55 08             	mov    0x8(%ebp),%edx
 804e77b:	8d 45 e8             	lea    -0x18(%ebp),%eax
 804e77e:	89 54 24 04          	mov    %edx,0x4(%esp)
 804e782:	89 04 24             	mov    %eax,(%esp)
 804e785:	e8 f8 de ff ff       	call   804c682 <_ZNK5Shape6centerEv>
 804e78a:	83 ec 04             	sub    $0x4,%esp
 804e78d:	8d 45 e8             	lea    -0x18(%ebp),%eax
 804e790:	89 04 24             	mov    %eax,(%esp)
 804e793:	e8 a6 d1 ff ff       	call   804b93e <_ZNK7Vector21xEv>
 804e798:	db 45 14             	fildl  0x14(%ebp)
 804e79b:	de c1                	faddp  %st,%st(1)
 804e79d:	d9 7d d2             	fnstcw -0x2e(%ebp)
 804e7a0:	0f b7 45 d2          	movzwl -0x2e(%ebp),%eax
 804e7a4:	b4 0c                	mov    $0xc,%ah
 804e7a6:	66 89 45 d0          	mov    %ax,-0x30(%ebp)
 804e7aa:	d9 6d d0             	fldcw  -0x30(%ebp)
 804e7ad:	db 5d dc             	fistpl -0x24(%ebp)
 804e7b0:	d9 6d d2             	fldcw  -0x2e(%ebp)
		j = static_cast<int>(this->center().y() + x);
 804e7b3:	8b 55 08             	mov    0x8(%ebp),%edx
 804e7b6:	8d 45 e8             	lea    -0x18(%ebp),%eax
 804e7b9:	89 54 24 04          	mov    %edx,0x4(%esp)
 804e7bd:	89 04 24             	mov    %eax,(%esp)
 804e7c0:	e8 bd de ff ff       	call   804c682 <_ZNK5Shape6centerEv>
 804e7c5:	83 ec 04             	sub    $0x4,%esp
 804e7c8:	8d 45 e8             	lea    -0x18(%ebp),%eax
 804e7cb:	89 04 24             	mov    %eax,(%esp)
 804e7ce:	e8 91 d1 ff ff       	call   804b964 <_ZNK7Vector21yEv>
 804e7d3:	db 45 10             	fildl  0x10(%ebp)
 804e7d6:	de c1                	faddp  %st,%st(1)
 804e7d8:	d9 7d d2             	fnstcw -0x2e(%ebp)
 804e7db:	0f b7 45 d2          	movzwl -0x2e(%ebp),%eax
 804e7df:	b4 0c                	mov    $0xc,%ah
 804e7e1:	66 89 45 d0          	mov    %ax,-0x30(%ebp)
 804e7e5:	d9 6d d0             	fldcw  -0x30(%ebp)
 804e7e8:	db 5d e0             	fistpl -0x20(%ebp)
 804e7eb:	d9 6d d2             	fldcw  -0x2e(%ebp)
		pixel = (*canvas)(i, j);
 804e7ee:	8b 55 e0             	mov    -0x20(%ebp),%edx
 804e7f1:	8b 45 dc             	mov    -0x24(%ebp),%eax
 804e7f4:	89 54 24 08          	mov    %edx,0x8(%esp)
 804e7f8:	89 44 24 04          	mov    %eax,0x4(%esp)
 804e7fc:	8b 45 0c             	mov    0xc(%ebp),%eax
 804e7ff:	89 04 24             	mov    %eax,(%esp)
 804e802:	e8 1f bc ff ff       	call   804a426 <_ZN3PNGclEjj>
 804e807:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		*pixel = this->color();
 804e80a:	8b 55 08             	mov    0x8(%ebp),%edx
 804e80d:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
 804e810:	8d 45 d4             	lea    -0x2c(%ebp),%eax
 804e813:	89 54 24 04          	mov    %edx,0x4(%esp)
 804e817:	89 04 24             	mov    %eax,(%esp)
 804e81a:	e8 ad de ff ff       	call   804c6cc <_ZNK5Shape5colorEv>
 804e81f:	83 ec 04             	sub    $0x4,%esp
 804e822:	8b 45 d4             	mov    -0x2c(%ebp),%eax
 804e825:	89 03                	mov    %eax,(%ebx)

		i = static_cast<int>(this->center().x() + y);
 804e827:	8b 55 08             	mov    0x8(%ebp),%edx
 804e82a:	8d 45 e8             	lea    -0x18(%ebp),%eax
 804e82d:	89 54 24 04          	mov    %edx,0x4(%esp)
 804e831:	89 04 24             	mov    %eax,(%esp)
 804e834:	e8 49 de ff ff       	call   804c682 <_ZNK5Shape6centerEv>
 804e839:	83 ec 04             	sub    $0x4,%esp
 804e83c:	8d 45 e8             	lea    -0x18(%ebp),%eax
 804e83f:	89 04 24             	mov    %eax,(%esp)
 804e842:	e8 f7 d0 ff ff       	call   804b93e <_ZNK7Vector21xEv>
 804e847:	db 45 14             	fildl  0x14(%ebp)
 804e84a:	de c1                	faddp  %st,%st(1)
 804e84c:	d9 7d d2             	fnstcw -0x2e(%ebp)
 804e84f:	0f b7 45 d2          	movzwl -0x2e(%ebp),%eax
 804e853:	b4 0c                	mov    $0xc,%ah
 804e855:	66 89 45 d0          	mov    %ax,-0x30(%ebp)
 804e859:	d9 6d d0             	fldcw  -0x30(%ebp)
 804e85c:	db 5d dc             	fistpl -0x24(%ebp)
 804e85f:	d9 6d d2             	fldcw  -0x2e(%ebp)
		j = static_cast<int>(this->center().y() - x);
 804e862:	8b 55 08             	mov    0x8(%ebp),%edx
 804e865:	8d 45 e8             	lea    -0x18(%ebp),%eax
 804e868:	89 54 24 04          	mov    %edx,0x4(%esp)
 804e86c:	89 04 24             	mov    %eax,(%esp)
 804e86f:	e8 0e de ff ff       	call   804c682 <_ZNK5Shape6centerEv>
 804e874:	83 ec 04             	sub    $0x4,%esp
 804e877:	8d 45 e8             	lea    -0x18(%ebp),%eax
 804e87a:	89 04 24             	mov    %eax,(%esp)
 804e87d:	e8 e2 d0 ff ff       	call   804b964 <_ZNK7Vector21yEv>
 804e882:	db 45 10             	fildl  0x10(%ebp)
 804e885:	de e9                	fsubrp %st,%st(1)
 804e887:	d9 7d d2             	fnstcw -0x2e(%ebp)
 804e88a:	0f b7 45 d2          	movzwl -0x2e(%ebp),%eax
 804e88e:	b4 0c                	mov    $0xc,%ah
 804e890:	66 89 45 d0          	mov    %ax,-0x30(%ebp)
 804e894:	d9 6d d0             	fldcw  -0x30(%ebp)
 804e897:	db 5d e0             	fistpl -0x20(%ebp)
 804e89a:	d9 6d d2             	fldcw  -0x2e(%ebp)
		pixel = (*canvas)(i, j);
 804e89d:	8b 55 e0             	mov    -0x20(%ebp),%edx
 804e8a0:	8b 45 dc             	mov    -0x24(%ebp),%eax
 804e8a3:	89 54 24 08          	mov    %edx,0x8(%esp)
 804e8a7:	89 44 24 04          	mov    %eax,0x4(%esp)
 804e8ab:	8b 45 0c             	mov    0xc(%ebp),%eax
 804e8ae:	89 04 24             	mov    %eax,(%esp)
 804e8b1:	e8 70 bb ff ff       	call   804a426 <_ZN3PNGclEjj>
 804e8b6:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		*pixel = this->color();
 804e8b9:	8b 55 08             	mov    0x8(%ebp),%edx
 804e8bc:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
 804e8bf:	8d 45 d4             	lea    -0x2c(%ebp),%eax
 804e8c2:	89 54 24 04          	mov    %edx,0x4(%esp)
 804e8c6:	89 04 24             	mov    %eax,(%esp)
 804e8c9:	e8 fe dd ff ff       	call   804c6cc <_ZNK5Shape5colorEv>
 804e8ce:	83 ec 04             	sub    $0x4,%esp
 804e8d1:	8b 45 d4             	mov    -0x2c(%ebp),%eax
 804e8d4:	89 03                	mov    %eax,(%ebx)

		i = static_cast<int>(this->center().x() - y);
 804e8d6:	8b 55 08             	mov    0x8(%ebp),%edx
 804e8d9:	8d 45 e8             	lea    -0x18(%ebp),%eax
 804e8dc:	89 54 24 04          	mov    %edx,0x4(%esp)
 804e8e0:	89 04 24             	mov    %eax,(%esp)
 804e8e3:	e8 9a dd ff ff       	call   804c682 <_ZNK5Shape6centerEv>
 804e8e8:	83 ec 04             	sub    $0x4,%esp
 804e8eb:	8d 45 e8             	lea    -0x18(%ebp),%eax
 804e8ee:	89 04 24             	mov    %eax,(%esp)
 804e8f1:	e8 48 d0 ff ff       	call   804b93e <_ZNK7Vector21xEv>
 804e8f6:	db 45 14             	fildl  0x14(%ebp)
 804e8f9:	de e9                	fsubrp %st,%st(1)
 804e8fb:	d9 7d d2             	fnstcw -0x2e(%ebp)
 804e8fe:	0f b7 45 d2          	movzwl -0x2e(%ebp),%eax
 804e902:	b4 0c                	mov    $0xc,%ah
 804e904:	66 89 45 d0          	mov    %ax,-0x30(%ebp)
 804e908:	d9 6d d0             	fldcw  -0x30(%ebp)
 804e90b:	db 5d dc             	fistpl -0x24(%ebp)
 804e90e:	d9 6d d2             	fldcw  -0x2e(%ebp)
		j = static_cast<int>(this->center().y() + x);
 804e911:	8b 55 08             	mov    0x8(%ebp),%edx
 804e914:	8d 45 e8             	lea    -0x18(%ebp),%eax
 804e917:	89 54 24 04          	mov    %edx,0x4(%esp)
 804e91b:	89 04 24             	mov    %eax,(%esp)
 804e91e:	e8 5f dd ff ff       	call   804c682 <_ZNK5Shape6centerEv>
 804e923:	83 ec 04             	sub    $0x4,%esp
 804e926:	8d 45 e8             	lea    -0x18(%ebp),%eax
 804e929:	89 04 24             	mov    %eax,(%esp)
 804e92c:	e8 33 d0 ff ff       	call   804b964 <_ZNK7Vector21yEv>
 804e931:	db 45 10             	fildl  0x10(%ebp)
 804e934:	de c1                	faddp  %st,%st(1)
 804e936:	d9 7d d2             	fnstcw -0x2e(%ebp)
 804e939:	0f b7 45 d2          	movzwl -0x2e(%ebp),%eax
 804e93d:	b4 0c                	mov    $0xc,%ah
 804e93f:	66 89 45 d0          	mov    %ax,-0x30(%ebp)
 804e943:	d9 6d d0             	fldcw  -0x30(%ebp)
 804e946:	db 5d e0             	fistpl -0x20(%ebp)
 804e949:	d9 6d d2             	fldcw  -0x2e(%ebp)
		pixel = (*canvas)(i, j);
 804e94c:	8b 55 e0             	mov    -0x20(%ebp),%edx
 804e94f:	8b 45 dc             	mov    -0x24(%ebp),%eax
 804e952:	89 54 24 08          	mov    %edx,0x8(%esp)
 804e956:	89 44 24 04          	mov    %eax,0x4(%esp)
 804e95a:	8b 45 0c             	mov    0xc(%ebp),%eax
 804e95d:	89 04 24             	mov    %eax,(%esp)
 804e960:	e8 c1 ba ff ff       	call   804a426 <_ZN3PNGclEjj>
 804e965:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		*pixel = this->color();
 804e968:	8b 55 08             	mov    0x8(%ebp),%edx
 804e96b:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
 804e96e:	8d 45 d4             	lea    -0x2c(%ebp),%eax
 804e971:	89 54 24 04          	mov    %edx,0x4(%esp)
 804e975:	89 04 24             	mov    %eax,(%esp)
 804e978:	e8 4f dd ff ff       	call   804c6cc <_ZNK5Shape5colorEv>
 804e97d:	83 ec 04             	sub    $0x4,%esp
 804e980:	8b 45 d4             	mov    -0x2c(%ebp),%eax
 804e983:	89 03                	mov    %eax,(%ebx)

		i = static_cast<int>(this->center().x() - y);
 804e985:	8b 55 08             	mov    0x8(%ebp),%edx
 804e988:	8d 45 e8             	lea    -0x18(%ebp),%eax
 804e98b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804e98f:	89 04 24             	mov    %eax,(%esp)
 804e992:	e8 eb dc ff ff       	call   804c682 <_ZNK5Shape6centerEv>
 804e997:	83 ec 04             	sub    $0x4,%esp
 804e99a:	8d 45 e8             	lea    -0x18(%ebp),%eax
 804e99d:	89 04 24             	mov    %eax,(%esp)
 804e9a0:	e8 99 cf ff ff       	call   804b93e <_ZNK7Vector21xEv>
 804e9a5:	db 45 14             	fildl  0x14(%ebp)
 804e9a8:	de e9                	fsubrp %st,%st(1)
 804e9aa:	d9 7d d2             	fnstcw -0x2e(%ebp)
 804e9ad:	0f b7 45 d2          	movzwl -0x2e(%ebp),%eax
 804e9b1:	b4 0c                	mov    $0xc,%ah
 804e9b3:	66 89 45 d0          	mov    %ax,-0x30(%ebp)
 804e9b7:	d9 6d d0             	fldcw  -0x30(%ebp)
 804e9ba:	db 5d dc             	fistpl -0x24(%ebp)
 804e9bd:	d9 6d d2             	fldcw  -0x2e(%ebp)
		j = static_cast<int>(this->center().y() - x);
 804e9c0:	8b 55 08             	mov    0x8(%ebp),%edx
 804e9c3:	8d 45 e8             	lea    -0x18(%ebp),%eax
 804e9c6:	89 54 24 04          	mov    %edx,0x4(%esp)
 804e9ca:	89 04 24             	mov    %eax,(%esp)
 804e9cd:	e8 b0 dc ff ff       	call   804c682 <_ZNK5Shape6centerEv>
 804e9d2:	83 ec 04             	sub    $0x4,%esp
 804e9d5:	8d 45 e8             	lea    -0x18(%ebp),%eax
 804e9d8:	89 04 24             	mov    %eax,(%esp)
 804e9db:	e8 84 cf ff ff       	call   804b964 <_ZNK7Vector21yEv>
 804e9e0:	db 45 10             	fildl  0x10(%ebp)
 804e9e3:	de e9                	fsubrp %st,%st(1)
 804e9e5:	d9 7d d2             	fnstcw -0x2e(%ebp)
 804e9e8:	0f b7 45 d2          	movzwl -0x2e(%ebp),%eax
 804e9ec:	b4 0c                	mov    $0xc,%ah
 804e9ee:	66 89 45 d0          	mov    %ax,-0x30(%ebp)
 804e9f2:	d9 6d d0             	fldcw  -0x30(%ebp)
 804e9f5:	db 5d e0             	fistpl -0x20(%ebp)
 804e9f8:	d9 6d d2             	fldcw  -0x2e(%ebp)
		pixel = (*canvas)(i, j);
 804e9fb:	8b 55 e0             	mov    -0x20(%ebp),%edx
 804e9fe:	8b 45 dc             	mov    -0x24(%ebp),%eax
 804ea01:	89 54 24 08          	mov    %edx,0x8(%esp)
 804ea05:	89 44 24 04          	mov    %eax,0x4(%esp)
 804ea09:	8b 45 0c             	mov    0xc(%ebp),%eax
 804ea0c:	89 04 24             	mov    %eax,(%esp)
 804ea0f:	e8 12 ba ff ff       	call   804a426 <_ZN3PNGclEjj>
 804ea14:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		*pixel = this->color();
 804ea17:	8b 55 08             	mov    0x8(%ebp),%edx
 804ea1a:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
 804ea1d:	8d 45 d4             	lea    -0x2c(%ebp),%eax
 804ea20:	89 54 24 04          	mov    %edx,0x4(%esp)
 804ea24:	89 04 24             	mov    %eax,(%esp)
 804ea27:	e8 a0 dc ff ff       	call   804c6cc <_ZNK5Shape5colorEv>
 804ea2c:	83 ec 04             	sub    $0x4,%esp
 804ea2f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
 804ea32:	89 03                	mov    %eax,(%ebx)

		y -= 1;
 804ea34:	83 6d 14 01          	subl   $0x1,0x14(%ebp)
void Circle::drawPoints(PNG* canvas, int x, int y) const
{
	RGBAPixel* pixel;
	int i;
	int j;
	while (y > 0)
 804ea38:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
 804ea3c:	0f 8f 7a fa ff ff    	jg     804e4bc <_ZNK6Circle10drawPointsEP3PNGii+0xc>
		pixel = (*canvas)(i, j);
		*pixel = this->color();

		y -= 1;
	}
}
 804ea42:	8b 5d fc             	mov    -0x4(%ebp),%ebx
 804ea45:	c9                   	leave  
 804ea46:	c3                   	ret    
 804ea47:	90                   	nop

0804ea48 <_ZNK6Circle4drawEP3PNG>:

void Circle::draw(PNG* canvas) const
{
 804ea48:	55                   	push   %ebp
 804ea49:	89 e5                	mov    %esp,%ebp
 804ea4b:	53                   	push   %ebx
 804ea4c:	83 ec 54             	sub    $0x54,%esp
	RGBAPixel* pixel = (*canvas)(static_cast<int>(this->center().x()),
			static_cast<int>(this->center().y()));
 804ea4f:	8b 55 08             	mov    0x8(%ebp),%edx
 804ea52:	8d 45 e8             	lea    -0x18(%ebp),%eax
 804ea55:	89 54 24 04          	mov    %edx,0x4(%esp)
 804ea59:	89 04 24             	mov    %eax,(%esp)
 804ea5c:	e8 21 dc ff ff       	call   804c682 <_ZNK5Shape6centerEv>
 804ea61:	83 ec 04             	sub    $0x4,%esp
 804ea64:	8d 45 e8             	lea    -0x18(%ebp),%eax
 804ea67:	89 04 24             	mov    %eax,(%esp)
 804ea6a:	e8 f5 ce ff ff       	call   804b964 <_ZNK7Vector21yEv>
 804ea6f:	d9 7d c2             	fnstcw -0x3e(%ebp)
 804ea72:	0f b7 45 c2          	movzwl -0x3e(%ebp),%eax
 804ea76:	b4 0c                	mov    $0xc,%ah
 804ea78:	66 89 45 c0          	mov    %ax,-0x40(%ebp)
 804ea7c:	d9 6d c0             	fldcw  -0x40(%ebp)
 804ea7f:	db 5d bc             	fistpl -0x44(%ebp)
 804ea82:	d9 6d c2             	fldcw  -0x3e(%ebp)
 804ea85:	8b 45 bc             	mov    -0x44(%ebp),%eax
 804ea88:	89 c3                	mov    %eax,%ebx
	}
}

void Circle::draw(PNG* canvas) const
{
	RGBAPixel* pixel = (*canvas)(static_cast<int>(this->center().x()),
 804ea8a:	8b 55 08             	mov    0x8(%ebp),%edx
 804ea8d:	8d 45 d8             	lea    -0x28(%ebp),%eax
 804ea90:	89 54 24 04          	mov    %edx,0x4(%esp)
 804ea94:	89 04 24             	mov    %eax,(%esp)
 804ea97:	e8 e6 db ff ff       	call   804c682 <_ZNK5Shape6centerEv>
 804ea9c:	83 ec 04             	sub    $0x4,%esp
 804ea9f:	8d 45 d8             	lea    -0x28(%ebp),%eax
 804eaa2:	89 04 24             	mov    %eax,(%esp)
 804eaa5:	e8 94 ce ff ff       	call   804b93e <_ZNK7Vector21xEv>
			static_cast<int>(this->center().y()));
 804eaaa:	d9 7d c2             	fnstcw -0x3e(%ebp)
 804eaad:	0f b7 45 c2          	movzwl -0x3e(%ebp),%eax
 804eab1:	b4 0c                	mov    $0xc,%ah
 804eab3:	66 89 45 c0          	mov    %ax,-0x40(%ebp)
 804eab7:	d9 6d c0             	fldcw  -0x40(%ebp)
 804eaba:	db 5d bc             	fistpl -0x44(%ebp)
 804eabd:	d9 6d c2             	fldcw  -0x3e(%ebp)
 804eac0:	8b 45 bc             	mov    -0x44(%ebp),%eax
 804eac3:	89 5c 24 08          	mov    %ebx,0x8(%esp)
 804eac7:	89 44 24 04          	mov    %eax,0x4(%esp)
 804eacb:	8b 45 0c             	mov    0xc(%ebp),%eax
 804eace:	89 04 24             	mov    %eax,(%esp)
 804ead1:	e8 50 b9 ff ff       	call   804a426 <_ZN3PNGclEjj>
 804ead6:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	*pixel = this->color();
 804ead9:	8b 55 08             	mov    0x8(%ebp),%edx
 804eadc:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
 804eadf:	8d 45 c4             	lea    -0x3c(%ebp),%eax
 804eae2:	89 54 24 04          	mov    %edx,0x4(%esp)
 804eae6:	89 04 24             	mov    %eax,(%esp)
 804eae9:	e8 de db ff ff       	call   804c6cc <_ZNK5Shape5colorEv>
 804eaee:	83 ec 04             	sub    $0x4,%esp
 804eaf1:	8b 45 c4             	mov    -0x3c(%ebp),%eax
 804eaf4:	89 03                	mov    %eax,(%ebx)

	int x = 0;
 804eaf6:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
	int y = this->radius_;
 804eafd:	8b 45 08             	mov    0x8(%ebp),%eax
 804eb00:	8b 40 18             	mov    0x18(%eax),%eax
 804eb03:	89 45 cc             	mov    %eax,-0x34(%ebp)
	int p = 1 - this->radius_;
 804eb06:	8b 45 08             	mov    0x8(%ebp),%eax
 804eb09:	8b 40 18             	mov    0x18(%eax),%eax
 804eb0c:	ba 01 00 00 00       	mov    $0x1,%edx
 804eb11:	29 c2                	sub    %eax,%edx
 804eb13:	89 d0                	mov    %edx,%eax
 804eb15:	89 45 d0             	mov    %eax,-0x30(%ebp)
	this->drawPoints(canvas, x, y);
 804eb18:	8b 45 cc             	mov    -0x34(%ebp),%eax
 804eb1b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804eb1f:	8b 45 c8             	mov    -0x38(%ebp),%eax
 804eb22:	89 44 24 08          	mov    %eax,0x8(%esp)
 804eb26:	8b 45 0c             	mov    0xc(%ebp),%eax
 804eb29:	89 44 24 04          	mov    %eax,0x4(%esp)
 804eb2d:	8b 45 08             	mov    0x8(%ebp),%eax
 804eb30:	89 04 24             	mov    %eax,(%esp)
 804eb33:	e8 78 f9 ff ff       	call   804e4b0 <_ZNK6Circle10drawPointsEP3PNGii>

	while (x < y)
 804eb38:	eb 4d                	jmp    804eb87 <_ZNK6Circle4drawEP3PNG+0x13f>
	{
		x++;
 804eb3a:	83 45 c8 01          	addl   $0x1,-0x38(%ebp)
		if (p < 0)
 804eb3e:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
 804eb42:	79 0d                	jns    804eb51 <_ZNK6Circle4drawEP3PNG+0x109>
		{
			p += 2 * x + 1;
 804eb44:	8b 45 c8             	mov    -0x38(%ebp),%eax
 804eb47:	01 c0                	add    %eax,%eax
 804eb49:	83 c0 01             	add    $0x1,%eax
 804eb4c:	01 45 d0             	add    %eax,-0x30(%ebp)
 804eb4f:	eb 16                	jmp    804eb67 <_ZNK6Circle4drawEP3PNG+0x11f>
		} else
		{
			y--;
 804eb51:	83 6d cc 01          	subl   $0x1,-0x34(%ebp)
			p += 2 * (x - y + 1);
 804eb55:	8b 45 cc             	mov    -0x34(%ebp),%eax
 804eb58:	8b 55 c8             	mov    -0x38(%ebp),%edx
 804eb5b:	29 c2                	sub    %eax,%edx
 804eb5d:	89 d0                	mov    %edx,%eax
 804eb5f:	83 c0 01             	add    $0x1,%eax
 804eb62:	01 c0                	add    %eax,%eax
 804eb64:	01 45 d0             	add    %eax,-0x30(%ebp)
		}
		this->drawPoints(canvas, x, y);
 804eb67:	8b 45 cc             	mov    -0x34(%ebp),%eax
 804eb6a:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804eb6e:	8b 45 c8             	mov    -0x38(%ebp),%eax
 804eb71:	89 44 24 08          	mov    %eax,0x8(%esp)
 804eb75:	8b 45 0c             	mov    0xc(%ebp),%eax
 804eb78:	89 44 24 04          	mov    %eax,0x4(%esp)
 804eb7c:	8b 45 08             	mov    0x8(%ebp),%eax
 804eb7f:	89 04 24             	mov    %eax,(%esp)
 804eb82:	e8 29 f9 ff ff       	call   804e4b0 <_ZNK6Circle10drawPointsEP3PNGii>
	int x = 0;
	int y = this->radius_;
	int p = 1 - this->radius_;
	this->drawPoints(canvas, x, y);

	while (x < y)
 804eb87:	8b 45 c8             	mov    -0x38(%ebp),%eax
 804eb8a:	3b 45 cc             	cmp    -0x34(%ebp),%eax
 804eb8d:	7c ab                	jl     804eb3a <_ZNK6Circle4drawEP3PNG+0xf2>
			y--;
			p += 2 * (x - y + 1);
		}
		this->drawPoints(canvas, x, y);
	}
}
 804eb8f:	8b 5d fc             	mov    -0x4(%ebp),%ebx
 804eb92:	c9                   	leave  
 804eb93:	c3                   	ret    

0804eb94 <_ZNK6Circle6radiusEv>:

int Circle::radius() const
{
 804eb94:	55                   	push   %ebp
 804eb95:	89 e5                	mov    %esp,%ebp
	return this->radius_;
 804eb97:	8b 45 08             	mov    0x8(%ebp),%eax
 804eb9a:	8b 40 18             	mov    0x18(%eax),%eax
}
 804eb9d:	5d                   	pop    %ebp
 804eb9e:	c3                   	ret    
 804eb9f:	90                   	nop

0804eba0 <_ZN6Circle10set_radiusEi>:

void Circle::set_radius(int pradius)
{
 804eba0:	55                   	push   %ebp
 804eba1:	89 e5                	mov    %esp,%ebp
	this->radius_ = pradius;
 804eba3:	8b 45 08             	mov    0x8(%ebp),%eax
 804eba6:	8b 55 0c             	mov    0xc(%ebp),%edx
 804eba9:	89 50 18             	mov    %edx,0x18(%eax)
}
 804ebac:	5d                   	pop    %ebp
 804ebad:	c3                   	ret    

0804ebae <_Z41__static_initialization_and_destruction_0ii>:
 804ebae:	55                   	push   %ebp
 804ebaf:	89 e5                	mov    %esp,%ebp
 804ebb1:	83 ec 18             	sub    $0x18,%esp
 804ebb4:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
 804ebb8:	75 31                	jne    804ebeb <_Z41__static_initialization_and_destruction_0ii+0x3d>
 804ebba:	81 7d 0c ff ff 00 00 	cmpl   $0xffff,0xc(%ebp)
 804ebc1:	75 28                	jne    804ebeb <_Z41__static_initialization_and_destruction_0ii+0x3d>
 804ebc3:	c7 04 24 d6 42 05 08 	movl   $0x80542d6,(%esp)
 804ebca:	e8 a1 a7 ff ff       	call   8049370 <_ZNSt8ios_base4InitC1Ev@plt>
 804ebcf:	c7 44 24 08 34 41 05 	movl   $0x8054134,0x8(%esp)
 804ebd6:	08 
 804ebd7:	c7 44 24 04 d6 42 05 	movl   $0x80542d6,0x4(%esp)
 804ebde:	08 
 804ebdf:	c7 04 24 00 94 04 08 	movl   $0x8049400,(%esp)
 804ebe6:	e8 05 a7 ff ff       	call   80492f0 <__cxa_atexit@plt>
 804ebeb:	c9                   	leave  
 804ebec:	c3                   	ret    

0804ebed <_GLOBAL__sub_I__ZN6CircleC2ERK7Vector2RK9RGBAPixeli>:
 804ebed:	55                   	push   %ebp
 804ebee:	89 e5                	mov    %esp,%ebp
 804ebf0:	83 ec 18             	sub    $0x18,%esp
 804ebf3:	c7 44 24 04 ff ff 00 	movl   $0xffff,0x4(%esp)
 804ebfa:	00 
 804ebfb:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
 804ec02:	e8 a7 ff ff ff       	call   804ebae <_Z41__static_initialization_and_destruction_0ii>
 804ec07:	c9                   	leave  
 804ec08:	c3                   	ret    
 804ec09:	90                   	nop

0804ec0a <_ZN4Line19linearInterpolationERK7Vector2S2_>:
#include <vector>

using std::vector;

vector<double> Line::linearInterpolation(const Vector2& a, const Vector2& b)
{
 804ec0a:	55                   	push   %ebp
 804ec0b:	89 e5                	mov    %esp,%ebp
 804ec0d:	53                   	push   %ebx
 804ec0e:	83 ec 44             	sub    $0x44,%esp
	/* http://gabrielongraphics.blogspot.com/2005/09/drawing-line-segments.html */
	vector<double> values;
 804ec11:	8b 45 08             	mov    0x8(%ebp),%eax
 804ec14:	89 04 24             	mov    %eax,(%esp)
 804ec17:	e8 c6 06 00 00       	call   804f2e2 <_ZNSt6vectorIdSaIdEEC1Ev>

	const int num_steps = abs(static_cast<int>(b.x() - a.x()));
 804ec1c:	8b 45 10             	mov    0x10(%ebp),%eax
 804ec1f:	89 04 24             	mov    %eax,(%esp)
 804ec22:	e8 17 cd ff ff       	call   804b93e <_ZNK7Vector21xEv>
 804ec27:	dd 5d c8             	fstpl  -0x38(%ebp)
 804ec2a:	8b 45 0c             	mov    0xc(%ebp),%eax
 804ec2d:	89 04 24             	mov    %eax,(%esp)
 804ec30:	e8 09 cd ff ff       	call   804b93e <_ZNK7Vector21xEv>
 804ec35:	dc 6d c8             	fsubrl -0x38(%ebp)
 804ec38:	d9 7d d6             	fnstcw -0x2a(%ebp)
 804ec3b:	0f b7 45 d6          	movzwl -0x2a(%ebp),%eax
 804ec3f:	b4 0c                	mov    $0xc,%ah
 804ec41:	66 89 45 d4          	mov    %ax,-0x2c(%ebp)
 804ec45:	d9 6d d4             	fldcw  -0x2c(%ebp)
 804ec48:	db 5d d0             	fistpl -0x30(%ebp)
 804ec4b:	d9 6d d6             	fldcw  -0x2a(%ebp)
 804ec4e:	8b 55 d0             	mov    -0x30(%ebp),%edx
 804ec51:	89 d0                	mov    %edx,%eax
 804ec53:	c1 f8 1f             	sar    $0x1f,%eax
 804ec56:	31 c2                	xor    %eax,%edx
 804ec58:	89 55 e4             	mov    %edx,-0x1c(%ebp)
 804ec5b:	29 45 e4             	sub    %eax,-0x1c(%ebp)

	if (num_steps == 0)
 804ec5e:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
 804ec62:	75 22                	jne    804ec86 <_ZN4Line19linearInterpolationERK7Vector2S2_+0x7c>
	{
		values.push_back(a.y());
 804ec64:	8b 45 0c             	mov    0xc(%ebp),%eax
 804ec67:	89 04 24             	mov    %eax,(%esp)
 804ec6a:	e8 f5 cc ff ff       	call   804b964 <_ZNK7Vector21yEv>
 804ec6f:	dd 5d e8             	fstpl  -0x18(%ebp)
 804ec72:	8d 45 e8             	lea    -0x18(%ebp),%eax
 804ec75:	89 44 24 04          	mov    %eax,0x4(%esp)
 804ec79:	8b 45 08             	mov    0x8(%ebp),%eax
 804ec7c:	89 04 24             	mov    %eax,(%esp)
 804ec7f:	e8 72 06 00 00       	call   804f2f6 <_ZNSt6vectorIdSaIdEE9push_backERKd>
 804ec84:	eb 66                	jmp    804ecec <_ZN4Line19linearInterpolationERK7Vector2S2_+0xe2>
	}
	else
	{
		const double slope = (b.y() - a.y()) / num_steps;
 804ec86:	8b 45 10             	mov    0x10(%ebp),%eax
 804ec89:	89 04 24             	mov    %eax,(%esp)
 804ec8c:	e8 d3 cc ff ff       	call   804b964 <_ZNK7Vector21yEv>
 804ec91:	dd 5d c8             	fstpl  -0x38(%ebp)
 804ec94:	8b 45 0c             	mov    0xc(%ebp),%eax
 804ec97:	89 04 24             	mov    %eax,(%esp)
 804ec9a:	e8 c5 cc ff ff       	call   804b964 <_ZNK7Vector21yEv>
 804ec9f:	dd 45 c8             	fldl   -0x38(%ebp)
 804eca2:	de e1                	fsubp  %st,%st(1)
 804eca4:	db 45 e4             	fildl  -0x1c(%ebp)
 804eca7:	de f9                	fdivrp %st,%st(1)
 804eca9:	dd 5d f0             	fstpl  -0x10(%ebp)

		double y = a.y();
 804ecac:	8b 45 0c             	mov    0xc(%ebp),%eax
 804ecaf:	89 04 24             	mov    %eax,(%esp)
 804ecb2:	e8 ad cc ff ff       	call   804b964 <_ZNK7Vector21yEv>
 804ecb7:	dd 5d e8             	fstpl  -0x18(%ebp)
		for (int i = 0; i < num_steps; i++)
 804ecba:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
 804ecc1:	eb 1f                	jmp    804ece2 <_ZN4Line19linearInterpolationERK7Vector2S2_+0xd8>
		{
			values.push_back(y);
 804ecc3:	8d 45 e8             	lea    -0x18(%ebp),%eax
 804ecc6:	89 44 24 04          	mov    %eax,0x4(%esp)
 804ecca:	8b 45 08             	mov    0x8(%ebp),%eax
 804eccd:	89 04 24             	mov    %eax,(%esp)
 804ecd0:	e8 21 06 00 00       	call   804f2f6 <_ZNSt6vectorIdSaIdEE9push_backERKd>
			y += slope;
 804ecd5:	dd 45 e8             	fldl   -0x18(%ebp)
 804ecd8:	dc 45 f0             	faddl  -0x10(%ebp)
 804ecdb:	dd 5d e8             	fstpl  -0x18(%ebp)
	else
	{
		const double slope = (b.y() - a.y()) / num_steps;

		double y = a.y();
		for (int i = 0; i < num_steps; i++)
 804ecde:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
 804ece2:	8b 45 e0             	mov    -0x20(%ebp),%eax
 804ece5:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
 804ece8:	7c d9                	jl     804ecc3 <_ZN4Line19linearInterpolationERK7Vector2S2_+0xb9>
			values.push_back(y);
			y += slope;
		}
	}

	return values;
 804ecea:	eb 19                	jmp    804ed05 <_ZN4Line19linearInterpolationERK7Vector2S2_+0xfb>
 804ecec:	eb 17                	jmp    804ed05 <_ZN4Line19linearInterpolationERK7Vector2S2_+0xfb>
 804ecee:	89 c3                	mov    %eax,%ebx
 804ecf0:	8b 45 08             	mov    0x8(%ebp),%eax
 804ecf3:	89 04 24             	mov    %eax,(%esp)
 804ecf6:	e8 b3 f0 ff ff       	call   804ddae <_ZNSt6vectorIdSaIdEED1Ev>
 804ecfb:	89 d8                	mov    %ebx,%eax
 804ecfd:	89 04 24             	mov    %eax,(%esp)
 804ed00:	e8 cb a9 ff ff       	call   80496d0 <_Unwind_Resume@plt>
}
 804ed05:	8b 45 08             	mov    0x8(%ebp),%eax
 804ed08:	83 c4 44             	add    $0x44,%esp
 804ed0b:	5b                   	pop    %ebx
 804ed0c:	5d                   	pop    %ebp
 804ed0d:	c2 04 00             	ret    $0x4

0804ed10 <_ZN4LineC1ERK7Vector2S2_RK9RGBAPixel>:

Line::Line(const Vector2& pa, const Vector2& pb, const RGBAPixel& pcolor)
 804ed10:	55                   	push   %ebp
 804ed11:	89 e5                	mov    %esp,%ebp
 804ed13:	83 ec 18             	sub    $0x18,%esp
: a_(pa),
	b_(pb),
	color_(pcolor)
 804ed16:	8b 45 08             	mov    0x8(%ebp),%eax
 804ed19:	89 04 24             	mov    %eax,(%esp)
 804ed1c:	e8 53 d8 ff ff       	call   804c574 <_ZN8DrawableC1Ev>
 804ed21:	8b 45 08             	mov    0x8(%ebp),%eax
 804ed24:	c7 00 30 01 05 08    	movl   $0x8050130,(%eax)
 804ed2a:	8b 45 08             	mov    0x8(%ebp),%eax
 804ed2d:	8b 55 0c             	mov    0xc(%ebp),%edx
 804ed30:	8b 0a                	mov    (%edx),%ecx
 804ed32:	89 48 04             	mov    %ecx,0x4(%eax)
 804ed35:	8b 4a 04             	mov    0x4(%edx),%ecx
 804ed38:	89 48 08             	mov    %ecx,0x8(%eax)
 804ed3b:	8b 4a 08             	mov    0x8(%edx),%ecx
 804ed3e:	89 48 0c             	mov    %ecx,0xc(%eax)
 804ed41:	8b 52 0c             	mov    0xc(%edx),%edx
 804ed44:	89 50 10             	mov    %edx,0x10(%eax)
 804ed47:	8b 45 08             	mov    0x8(%ebp),%eax
 804ed4a:	8b 55 10             	mov    0x10(%ebp),%edx
 804ed4d:	8b 0a                	mov    (%edx),%ecx
 804ed4f:	89 48 14             	mov    %ecx,0x14(%eax)
 804ed52:	8b 4a 04             	mov    0x4(%edx),%ecx
 804ed55:	89 48 18             	mov    %ecx,0x18(%eax)
 804ed58:	8b 4a 08             	mov    0x8(%edx),%ecx
 804ed5b:	89 48 1c             	mov    %ecx,0x1c(%eax)
 804ed5e:	8b 52 0c             	mov    0xc(%edx),%edx
 804ed61:	89 50 20             	mov    %edx,0x20(%eax)
 804ed64:	8b 45 08             	mov    0x8(%ebp),%eax
 804ed67:	8b 55 14             	mov    0x14(%ebp),%edx
 804ed6a:	8b 12                	mov    (%edx),%edx
 804ed6c:	89 50 24             	mov    %edx,0x24(%eax)
{
	/* Nothing see initialization list. */
}
 804ed6f:	c9                   	leave  
 804ed70:	c3                   	ret    
 804ed71:	90                   	nop

0804ed72 <_ZNK4Line4drawEP3PNG>:


void Line::draw(PNG* canvas) const
{
 804ed72:	55                   	push   %ebp
 804ed73:	89 e5                	mov    %esp,%ebp
 804ed75:	53                   	push   %ebx
 804ed76:	81 ec a4 00 00 00    	sub    $0xa4,%esp
	/* http://gabrielongraphics.blogspot.com/2005/09/drawing-line-segments.html */
	const double delta_x = abs(static_cast<int>(b_.x() - a_.x()));
 804ed7c:	8b 45 08             	mov    0x8(%ebp),%eax
 804ed7f:	83 c0 14             	add    $0x14,%eax
 804ed82:	89 04 24             	mov    %eax,(%esp)
 804ed85:	e8 b4 cb ff ff       	call   804b93e <_ZNK7Vector21xEv>
 804ed8a:	dd 9d 70 ff ff ff    	fstpl  -0x90(%ebp)
 804ed90:	8b 45 08             	mov    0x8(%ebp),%eax
 804ed93:	83 c0 04             	add    $0x4,%eax
 804ed96:	89 04 24             	mov    %eax,(%esp)
 804ed99:	e8 a0 cb ff ff       	call   804b93e <_ZNK7Vector21xEv>
 804ed9e:	dc ad 70 ff ff ff    	fsubrl -0x90(%ebp)
 804eda4:	d9 7d 82             	fnstcw -0x7e(%ebp)
 804eda7:	0f b7 45 82          	movzwl -0x7e(%ebp),%eax
 804edab:	b4 0c                	mov    $0xc,%ah
 804edad:	66 89 45 80          	mov    %ax,-0x80(%ebp)
 804edb1:	d9 6d 80             	fldcw  -0x80(%ebp)
 804edb4:	db 9d 7c ff ff ff    	fistpl -0x84(%ebp)
 804edba:	d9 6d 82             	fldcw  -0x7e(%ebp)
 804edbd:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
 804edc3:	99                   	cltd   
 804edc4:	31 d0                	xor    %edx,%eax
 804edc6:	29 d0                	sub    %edx,%eax
 804edc8:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
 804edce:	db 85 7c ff ff ff    	fildl  -0x84(%ebp)
 804edd4:	dd 5d b8             	fstpl  -0x48(%ebp)
	const double delta_y = abs(static_cast<int>(b_.y() - a_.y()));
 804edd7:	8b 45 08             	mov    0x8(%ebp),%eax
 804edda:	83 c0 14             	add    $0x14,%eax
 804eddd:	89 04 24             	mov    %eax,(%esp)
 804ede0:	e8 7f cb ff ff       	call   804b964 <_ZNK7Vector21yEv>
 804ede5:	dd 9d 70 ff ff ff    	fstpl  -0x90(%ebp)
 804edeb:	8b 45 08             	mov    0x8(%ebp),%eax
 804edee:	83 c0 04             	add    $0x4,%eax
 804edf1:	89 04 24             	mov    %eax,(%esp)
 804edf4:	e8 6b cb ff ff       	call   804b964 <_ZNK7Vector21yEv>
 804edf9:	dc ad 70 ff ff ff    	fsubrl -0x90(%ebp)
 804edff:	d9 7d 82             	fnstcw -0x7e(%ebp)
 804ee02:	0f b7 45 82          	movzwl -0x7e(%ebp),%eax
 804ee06:	b4 0c                	mov    $0xc,%ah
 804ee08:	66 89 45 80          	mov    %ax,-0x80(%ebp)
 804ee0c:	d9 6d 80             	fldcw  -0x80(%ebp)
 804ee0f:	db 9d 7c ff ff ff    	fistpl -0x84(%ebp)
 804ee15:	d9 6d 82             	fldcw  -0x7e(%ebp)
 804ee18:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
 804ee1e:	99                   	cltd   
 804ee1f:	31 d0                	xor    %edx,%eax
 804ee21:	29 d0                	sub    %edx,%eax
 804ee23:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
 804ee29:	db 85 7c ff ff ff    	fildl  -0x84(%ebp)
 804ee2f:	dd 5d c0             	fstpl  -0x40(%ebp)
	RGBAPixel* pixel;

	if (delta_x > delta_y)
 804ee32:	dd 45 b8             	fldl   -0x48(%ebp)
 804ee35:	dd 45 c0             	fldl   -0x40(%ebp)
 804ee38:	d9 c9                	fxch   %st(1)
 804ee3a:	df e9                	fucomip %st(1),%st
 804ee3c:	dd d8                	fstp   %st(0)
 804ee3e:	0f 86 67 01 00 00    	jbe    804efab <_ZNK4Line4drawEP3PNG+0x239>
	{
		const Vector2* left = &a_;
 804ee44:	8b 45 08             	mov    0x8(%ebp),%eax
 804ee47:	83 c0 04             	add    $0x4,%eax
 804ee4a:	89 45 94             	mov    %eax,-0x6c(%ebp)
		const Vector2* right = &b_;
 804ee4d:	8b 45 08             	mov    0x8(%ebp),%eax
 804ee50:	83 c0 14             	add    $0x14,%eax
 804ee53:	89 45 98             	mov    %eax,-0x68(%ebp)
		if (a_.isEastOf(b_))
 804ee56:	8b 45 08             	mov    0x8(%ebp),%eax
 804ee59:	8d 50 14             	lea    0x14(%eax),%edx
 804ee5c:	8b 45 08             	mov    0x8(%ebp),%eax
 804ee5f:	83 c0 04             	add    $0x4,%eax
 804ee62:	89 54 24 04          	mov    %edx,0x4(%esp)
 804ee66:	89 04 24             	mov    %eax,(%esp)
 804ee69:	e8 a8 cc ff ff       	call   804bb16 <_ZNK7Vector28isEastOfERKS_>
 804ee6e:	84 c0                	test   %al,%al
 804ee70:	74 12                	je     804ee84 <_ZNK4Line4drawEP3PNG+0x112>
		{
			left = &b_;
 804ee72:	8b 45 08             	mov    0x8(%ebp),%eax
 804ee75:	83 c0 14             	add    $0x14,%eax
 804ee78:	89 45 94             	mov    %eax,-0x6c(%ebp)
			right = &a_;
 804ee7b:	8b 45 08             	mov    0x8(%ebp),%eax
 804ee7e:	83 c0 04             	add    $0x4,%eax
 804ee81:	89 45 98             	mov    %eax,-0x68(%ebp)
		}

		vector<double> y_values = linearInterpolation(*left, *right);
 804ee84:	8d 45 e8             	lea    -0x18(%ebp),%eax
 804ee87:	8b 55 98             	mov    -0x68(%ebp),%edx
 804ee8a:	89 54 24 08          	mov    %edx,0x8(%esp)
 804ee8e:	8b 55 94             	mov    -0x6c(%ebp),%edx
 804ee91:	89 54 24 04          	mov    %edx,0x4(%esp)
 804ee95:	89 04 24             	mov    %eax,(%esp)
 804ee98:	e8 6d fd ff ff       	call   804ec0a <_ZN4Line19linearInterpolationERK7Vector2S2_>
 804ee9d:	83 ec 04             	sub    $0x4,%esp
		for (int x = static_cast<int>(left->x()); x < static_cast<int>(right->x()); x++)
 804eea0:	8b 45 94             	mov    -0x6c(%ebp),%eax
 804eea3:	89 04 24             	mov    %eax,(%esp)
 804eea6:	e8 93 ca ff ff       	call   804b93e <_ZNK7Vector21xEv>
 804eeab:	d9 7d 82             	fnstcw -0x7e(%ebp)
 804eeae:	0f b7 45 82          	movzwl -0x7e(%ebp),%eax
 804eeb2:	b4 0c                	mov    $0xc,%ah
 804eeb4:	66 89 45 80          	mov    %ax,-0x80(%ebp)
 804eeb8:	d9 6d 80             	fldcw  -0x80(%ebp)
 804eebb:	db 5d 9c             	fistpl -0x64(%ebp)
 804eebe:	d9 6d 82             	fldcw  -0x7e(%ebp)
 804eec1:	e9 9d 00 00 00       	jmp    804ef63 <_ZNK4Line4drawEP3PNG+0x1f1>
		{
			const int y = static_cast<int>(y_values[static_cast<int>(x - left->x())]);
 804eec6:	db 45 9c             	fildl  -0x64(%ebp)
 804eec9:	dd 9d 70 ff ff ff    	fstpl  -0x90(%ebp)
 804eecf:	8b 45 94             	mov    -0x6c(%ebp),%eax
 804eed2:	89 04 24             	mov    %eax,(%esp)
 804eed5:	e8 64 ca ff ff       	call   804b93e <_ZNK7Vector21xEv>
 804eeda:	dc ad 70 ff ff ff    	fsubrl -0x90(%ebp)
 804eee0:	d9 7d 82             	fnstcw -0x7e(%ebp)
 804eee3:	0f b7 45 82          	movzwl -0x7e(%ebp),%eax
 804eee7:	b4 0c                	mov    $0xc,%ah
 804eee9:	66 89 45 80          	mov    %ax,-0x80(%ebp)
 804eeed:	d9 6d 80             	fldcw  -0x80(%ebp)
 804eef0:	db 9d 7c ff ff ff    	fistpl -0x84(%ebp)
 804eef6:	d9 6d 82             	fldcw  -0x7e(%ebp)
 804eef9:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
 804eeff:	89 44 24 04          	mov    %eax,0x4(%esp)
 804ef03:	8d 45 e8             	lea    -0x18(%ebp),%eax
 804ef06:	89 04 24             	mov    %eax,(%esp)
 804ef09:	e8 f8 ee ff ff       	call   804de06 <_ZNSt6vectorIdSaIdEEixEj>
 804ef0e:	dd 00                	fldl   (%eax)
 804ef10:	d9 7d 82             	fnstcw -0x7e(%ebp)
 804ef13:	0f b7 45 82          	movzwl -0x7e(%ebp),%eax
 804ef17:	b4 0c                	mov    $0xc,%ah
 804ef19:	66 89 45 80          	mov    %ax,-0x80(%ebp)
 804ef1d:	d9 6d 80             	fldcw  -0x80(%ebp)
 804ef20:	db 5d ac             	fistpl -0x54(%ebp)
 804ef23:	d9 6d 82             	fldcw  -0x7e(%ebp)
			pixel = canvas->operator()(x, y);
 804ef26:	8b 55 ac             	mov    -0x54(%ebp),%edx
 804ef29:	8b 45 9c             	mov    -0x64(%ebp),%eax
 804ef2c:	89 54 24 08          	mov    %edx,0x8(%esp)
 804ef30:	89 44 24 04          	mov    %eax,0x4(%esp)
 804ef34:	8b 45 0c             	mov    0xc(%ebp),%eax
 804ef37:	89 04 24             	mov    %eax,(%esp)
 804ef3a:	e8 e7 b4 ff ff       	call   804a426 <_ZN3PNGclEjj>
 804ef3f:	89 45 b0             	mov    %eax,-0x50(%ebp)
			*pixel = this->color();
 804ef42:	8b 5d b0             	mov    -0x50(%ebp),%ebx
 804ef45:	8d 45 84             	lea    -0x7c(%ebp),%eax
 804ef48:	8b 55 08             	mov    0x8(%ebp),%edx
 804ef4b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804ef4f:	89 04 24             	mov    %eax,(%esp)
 804ef52:	e8 01 03 00 00       	call   804f258 <_ZNK4Line5colorEv>
 804ef57:	83 ec 04             	sub    $0x4,%esp
 804ef5a:	8b 45 84             	mov    -0x7c(%ebp),%eax
 804ef5d:	89 03                	mov    %eax,(%ebx)
			left = &b_;
			right = &a_;
		}

		vector<double> y_values = linearInterpolation(*left, *right);
		for (int x = static_cast<int>(left->x()); x < static_cast<int>(right->x()); x++)
 804ef5f:	83 45 9c 01          	addl   $0x1,-0x64(%ebp)
 804ef63:	8b 45 98             	mov    -0x68(%ebp),%eax
 804ef66:	89 04 24             	mov    %eax,(%esp)
 804ef69:	e8 d0 c9 ff ff       	call   804b93e <_ZNK7Vector21xEv>
 804ef6e:	d9 7d 82             	fnstcw -0x7e(%ebp)
 804ef71:	0f b7 45 82          	movzwl -0x7e(%ebp),%eax
 804ef75:	b4 0c                	mov    $0xc,%ah
 804ef77:	66 89 45 80          	mov    %ax,-0x80(%ebp)
 804ef7b:	d9 6d 80             	fldcw  -0x80(%ebp)
 804ef7e:	db 9d 7c ff ff ff    	fistpl -0x84(%ebp)
 804ef84:	d9 6d 82             	fldcw  -0x7e(%ebp)
 804ef87:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
 804ef8d:	3b 45 9c             	cmp    -0x64(%ebp),%eax
 804ef90:	0f 9f c0             	setg   %al
 804ef93:	84 c0                	test   %al,%al
 804ef95:	0f 85 2b ff ff ff    	jne    804eec6 <_ZNK4Line4drawEP3PNG+0x154>
		{
			const int y = static_cast<int>(y_values[static_cast<int>(x - left->x())]);
			pixel = canvas->operator()(x, y);
			*pixel = this->color();
		}
 804ef9b:	8d 45 e8             	lea    -0x18(%ebp),%eax
 804ef9e:	89 04 24             	mov    %eax,(%esp)
 804efa1:	e8 08 ee ff ff       	call   804ddae <_ZNSt6vectorIdSaIdEED1Ev>
 804efa6:	e9 13 02 00 00       	jmp    804f1be <_ZNK4Line4drawEP3PNG+0x44c>
	}
	else
	{
		const Vector2* small = &a_;
 804efab:	8b 45 08             	mov    0x8(%ebp),%eax
 804efae:	83 c0 04             	add    $0x4,%eax
 804efb1:	89 45 a0             	mov    %eax,-0x60(%ebp)
		const Vector2* large = &b_;
 804efb4:	8b 45 08             	mov    0x8(%ebp),%eax
 804efb7:	83 c0 14             	add    $0x14,%eax
 804efba:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		if (a_.y() > b_.y())
 804efbd:	8b 45 08             	mov    0x8(%ebp),%eax
 804efc0:	83 c0 04             	add    $0x4,%eax
 804efc3:	89 04 24             	mov    %eax,(%esp)
 804efc6:	e8 99 c9 ff ff       	call   804b964 <_ZNK7Vector21yEv>
 804efcb:	dd 9d 70 ff ff ff    	fstpl  -0x90(%ebp)
 804efd1:	8b 45 08             	mov    0x8(%ebp),%eax
 804efd4:	83 c0 14             	add    $0x14,%eax
 804efd7:	89 04 24             	mov    %eax,(%esp)
 804efda:	e8 85 c9 ff ff       	call   804b964 <_ZNK7Vector21yEv>
 804efdf:	dd 85 70 ff ff ff    	fldl   -0x90(%ebp)
 804efe5:	df e9                	fucomip %st(1),%st
 804efe7:	dd d8                	fstp   %st(0)
 804efe9:	0f 97 c0             	seta   %al
 804efec:	84 c0                	test   %al,%al
 804efee:	74 12                	je     804f002 <_ZNK4Line4drawEP3PNG+0x290>
		{
			small = &b_;
 804eff0:	8b 45 08             	mov    0x8(%ebp),%eax
 804eff3:	83 c0 14             	add    $0x14,%eax
 804eff6:	89 45 a0             	mov    %eax,-0x60(%ebp)
			large = &a_;
 804eff9:	8b 45 08             	mov    0x8(%ebp),%eax
 804effc:	83 c0 04             	add    $0x4,%eax
 804efff:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		}

		const Vector2 flipped0(small->y(), small->x());
 804f002:	8b 45 a0             	mov    -0x60(%ebp),%eax
 804f005:	89 04 24             	mov    %eax,(%esp)
 804f008:	e8 31 c9 ff ff       	call   804b93e <_ZNK7Vector21xEv>
 804f00d:	dd 9d 70 ff ff ff    	fstpl  -0x90(%ebp)
 804f013:	8b 45 a0             	mov    -0x60(%ebp),%eax
 804f016:	89 04 24             	mov    %eax,(%esp)
 804f019:	e8 46 c9 ff ff       	call   804b964 <_ZNK7Vector21yEv>
 804f01e:	dd 85 70 ff ff ff    	fldl   -0x90(%ebp)
 804f024:	dd 5c 24 0c          	fstpl  0xc(%esp)
 804f028:	dd 5c 24 04          	fstpl  0x4(%esp)
 804f02c:	8d 45 d8             	lea    -0x28(%ebp),%eax
 804f02f:	89 04 24             	mov    %eax,(%esp)
 804f032:	e8 1d c5 ff ff       	call   804b554 <_ZN7Vector2C1Edd>
		const Vector2 flipped1(large->y(), large->x());
 804f037:	8b 45 a4             	mov    -0x5c(%ebp),%eax
 804f03a:	89 04 24             	mov    %eax,(%esp)
 804f03d:	e8 fc c8 ff ff       	call   804b93e <_ZNK7Vector21xEv>
 804f042:	dd 9d 70 ff ff ff    	fstpl  -0x90(%ebp)
 804f048:	8b 45 a4             	mov    -0x5c(%ebp),%eax
 804f04b:	89 04 24             	mov    %eax,(%esp)
 804f04e:	e8 11 c9 ff ff       	call   804b964 <_ZNK7Vector21yEv>
 804f053:	dd 85 70 ff ff ff    	fldl   -0x90(%ebp)
 804f059:	dd 5c 24 0c          	fstpl  0xc(%esp)
 804f05d:	dd 5c 24 04          	fstpl  0x4(%esp)
 804f061:	8d 45 e8             	lea    -0x18(%ebp),%eax
 804f064:	89 04 24             	mov    %eax,(%esp)
 804f067:	e8 e8 c4 ff ff       	call   804b554 <_ZN7Vector2C1Edd>

		vector<double> x_values = linearInterpolation(flipped0, flipped1);
 804f06c:	8d 45 cc             	lea    -0x34(%ebp),%eax
 804f06f:	8d 55 e8             	lea    -0x18(%ebp),%edx
 804f072:	89 54 24 08          	mov    %edx,0x8(%esp)
 804f076:	8d 55 d8             	lea    -0x28(%ebp),%edx
 804f079:	89 54 24 04          	mov    %edx,0x4(%esp)
 804f07d:	89 04 24             	mov    %eax,(%esp)
 804f080:	e8 85 fb ff ff       	call   804ec0a <_ZN4Line19linearInterpolationERK7Vector2S2_>
 804f085:	83 ec 04             	sub    $0x4,%esp
		for (int y = static_cast<int>(small->y()); y < static_cast<int>(large->y()); y++)
 804f088:	8b 45 a0             	mov    -0x60(%ebp),%eax
 804f08b:	89 04 24             	mov    %eax,(%esp)
 804f08e:	e8 d1 c8 ff ff       	call   804b964 <_ZNK7Vector21yEv>
 804f093:	d9 7d 82             	fnstcw -0x7e(%ebp)
 804f096:	0f b7 45 82          	movzwl -0x7e(%ebp),%eax
 804f09a:	b4 0c                	mov    $0xc,%ah
 804f09c:	66 89 45 80          	mov    %ax,-0x80(%ebp)
 804f0a0:	d9 6d 80             	fldcw  -0x80(%ebp)
 804f0a3:	db 5d a8             	fistpl -0x58(%ebp)
 804f0a6:	d9 6d 82             	fldcw  -0x7e(%ebp)
 804f0a9:	e9 9d 00 00 00       	jmp    804f14b <_ZNK4Line4drawEP3PNG+0x3d9>
		{
			const int x = static_cast<int>(x_values[static_cast<int>(y - small->y())]);
 804f0ae:	db 45 a8             	fildl  -0x58(%ebp)
 804f0b1:	dd 9d 70 ff ff ff    	fstpl  -0x90(%ebp)
 804f0b7:	8b 45 a0             	mov    -0x60(%ebp),%eax
 804f0ba:	89 04 24             	mov    %eax,(%esp)
 804f0bd:	e8 a2 c8 ff ff       	call   804b964 <_ZNK7Vector21yEv>
 804f0c2:	dc ad 70 ff ff ff    	fsubrl -0x90(%ebp)
 804f0c8:	d9 7d 82             	fnstcw -0x7e(%ebp)
 804f0cb:	0f b7 45 82          	movzwl -0x7e(%ebp),%eax
 804f0cf:	b4 0c                	mov    $0xc,%ah
 804f0d1:	66 89 45 80          	mov    %ax,-0x80(%ebp)
 804f0d5:	d9 6d 80             	fldcw  -0x80(%ebp)
 804f0d8:	db 9d 7c ff ff ff    	fistpl -0x84(%ebp)
 804f0de:	d9 6d 82             	fldcw  -0x7e(%ebp)
 804f0e1:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
 804f0e7:	89 44 24 04          	mov    %eax,0x4(%esp)
 804f0eb:	8d 45 cc             	lea    -0x34(%ebp),%eax
 804f0ee:	89 04 24             	mov    %eax,(%esp)
 804f0f1:	e8 10 ed ff ff       	call   804de06 <_ZNSt6vectorIdSaIdEEixEj>
 804f0f6:	dd 00                	fldl   (%eax)
 804f0f8:	d9 7d 82             	fnstcw -0x7e(%ebp)
 804f0fb:	0f b7 45 82          	movzwl -0x7e(%ebp),%eax
 804f0ff:	b4 0c                	mov    $0xc,%ah
 804f101:	66 89 45 80          	mov    %ax,-0x80(%ebp)
 804f105:	d9 6d 80             	fldcw  -0x80(%ebp)
 804f108:	db 5d b4             	fistpl -0x4c(%ebp)
 804f10b:	d9 6d 82             	fldcw  -0x7e(%ebp)
			pixel = canvas->operator()(x, y);
 804f10e:	8b 55 a8             	mov    -0x58(%ebp),%edx
 804f111:	8b 45 b4             	mov    -0x4c(%ebp),%eax
 804f114:	89 54 24 08          	mov    %edx,0x8(%esp)
 804f118:	89 44 24 04          	mov    %eax,0x4(%esp)
 804f11c:	8b 45 0c             	mov    0xc(%ebp),%eax
 804f11f:	89 04 24             	mov    %eax,(%esp)
 804f122:	e8 ff b2 ff ff       	call   804a426 <_ZN3PNGclEjj>
 804f127:	89 45 b0             	mov    %eax,-0x50(%ebp)
			*pixel = this->color();
 804f12a:	8b 5d b0             	mov    -0x50(%ebp),%ebx
 804f12d:	8d 45 84             	lea    -0x7c(%ebp),%eax
 804f130:	8b 55 08             	mov    0x8(%ebp),%edx
 804f133:	89 54 24 04          	mov    %edx,0x4(%esp)
 804f137:	89 04 24             	mov    %eax,(%esp)
 804f13a:	e8 19 01 00 00       	call   804f258 <_ZNK4Line5colorEv>
 804f13f:	83 ec 04             	sub    $0x4,%esp
 804f142:	8b 45 84             	mov    -0x7c(%ebp),%eax
 804f145:	89 03                	mov    %eax,(%ebx)

		const Vector2 flipped0(small->y(), small->x());
		const Vector2 flipped1(large->y(), large->x());

		vector<double> x_values = linearInterpolation(flipped0, flipped1);
		for (int y = static_cast<int>(small->y()); y < static_cast<int>(large->y()); y++)
 804f147:	83 45 a8 01          	addl   $0x1,-0x58(%ebp)
 804f14b:	8b 45 a4             	mov    -0x5c(%ebp),%eax
 804f14e:	89 04 24             	mov    %eax,(%esp)
 804f151:	e8 0e c8 ff ff       	call   804b964 <_ZNK7Vector21yEv>
 804f156:	d9 7d 82             	fnstcw -0x7e(%ebp)
 804f159:	0f b7 45 82          	movzwl -0x7e(%ebp),%eax
 804f15d:	b4 0c                	mov    $0xc,%ah
 804f15f:	66 89 45 80          	mov    %ax,-0x80(%ebp)
 804f163:	d9 6d 80             	fldcw  -0x80(%ebp)
 804f166:	db 9d 7c ff ff ff    	fistpl -0x84(%ebp)
 804f16c:	d9 6d 82             	fldcw  -0x7e(%ebp)
 804f16f:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
 804f175:	3b 45 a8             	cmp    -0x58(%ebp),%eax
 804f178:	0f 9f c0             	setg   %al
 804f17b:	84 c0                	test   %al,%al
 804f17d:	0f 85 2b ff ff ff    	jne    804f0ae <_ZNK4Line4drawEP3PNG+0x33c>
		{
			const int x = static_cast<int>(x_values[static_cast<int>(y - small->y())]);
			pixel = canvas->operator()(x, y);
			*pixel = this->color();
		}
 804f183:	8d 45 cc             	lea    -0x34(%ebp),%eax
 804f186:	89 04 24             	mov    %eax,(%esp)
 804f189:	e8 20 ec ff ff       	call   804ddae <_ZNSt6vectorIdSaIdEED1Ev>
	}
}
 804f18e:	eb 2e                	jmp    804f1be <_ZNK4Line4drawEP3PNG+0x44c>
 804f190:	89 c3                	mov    %eax,%ebx
		for (int x = static_cast<int>(left->x()); x < static_cast<int>(right->x()); x++)
		{
			const int y = static_cast<int>(y_values[static_cast<int>(x - left->x())]);
			pixel = canvas->operator()(x, y);
			*pixel = this->color();
		}
 804f192:	8d 45 e8             	lea    -0x18(%ebp),%eax
 804f195:	89 04 24             	mov    %eax,(%esp)
 804f198:	e8 11 ec ff ff       	call   804ddae <_ZNSt6vectorIdSaIdEED1Ev>
 804f19d:	89 d8                	mov    %ebx,%eax
 804f19f:	89 04 24             	mov    %eax,(%esp)
 804f1a2:	e8 29 a5 ff ff       	call   80496d0 <_Unwind_Resume@plt>
 804f1a7:	89 c3                	mov    %eax,%ebx
		for (int y = static_cast<int>(small->y()); y < static_cast<int>(large->y()); y++)
		{
			const int x = static_cast<int>(x_values[static_cast<int>(y - small->y())]);
			pixel = canvas->operator()(x, y);
			*pixel = this->color();
		}
 804f1a9:	8d 45 cc             	lea    -0x34(%ebp),%eax
 804f1ac:	89 04 24             	mov    %eax,(%esp)
 804f1af:	e8 fa eb ff ff       	call   804ddae <_ZNSt6vectorIdSaIdEED1Ev>
 804f1b4:	89 d8                	mov    %ebx,%eax
 804f1b6:	89 04 24             	mov    %eax,(%esp)
 804f1b9:	e8 12 a5 ff ff       	call   80496d0 <_Unwind_Resume@plt>
	}
}
 804f1be:	8b 5d fc             	mov    -0x4(%ebp),%ebx
 804f1c1:	c9                   	leave  
 804f1c2:	c3                   	ret    
 804f1c3:	90                   	nop

0804f1c4 <_ZNK4Line1aEv>:

Vector2 Line::a() const
{
 804f1c4:	55                   	push   %ebp
 804f1c5:	89 e5                	mov    %esp,%ebp
	return this->a_;
 804f1c7:	8b 45 08             	mov    0x8(%ebp),%eax
 804f1ca:	8b 55 0c             	mov    0xc(%ebp),%edx
 804f1cd:	8b 4a 04             	mov    0x4(%edx),%ecx
 804f1d0:	89 08                	mov    %ecx,(%eax)
 804f1d2:	8b 4a 08             	mov    0x8(%edx),%ecx
 804f1d5:	89 48 04             	mov    %ecx,0x4(%eax)
 804f1d8:	8b 4a 0c             	mov    0xc(%edx),%ecx
 804f1db:	89 48 08             	mov    %ecx,0x8(%eax)
 804f1de:	8b 52 10             	mov    0x10(%edx),%edx
 804f1e1:	89 50 0c             	mov    %edx,0xc(%eax)
}
 804f1e4:	8b 45 08             	mov    0x8(%ebp),%eax
 804f1e7:	5d                   	pop    %ebp
 804f1e8:	c2 04 00             	ret    $0x4
 804f1eb:	90                   	nop

0804f1ec <_ZN4Line5set_aERK7Vector2>:

void Line::set_a(const Vector2& pa)
{
 804f1ec:	55                   	push   %ebp
 804f1ed:	89 e5                	mov    %esp,%ebp
	this->a_ = pa;
 804f1ef:	8b 45 08             	mov    0x8(%ebp),%eax
 804f1f2:	8b 55 0c             	mov    0xc(%ebp),%edx
 804f1f5:	8b 0a                	mov    (%edx),%ecx
 804f1f7:	89 48 04             	mov    %ecx,0x4(%eax)
 804f1fa:	8b 4a 04             	mov    0x4(%edx),%ecx
 804f1fd:	89 48 08             	mov    %ecx,0x8(%eax)
 804f200:	8b 4a 08             	mov    0x8(%edx),%ecx
 804f203:	89 48 0c             	mov    %ecx,0xc(%eax)
 804f206:	8b 52 0c             	mov    0xc(%edx),%edx
 804f209:	89 50 10             	mov    %edx,0x10(%eax)
}
 804f20c:	5d                   	pop    %ebp
 804f20d:	c3                   	ret    

0804f20e <_ZNK4Line1bEv>:

Vector2 Line::b() const
{
 804f20e:	55                   	push   %ebp
 804f20f:	89 e5                	mov    %esp,%ebp
	return this->b_;
 804f211:	8b 45 08             	mov    0x8(%ebp),%eax
 804f214:	8b 55 0c             	mov    0xc(%ebp),%edx
 804f217:	8b 4a 14             	mov    0x14(%edx),%ecx
 804f21a:	89 08                	mov    %ecx,(%eax)
 804f21c:	8b 4a 18             	mov    0x18(%edx),%ecx
 804f21f:	89 48 04             	mov    %ecx,0x4(%eax)
 804f222:	8b 4a 1c             	mov    0x1c(%edx),%ecx
 804f225:	89 48 08             	mov    %ecx,0x8(%eax)
 804f228:	8b 52 20             	mov    0x20(%edx),%edx
 804f22b:	89 50 0c             	mov    %edx,0xc(%eax)
}
 804f22e:	8b 45 08             	mov    0x8(%ebp),%eax
 804f231:	5d                   	pop    %ebp
 804f232:	c2 04 00             	ret    $0x4
 804f235:	90                   	nop

0804f236 <_ZN4Line5set_bERK7Vector2>:

void Line::set_b(const Vector2& pb)
{
 804f236:	55                   	push   %ebp
 804f237:	89 e5                	mov    %esp,%ebp
	this->b_ = pb;
 804f239:	8b 45 08             	mov    0x8(%ebp),%eax
 804f23c:	8b 55 0c             	mov    0xc(%ebp),%edx
 804f23f:	8b 0a                	mov    (%edx),%ecx
 804f241:	89 48 14             	mov    %ecx,0x14(%eax)
 804f244:	8b 4a 04             	mov    0x4(%edx),%ecx
 804f247:	89 48 18             	mov    %ecx,0x18(%eax)
 804f24a:	8b 4a 08             	mov    0x8(%edx),%ecx
 804f24d:	89 48 1c             	mov    %ecx,0x1c(%eax)
 804f250:	8b 52 0c             	mov    0xc(%edx),%edx
 804f253:	89 50 20             	mov    %edx,0x20(%eax)
}
 804f256:	5d                   	pop    %ebp
 804f257:	c3                   	ret    

0804f258 <_ZNK4Line5colorEv>:

RGBAPixel Line::color() const
{
 804f258:	55                   	push   %ebp
 804f259:	89 e5                	mov    %esp,%ebp
	return this->color_;
 804f25b:	8b 45 08             	mov    0x8(%ebp),%eax
 804f25e:	8b 55 0c             	mov    0xc(%ebp),%edx
 804f261:	8b 52 24             	mov    0x24(%edx),%edx
 804f264:	89 10                	mov    %edx,(%eax)
}
 804f266:	8b 45 08             	mov    0x8(%ebp),%eax
 804f269:	5d                   	pop    %ebp
 804f26a:	c2 04 00             	ret    $0x4
 804f26d:	90                   	nop

0804f26e <_ZN4Line9set_colorERK9RGBAPixel>:

void Line::set_color(const RGBAPixel& pcolor)
{
 804f26e:	55                   	push   %ebp
 804f26f:	89 e5                	mov    %esp,%ebp
	this->color_ = pcolor;
 804f271:	8b 45 08             	mov    0x8(%ebp),%eax
 804f274:	8b 55 0c             	mov    0xc(%ebp),%edx
 804f277:	8b 12                	mov    (%edx),%edx
 804f279:	89 50 24             	mov    %edx,0x24(%eax)
}
 804f27c:	5d                   	pop    %ebp
 804f27d:	c3                   	ret    

0804f27e <_Z41__static_initialization_and_destruction_0ii>:
 804f27e:	55                   	push   %ebp
 804f27f:	89 e5                	mov    %esp,%ebp
 804f281:	83 ec 18             	sub    $0x18,%esp
 804f284:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
 804f288:	75 31                	jne    804f2bb <_Z41__static_initialization_and_destruction_0ii+0x3d>
 804f28a:	81 7d 0c ff ff 00 00 	cmpl   $0xffff,0xc(%ebp)
 804f291:	75 28                	jne    804f2bb <_Z41__static_initialization_and_destruction_0ii+0x3d>
 804f293:	c7 04 24 d7 42 05 08 	movl   $0x80542d7,(%esp)
 804f29a:	e8 d1 a0 ff ff       	call   8049370 <_ZNSt8ios_base4InitC1Ev@plt>
 804f29f:	c7 44 24 08 34 41 05 	movl   $0x8054134,0x8(%esp)
 804f2a6:	08 
 804f2a7:	c7 44 24 04 d7 42 05 	movl   $0x80542d7,0x4(%esp)
 804f2ae:	08 
 804f2af:	c7 04 24 00 94 04 08 	movl   $0x8049400,(%esp)
 804f2b6:	e8 35 a0 ff ff       	call   80492f0 <__cxa_atexit@plt>
 804f2bb:	c9                   	leave  
 804f2bc:	c3                   	ret    

0804f2bd <_GLOBAL__sub_I__ZN4Line19linearInterpolationERK7Vector2S2_>:
 804f2bd:	55                   	push   %ebp
 804f2be:	89 e5                	mov    %esp,%ebp
 804f2c0:	83 ec 18             	sub    $0x18,%esp
 804f2c3:	c7 44 24 04 ff ff 00 	movl   $0xffff,0x4(%esp)
 804f2ca:	00 
 804f2cb:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
 804f2d2:	e8 a7 ff ff ff       	call   804f27e <_Z41__static_initialization_and_destruction_0ii>
 804f2d7:	c9                   	leave  
 804f2d8:	c3                   	ret    

0804f2d9 <_ZnwjPv>:
void operator delete[](void*, const std::nothrow_t&) _GLIBCXX_USE_NOEXCEPT
  __attribute__((__externally_visible__));

// Default placement versions of operator new.
inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 804f2d9:	55                   	push   %ebp
 804f2da:	89 e5                	mov    %esp,%ebp
 804f2dc:	8b 45 0c             	mov    0xc(%ebp),%eax
 804f2df:	5d                   	pop    %ebp
 804f2e0:	c3                   	ret    
 804f2e1:	90                   	nop

0804f2e2 <_ZNSt6vectorIdSaIdEEC1Ev>:
      // [23.2.4.1] construct/copy/destroy
      // (assign() and get_allocator() are also listed in this section)
      /**
       *  @brief  Default constructor creates no elements.
       */
      vector()
 804f2e2:	55                   	push   %ebp
 804f2e3:	89 e5                	mov    %esp,%ebp
 804f2e5:	83 ec 18             	sub    $0x18,%esp
      : _Base() { }
 804f2e8:	8b 45 08             	mov    0x8(%ebp),%eax
 804f2eb:	89 04 24             	mov    %eax,(%esp)
 804f2ee:	e8 77 00 00 00       	call   804f36a <_ZNSt12_Vector_baseIdSaIdEEC1Ev>
 804f2f3:	c9                   	leave  
 804f2f4:	c3                   	ret    
 804f2f5:	90                   	nop

0804f2f6 <_ZNSt6vectorIdSaIdEE9push_backERKd>:
       *  to it.  Due to the nature of a %vector this operation can be
       *  done in constant time if the %vector has preallocated space
       *  available.
       */
      void
      push_back(const value_type& __x)
 804f2f6:	55                   	push   %ebp
 804f2f7:	89 e5                	mov    %esp,%ebp
 804f2f9:	83 ec 28             	sub    $0x28,%esp
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 804f2fc:	8b 45 08             	mov    0x8(%ebp),%eax
 804f2ff:	8b 50 04             	mov    0x4(%eax),%edx
 804f302:	8b 45 08             	mov    0x8(%ebp),%eax
 804f305:	8b 40 08             	mov    0x8(%eax),%eax
 804f308:	39 c2                	cmp    %eax,%edx
 804f30a:	74 2d                	je     804f339 <_ZNSt6vectorIdSaIdEE9push_backERKd+0x43>
	  {
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
	                             __x);
 804f30c:	8b 45 08             	mov    0x8(%ebp),%eax
 804f30f:	8b 50 04             	mov    0x4(%eax),%edx
 804f312:	8b 45 08             	mov    0x8(%ebp),%eax
      void
      push_back(const value_type& __x)
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
	  {
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 804f315:	8b 4d 0c             	mov    0xc(%ebp),%ecx
 804f318:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804f31c:	89 54 24 04          	mov    %edx,0x4(%esp)
 804f320:	89 04 24             	mov    %eax,(%esp)
 804f323:	e8 55 00 00 00       	call   804f37d <_ZN9__gnu_cxx14__alloc_traitsISaIdEE9constructIdEEvRS1_PdRKT_>
	                             __x);
	    ++this->_M_impl._M_finish;
 804f328:	8b 45 08             	mov    0x8(%ebp),%eax
 804f32b:	8b 40 04             	mov    0x4(%eax),%eax
 804f32e:	8d 50 08             	lea    0x8(%eax),%edx
 804f331:	8b 45 08             	mov    0x8(%ebp),%eax
 804f334:	89 50 04             	mov    %edx,0x4(%eax)
 804f337:	eb 2e                	jmp    804f367 <_ZNSt6vectorIdSaIdEE9push_backERKd+0x71>
	  }
	else
#if __cplusplus >= 201103L
	  _M_emplace_back_aux(__x);
#else
	  _M_insert_aux(end(), __x);
 804f339:	8d 45 f4             	lea    -0xc(%ebp),%eax
 804f33c:	8b 55 08             	mov    0x8(%ebp),%edx
 804f33f:	89 54 24 04          	mov    %edx,0x4(%esp)
 804f343:	89 04 24             	mov    %eax,(%esp)
 804f346:	e8 f1 02 00 00       	call   804f63c <_ZNSt6vectorIdSaIdEE3endEv>
 804f34b:	83 ec 04             	sub    $0x4,%esp
 804f34e:	8b 45 0c             	mov    0xc(%ebp),%eax
 804f351:	89 44 24 08          	mov    %eax,0x8(%esp)
 804f355:	8b 45 f4             	mov    -0xc(%ebp),%eax
 804f358:	89 44 24 04          	mov    %eax,0x4(%esp)
 804f35c:	8b 45 08             	mov    0x8(%ebp),%eax
 804f35f:	89 04 24             	mov    %eax,(%esp)
 804f362:	e8 37 00 00 00       	call   804f39e <_ZNSt6vectorIdSaIdEE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPdS1_EERKd>
#endif
      }
 804f367:	c9                   	leave  
 804f368:	c3                   	ret    
 804f369:	90                   	nop

0804f36a <_ZNSt12_Vector_baseIdSaIdEEC1Ev>:

      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

      _Vector_base()
 804f36a:	55                   	push   %ebp
 804f36b:	89 e5                	mov    %esp,%ebp
 804f36d:	83 ec 18             	sub    $0x18,%esp
      : _M_impl() { }
 804f370:	8b 45 08             	mov    0x8(%ebp),%eax
 804f373:	89 04 24             	mov    %eax,(%esp)
 804f376:	e8 05 03 00 00       	call   804f680 <_ZNSt12_Vector_baseIdSaIdEE12_Vector_implC1Ev>
 804f37b:	c9                   	leave  
 804f37c:	c3                   	ret    

0804f37d <_ZN9__gnu_cxx14__alloc_traitsISaIdEE9constructIdEEvRS1_PdRKT_>:

    static void deallocate(_Alloc& __a, pointer __p, size_type __n)
    { __a.deallocate(__p, __n); }

    template<typename _Tp>
      static void construct(_Alloc& __a, pointer __p, const _Tp& __arg)
 804f37d:	55                   	push   %ebp
 804f37e:	89 e5                	mov    %esp,%ebp
 804f380:	83 ec 18             	sub    $0x18,%esp
      { __a.construct(__p, __arg); }
 804f383:	8b 45 10             	mov    0x10(%ebp),%eax
 804f386:	89 44 24 08          	mov    %eax,0x8(%esp)
 804f38a:	8b 45 0c             	mov    0xc(%ebp),%eax
 804f38d:	89 44 24 04          	mov    %eax,0x4(%esp)
 804f391:	8b 45 08             	mov    0x8(%ebp),%eax
 804f394:	89 04 24             	mov    %eax,(%esp)
 804f397:	e8 14 03 00 00       	call   804f6b0 <_ZN9__gnu_cxx13new_allocatorIdE9constructEPdRKd>
 804f39c:	c9                   	leave  
 804f39d:	c3                   	ret    

0804f39e <_ZNSt6vectorIdSaIdEE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPdS1_EERKd>:
      vector<_Tp, _Alloc>::
      _M_insert_aux(iterator __position, _Args&&... __args)
#else
  template<typename _Tp, typename _Alloc>
    void
    vector<_Tp, _Alloc>::
 804f39e:	55                   	push   %ebp
 804f39f:	89 e5                	mov    %esp,%ebp
 804f3a1:	56                   	push   %esi
 804f3a2:	53                   	push   %ebx
 804f3a3:	83 ec 30             	sub    $0x30,%esp
    _M_insert_aux(iterator __position, const _Tp& __x)
#endif
    {
      if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 804f3a6:	8b 45 08             	mov    0x8(%ebp),%eax
 804f3a9:	8b 50 04             	mov    0x4(%eax),%edx
 804f3ac:	8b 45 08             	mov    0x8(%ebp),%eax
 804f3af:	8b 40 08             	mov    0x8(%eax),%eax
 804f3b2:	39 c2                	cmp    %eax,%edx
 804f3b4:	74 7d                	je     804f433 <_ZNSt6vectorIdSaIdEE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPdS1_EERKd+0x95>
	{
	  _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
			           _GLIBCXX_MOVE(*(this->_M_impl._M_finish
				                   - 1)));
 804f3b6:	8b 45 08             	mov    0x8(%ebp),%eax
 804f3b9:	8b 40 04             	mov    0x4(%eax),%eax
 804f3bc:	8d 48 f8             	lea    -0x8(%eax),%ecx
 804f3bf:	8b 45 08             	mov    0x8(%ebp),%eax
 804f3c2:	8b 50 04             	mov    0x4(%eax),%edx
 804f3c5:	8b 45 08             	mov    0x8(%ebp),%eax
    _M_insert_aux(iterator __position, const _Tp& __x)
#endif
    {
      if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
	{
	  _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 804f3c8:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804f3cc:	89 54 24 04          	mov    %edx,0x4(%esp)
 804f3d0:	89 04 24             	mov    %eax,(%esp)
 804f3d3:	e8 a5 ff ff ff       	call   804f37d <_ZN9__gnu_cxx14__alloc_traitsISaIdEE9constructIdEEvRS1_PdRKT_>
			           _GLIBCXX_MOVE(*(this->_M_impl._M_finish
				                   - 1)));
	  ++this->_M_impl._M_finish;
 804f3d8:	8b 45 08             	mov    0x8(%ebp),%eax
 804f3db:	8b 40 04             	mov    0x4(%eax),%eax
 804f3de:	8d 50 08             	lea    0x8(%eax),%edx
 804f3e1:	8b 45 08             	mov    0x8(%ebp),%eax
 804f3e4:	89 50 04             	mov    %edx,0x4(%eax)
#if __cplusplus < 201103L
	  _Tp __x_copy = __x;
 804f3e7:	8b 45 10             	mov    0x10(%ebp),%eax
 804f3ea:	dd 00                	fldl   (%eax)
 804f3ec:	dd 5d f0             	fstpl  -0x10(%ebp)
#endif
	  _GLIBCXX_MOVE_BACKWARD3(__position.base(),
 804f3ef:	8b 45 08             	mov    0x8(%ebp),%eax
 804f3f2:	8b 40 04             	mov    0x4(%eax),%eax
 804f3f5:	8d 70 f8             	lea    -0x8(%eax),%esi
 804f3f8:	8b 45 08             	mov    0x8(%ebp),%eax
 804f3fb:	8b 40 04             	mov    0x4(%eax),%eax
 804f3fe:	8d 58 f0             	lea    -0x10(%eax),%ebx
 804f401:	8d 45 0c             	lea    0xc(%ebp),%eax
 804f404:	89 04 24             	mov    %eax,(%esp)
 804f407:	e8 ca 02 00 00       	call   804f6d6 <_ZNK9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEE4baseEv>
 804f40c:	8b 00                	mov    (%eax),%eax
 804f40e:	89 74 24 08          	mov    %esi,0x8(%esp)
 804f412:	89 5c 24 04          	mov    %ebx,0x4(%esp)
 804f416:	89 04 24             	mov    %eax,(%esp)
 804f419:	e8 c0 02 00 00       	call   804f6de <_ZSt13copy_backwardIPdS0_ET0_T_S2_S1_>
				  this->_M_impl._M_finish - 2,
				  this->_M_impl._M_finish - 1);
#if __cplusplus < 201103L
	  *__position = __x_copy;
 804f41e:	8d 45 0c             	lea    0xc(%ebp),%eax
 804f421:	89 04 24             	mov    %eax,(%esp)
 804f424:	e8 ed 02 00 00       	call   804f716 <_ZNK9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEdeEv>
 804f429:	dd 45 f0             	fldl   -0x10(%ebp)
 804f42c:	dd 18                	fstpl  (%eax)
 804f42e:	e9 01 02 00 00       	jmp    804f634 <_ZNSt6vectorIdSaIdEE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPdS1_EERKd+0x296>
#endif
	}
      else
	{
	  const size_type __len =
	    _M_check_len(size_type(1), "vector::_M_insert_aux");
 804f433:	c7 44 24 08 10 01 05 	movl   $0x8050110,0x8(%esp)
 804f43a:	08 
 804f43b:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
 804f442:	00 
 804f443:	8b 45 08             	mov    0x8(%ebp),%eax
 804f446:	89 04 24             	mov    %eax,(%esp)
 804f449:	e8 d2 02 00 00       	call   804f720 <_ZNKSt6vectorIdSaIdEE12_M_check_lenEjPKc>
 804f44e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	  const size_type __elems_before = __position - begin();
 804f451:	8d 45 dc             	lea    -0x24(%ebp),%eax
 804f454:	8b 55 08             	mov    0x8(%ebp),%edx
 804f457:	89 54 24 04          	mov    %edx,0x4(%esp)
 804f45b:	89 04 24             	mov    %eax,(%esp)
 804f45e:	e8 61 03 00 00       	call   804f7c4 <_ZNSt6vectorIdSaIdEE5beginEv>
 804f463:	83 ec 04             	sub    $0x4,%esp
 804f466:	8d 45 dc             	lea    -0x24(%ebp),%eax
 804f469:	89 44 24 04          	mov    %eax,0x4(%esp)
 804f46d:	8d 45 0c             	lea    0xc(%ebp),%eax
 804f470:	89 04 24             	mov    %eax,(%esp)
 804f473:	e8 6b 03 00 00       	call   804f7e3 <_ZN9__gnu_cxxmiIPdSt6vectorIdSaIdEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 804f478:	89 45 e8             	mov    %eax,-0x18(%ebp)
	  pointer __new_start(this->_M_allocate(__len));
 804f47b:	8b 45 08             	mov    0x8(%ebp),%eax
 804f47e:	8b 55 e4             	mov    -0x1c(%ebp),%edx
 804f481:	89 54 24 04          	mov    %edx,0x4(%esp)
 804f485:	89 04 24             	mov    %eax,(%esp)
 804f488:	e8 87 03 00 00       	call   804f814 <_ZNSt12_Vector_baseIdSaIdEE11_M_allocateEj>
 804f48d:	89 45 ec             	mov    %eax,-0x14(%ebp)
	  pointer __new_finish(__new_start);
 804f490:	8b 45 ec             	mov    -0x14(%ebp),%eax
 804f493:	89 45 e0             	mov    %eax,-0x20(%ebp)
	      _Alloc_traits::construct(this->_M_impl,
		                       __new_start + __elems_before,
#if __cplusplus >= 201103L
				       std::forward<_Args>(__args)...);
#else
	                               __x);
 804f496:	8b 45 e8             	mov    -0x18(%ebp),%eax
 804f499:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
 804f4a0:	8b 45 ec             	mov    -0x14(%ebp),%eax
 804f4a3:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
 804f4a6:	8b 45 08             	mov    0x8(%ebp),%eax
	    {
	      // The order of the three operations is dictated by the C++0x
	      // case, where the moves could alter a new element belonging
	      // to the existing vector.  This is an issue only for callers
	      // taking the element by const lvalue ref (see 23.1/13).
	      _Alloc_traits::construct(this->_M_impl,
 804f4a9:	8b 55 10             	mov    0x10(%ebp),%edx
 804f4ac:	89 54 24 08          	mov    %edx,0x8(%esp)
 804f4b0:	89 4c 24 04          	mov    %ecx,0x4(%esp)
 804f4b4:	89 04 24             	mov    %eax,(%esp)
 804f4b7:	e8 c1 fe ff ff       	call   804f37d <_ZN9__gnu_cxx14__alloc_traitsISaIdEE9constructIdEEvRS1_PdRKT_>
#if __cplusplus >= 201103L
				       std::forward<_Args>(__args)...);
#else
	                               __x);
#endif
	      __new_finish = 0;
 804f4bc:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)

	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(this->_M_impl._M_start, __position.base(),
		 __new_start, _M_get_Tp_allocator());
 804f4c3:	8b 45 08             	mov    0x8(%ebp),%eax
 804f4c6:	89 04 24             	mov    %eax,(%esp)
 804f4c9:	e8 be e9 ff ff       	call   804de8c <_ZNSt12_Vector_baseIdSaIdEE19_M_get_Tp_allocatorEv>
 804f4ce:	89 c3                	mov    %eax,%ebx
 804f4d0:	8d 45 0c             	lea    0xc(%ebp),%eax
 804f4d3:	89 04 24             	mov    %eax,(%esp)
 804f4d6:	e8 fb 01 00 00       	call   804f6d6 <_ZNK9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEE4baseEv>
 804f4db:	8b 10                	mov    (%eax),%edx
 804f4dd:	8b 45 08             	mov    0x8(%ebp),%eax
 804f4e0:	8b 00                	mov    (%eax),%eax
#else
	                               __x);
#endif
	      __new_finish = 0;

	      __new_finish
 804f4e2:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
 804f4e6:	8b 4d ec             	mov    -0x14(%ebp),%ecx
 804f4e9:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804f4ed:	89 54 24 04          	mov    %edx,0x4(%esp)
 804f4f1:	89 04 24             	mov    %eax,(%esp)
 804f4f4:	e8 4a 03 00 00       	call   804f843 <_ZSt34__uninitialized_move_if_noexcept_aIPdS0_SaIdEET0_T_S3_S2_RT1_>
 804f4f9:	89 45 e0             	mov    %eax,-0x20(%ebp)
		= std::__uninitialized_move_if_noexcept_a
		(this->_M_impl._M_start, __position.base(),
		 __new_start, _M_get_Tp_allocator());

	      ++__new_finish;
 804f4fc:	83 45 e0 08          	addl   $0x8,-0x20(%ebp)

	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__position.base(), this->_M_impl._M_finish,
		 __new_finish, _M_get_Tp_allocator());
 804f500:	8b 45 08             	mov    0x8(%ebp),%eax
 804f503:	89 04 24             	mov    %eax,(%esp)
 804f506:	e8 81 e9 ff ff       	call   804de8c <_ZNSt12_Vector_baseIdSaIdEE19_M_get_Tp_allocatorEv>
 804f50b:	89 c3                	mov    %eax,%ebx
 804f50d:	8b 45 08             	mov    0x8(%ebp),%eax
 804f510:	8b 70 04             	mov    0x4(%eax),%esi
 804f513:	8d 45 0c             	lea    0xc(%ebp),%eax
 804f516:	89 04 24             	mov    %eax,(%esp)
 804f519:	e8 b8 01 00 00       	call   804f6d6 <_ZNK9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEE4baseEv>
 804f51e:	8b 00                	mov    (%eax),%eax
		(this->_M_impl._M_start, __position.base(),
		 __new_start, _M_get_Tp_allocator());

	      ++__new_finish;

	      __new_finish
 804f520:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
 804f524:	8b 55 e0             	mov    -0x20(%ebp),%edx
 804f527:	89 54 24 08          	mov    %edx,0x8(%esp)
 804f52b:	89 74 24 04          	mov    %esi,0x4(%esp)
 804f52f:	89 04 24             	mov    %eax,(%esp)
 804f532:	e8 0c 03 00 00       	call   804f843 <_ZSt34__uninitialized_move_if_noexcept_aIPdS0_SaIdEET0_T_S3_S2_RT1_>
 804f537:	89 45 e0             	mov    %eax,-0x20(%ebp)
		std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	      _M_deallocate(__new_start, __len);
	      __throw_exception_again;
	    }
	  std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
			_M_get_Tp_allocator());
 804f53a:	8b 45 08             	mov    0x8(%ebp),%eax
 804f53d:	89 04 24             	mov    %eax,(%esp)
 804f540:	e8 47 e9 ff ff       	call   804de8c <_ZNSt12_Vector_baseIdSaIdEE19_M_get_Tp_allocatorEv>
 804f545:	8b 55 08             	mov    0x8(%ebp),%edx
 804f548:	8b 4a 04             	mov    0x4(%edx),%ecx
 804f54b:	8b 55 08             	mov    0x8(%ebp),%edx
 804f54e:	8b 12                	mov    (%edx),%edx
	      else
		std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	      _M_deallocate(__new_start, __len);
	      __throw_exception_again;
	    }
	  std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 804f550:	89 44 24 08          	mov    %eax,0x8(%esp)
 804f554:	89 4c 24 04          	mov    %ecx,0x4(%esp)
 804f558:	89 14 24             	mov    %edx,(%esp)
 804f55b:	e8 34 e9 ff ff       	call   804de94 <_ZSt8_DestroyIPddEvT_S1_RSaIT0_E>
			_M_get_Tp_allocator());
	  _M_deallocate(this->_M_impl._M_start,
			this->_M_impl._M_end_of_storage
			- this->_M_impl._M_start);
 804f560:	8b 45 08             	mov    0x8(%ebp),%eax
 804f563:	8b 40 08             	mov    0x8(%eax),%eax
 804f566:	89 c2                	mov    %eax,%edx
 804f568:	8b 45 08             	mov    0x8(%ebp),%eax
 804f56b:	8b 00                	mov    (%eax),%eax
 804f56d:	29 c2                	sub    %eax,%edx
 804f56f:	89 d0                	mov    %edx,%eax
 804f571:	c1 f8 03             	sar    $0x3,%eax
 804f574:	89 c1                	mov    %eax,%ecx
 804f576:	8b 45 08             	mov    0x8(%ebp),%eax
 804f579:	8b 10                	mov    (%eax),%edx
 804f57b:	8b 45 08             	mov    0x8(%ebp),%eax
	      _M_deallocate(__new_start, __len);
	      __throw_exception_again;
	    }
	  std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
			_M_get_Tp_allocator());
	  _M_deallocate(this->_M_impl._M_start,
 804f57e:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804f582:	89 54 24 04          	mov    %edx,0x4(%esp)
 804f586:	89 04 24             	mov    %eax,(%esp)
 804f589:	e8 34 e9 ff ff       	call   804dec2 <_ZNSt12_Vector_baseIdSaIdEE13_M_deallocateEPdj>
			this->_M_impl._M_end_of_storage
			- this->_M_impl._M_start);
	  this->_M_impl._M_start = __new_start;
 804f58e:	8b 45 08             	mov    0x8(%ebp),%eax
 804f591:	8b 55 ec             	mov    -0x14(%ebp),%edx
 804f594:	89 10                	mov    %edx,(%eax)
	  this->_M_impl._M_finish = __new_finish;
 804f596:	8b 45 08             	mov    0x8(%ebp),%eax
 804f599:	8b 55 e0             	mov    -0x20(%ebp),%edx
 804f59c:	89 50 04             	mov    %edx,0x4(%eax)
	  this->_M_impl._M_end_of_storage = __new_start + __len;
 804f59f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
 804f5a2:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
 804f5a9:	8b 45 ec             	mov    -0x14(%ebp),%eax
 804f5ac:	01 c2                	add    %eax,%edx
 804f5ae:	8b 45 08             	mov    0x8(%ebp),%eax
 804f5b1:	89 50 08             	mov    %edx,0x8(%eax)
	}
    }
 804f5b4:	eb 7e                	jmp    804f634 <_ZNSt6vectorIdSaIdEE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPdS1_EERKd+0x296>
 804f5b6:	89 c3                	mov    %eax,%ebx
	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__position.base(), this->_M_impl._M_finish,
		 __new_finish, _M_get_Tp_allocator());
	    }
          __catch(...)
 804f5b8:	e8 23 a0 ff ff       	call   80495e0 <__cxa_end_catch@plt>
 804f5bd:	89 d8                	mov    %ebx,%eax
 804f5bf:	89 04 24             	mov    %eax,(%esp)
 804f5c2:	e8 09 a1 ff ff       	call   80496d0 <_Unwind_Resume@plt>
 804f5c7:	89 04 24             	mov    %eax,(%esp)
 804f5ca:	e8 61 a0 ff ff       	call   8049630 <__cxa_begin_catch@plt>
	    {
	      if (!__new_finish)
 804f5cf:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
 804f5d3:	75 20                	jne    804f5f5 <_ZNSt6vectorIdSaIdEE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPdS1_EERKd+0x257>
		_Alloc_traits::destroy(this->_M_impl,
		                       __new_start + __elems_before);
 804f5d5:	8b 45 e8             	mov    -0x18(%ebp),%eax
 804f5d8:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
 804f5df:	8b 45 ec             	mov    -0x14(%ebp),%eax
 804f5e2:	01 c2                	add    %eax,%edx
 804f5e4:	8b 45 08             	mov    0x8(%ebp),%eax
		 __new_finish, _M_get_Tp_allocator());
	    }
          __catch(...)
	    {
	      if (!__new_finish)
		_Alloc_traits::destroy(this->_M_impl,
 804f5e7:	89 54 24 04          	mov    %edx,0x4(%esp)
 804f5eb:	89 04 24             	mov    %eax,(%esp)
 804f5ee:	e8 78 02 00 00       	call   804f86b <_ZN9__gnu_cxx14__alloc_traitsISaIdEE7destroyERS1_Pd>
 804f5f3:	eb 21                	jmp    804f616 <_ZNSt6vectorIdSaIdEE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPdS1_EERKd+0x278>
		                       __new_start + __elems_before);
	      else
		std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
 804f5f5:	8b 45 08             	mov    0x8(%ebp),%eax
 804f5f8:	89 04 24             	mov    %eax,(%esp)
 804f5fb:	e8 8c e8 ff ff       	call   804de8c <_ZNSt12_Vector_baseIdSaIdEE19_M_get_Tp_allocatorEv>
 804f600:	89 44 24 08          	mov    %eax,0x8(%esp)
 804f604:	8b 45 e0             	mov    -0x20(%ebp),%eax
 804f607:	89 44 24 04          	mov    %eax,0x4(%esp)
 804f60b:	8b 45 ec             	mov    -0x14(%ebp),%eax
 804f60e:	89 04 24             	mov    %eax,(%esp)
 804f611:	e8 7e e8 ff ff       	call   804de94 <_ZSt8_DestroyIPddEvT_S1_RSaIT0_E>
	      _M_deallocate(__new_start, __len);
 804f616:	8b 45 08             	mov    0x8(%ebp),%eax
 804f619:	8b 55 e4             	mov    -0x1c(%ebp),%edx
 804f61c:	89 54 24 08          	mov    %edx,0x8(%esp)
 804f620:	8b 55 ec             	mov    -0x14(%ebp),%edx
 804f623:	89 54 24 04          	mov    %edx,0x4(%esp)
 804f627:	89 04 24             	mov    %eax,(%esp)
 804f62a:	e8 93 e8 ff ff       	call   804dec2 <_ZNSt12_Vector_baseIdSaIdEE13_M_deallocateEPdj>
	      __throw_exception_again;
 804f62f:	e8 1c 9d ff ff       	call   8049350 <__cxa_rethrow@plt>
			- this->_M_impl._M_start);
	  this->_M_impl._M_start = __new_start;
	  this->_M_impl._M_finish = __new_finish;
	  this->_M_impl._M_end_of_storage = __new_start + __len;
	}
    }
 804f634:	8d 65 f8             	lea    -0x8(%ebp),%esp
 804f637:	5b                   	pop    %ebx
 804f638:	5e                   	pop    %esi
 804f639:	5d                   	pop    %ebp
 804f63a:	c3                   	ret    
 804f63b:	90                   	nop

0804f63c <_ZNSt6vectorIdSaIdEE3endEv>:
       *  Returns a read/write iterator that points one past the last
       *  element in the %vector.  Iteration is done in ordinary
       *  element order.
       */
      iterator
      end() _GLIBCXX_NOEXCEPT
 804f63c:	55                   	push   %ebp
 804f63d:	89 e5                	mov    %esp,%ebp
 804f63f:	83 ec 18             	sub    $0x18,%esp
      { return iterator(this->_M_impl._M_finish); }
 804f642:	8b 45 0c             	mov    0xc(%ebp),%eax
 804f645:	83 c0 04             	add    $0x4,%eax
 804f648:	89 44 24 04          	mov    %eax,0x4(%esp)
 804f64c:	8b 45 08             	mov    0x8(%ebp),%eax
 804f64f:	89 04 24             	mov    %eax,(%esp)
 804f652:	e8 2f 02 00 00       	call   804f886 <_ZN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEC1ERKS1_>
 804f657:	8b 45 08             	mov    0x8(%ebp),%eax
 804f65a:	c9                   	leave  
 804f65b:	c2 04 00             	ret    $0x4

0804f65e <_ZNKSt6vectorIdSaIdEE4sizeEv>:
#endif

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
 804f65e:	55                   	push   %ebp
 804f65f:	89 e5                	mov    %esp,%ebp
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 804f661:	8b 45 08             	mov    0x8(%ebp),%eax
 804f664:	8b 40 04             	mov    0x4(%eax),%eax
 804f667:	89 c2                	mov    %eax,%edx
 804f669:	8b 45 08             	mov    0x8(%ebp),%eax
 804f66c:	8b 00                	mov    (%eax),%eax
 804f66e:	29 c2                	sub    %eax,%edx
 804f670:	89 d0                	mov    %edx,%eax
 804f672:	c1 f8 03             	sar    $0x3,%eax
 804f675:	5d                   	pop    %ebp
 804f676:	c3                   	ret    
 804f677:	90                   	nop

0804f678 <_ZNKSt12_Vector_baseIdSaIdEE19_M_get_Tp_allocatorEv>:
      _Tp_alloc_type&
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }

      const _Tp_alloc_type&
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 804f678:	55                   	push   %ebp
 804f679:	89 e5                	mov    %esp,%ebp
      { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }
 804f67b:	8b 45 08             	mov    0x8(%ebp),%eax
 804f67e:	5d                   	pop    %ebp
 804f67f:	c3                   	ret    

0804f680 <_ZNSt12_Vector_baseIdSaIdEE12_Vector_implC1Ev>:
      {
	pointer _M_start;
	pointer _M_finish;
	pointer _M_end_of_storage;

	_Vector_impl()
 804f680:	55                   	push   %ebp
 804f681:	89 e5                	mov    %esp,%ebp
 804f683:	83 ec 18             	sub    $0x18,%esp
	: _Tp_alloc_type(), _M_start(0), _M_finish(0), _M_end_of_storage(0)
 804f686:	8b 45 08             	mov    0x8(%ebp),%eax
 804f689:	89 04 24             	mov    %eax,(%esp)
 804f68c:	e8 05 02 00 00       	call   804f896 <_ZNSaIdEC1Ev>
 804f691:	8b 45 08             	mov    0x8(%ebp),%eax
 804f694:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
 804f69a:	8b 45 08             	mov    0x8(%ebp),%eax
 804f69d:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
 804f6a4:	8b 45 08             	mov    0x8(%ebp),%eax
 804f6a7:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
	{ }
 804f6ae:	c9                   	leave  
 804f6af:	c3                   	ret    

0804f6b0 <_ZN9__gnu_cxx13new_allocatorIdE9constructEPdRKd>:
        destroy(_Up* __p) { __p->~_Up(); }
#else
      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 402. wrong new expression in [some_] allocator::construct
      void 
      construct(pointer __p, const _Tp& __val) 
 804f6b0:	55                   	push   %ebp
 804f6b1:	89 e5                	mov    %esp,%ebp
 804f6b3:	83 ec 18             	sub    $0x18,%esp
      { ::new((void *)__p) _Tp(__val); }
 804f6b6:	8b 45 0c             	mov    0xc(%ebp),%eax
 804f6b9:	89 44 24 04          	mov    %eax,0x4(%esp)
 804f6bd:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
 804f6c4:	e8 10 fc ff ff       	call   804f2d9 <_ZnwjPv>
 804f6c9:	85 c0                	test   %eax,%eax
 804f6cb:	74 07                	je     804f6d4 <_ZN9__gnu_cxx13new_allocatorIdE9constructEPdRKd+0x24>
 804f6cd:	8b 55 10             	mov    0x10(%ebp),%edx
 804f6d0:	dd 02                	fldl   (%edx)
 804f6d2:	dd 18                	fstpl  (%eax)
 804f6d4:	c9                   	leave  
 804f6d5:	c3                   	ret    

0804f6d6 <_ZNK9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEE4baseEv>:
      __normal_iterator
      operator-(const difference_type& __n) const
      { return __normal_iterator(_M_current - __n); }

      const _Iterator&
      base() const
 804f6d6:	55                   	push   %ebp
 804f6d7:	89 e5                	mov    %esp,%ebp
      { return _M_current; }
 804f6d9:	8b 45 08             	mov    0x8(%ebp),%eax
 804f6dc:	5d                   	pop    %ebp
 804f6dd:	c3                   	ret    

0804f6de <_ZSt13copy_backwardIPdS0_ET0_T_S2_S1_>:
   *  Result may not be in the range (first,last].  Use copy instead.  Note
   *  that the start of the output range may overlap [first,last).
  */
  template<typename _BI1, typename _BI2>
    inline _BI2
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 804f6de:	55                   	push   %ebp
 804f6df:	89 e5                	mov    %esp,%ebp
 804f6e1:	53                   	push   %ebx
 804f6e2:	83 ec 14             	sub    $0x14,%esp
	    typename iterator_traits<_BI2>::value_type>)
      __glibcxx_requires_valid_range(__first, __last);

      return (std::__copy_move_backward_a2<__is_move_iterator<_BI1>::__value>
	      (std::__miter_base(__first), std::__miter_base(__last),
	       __result));
 804f6e5:	8b 45 0c             	mov    0xc(%ebp),%eax
 804f6e8:	89 04 24             	mov    %eax,(%esp)
 804f6eb:	e8 b9 01 00 00       	call   804f8a9 <_ZSt12__miter_baseIPdENSt11_Miter_baseIT_E13iterator_typeES2_>
 804f6f0:	89 c3                	mov    %eax,%ebx
 804f6f2:	8b 45 08             	mov    0x8(%ebp),%eax
 804f6f5:	89 04 24             	mov    %eax,(%esp)
 804f6f8:	e8 ac 01 00 00       	call   804f8a9 <_ZSt12__miter_baseIPdENSt11_Miter_baseIT_E13iterator_typeES2_>
 804f6fd:	8b 55 10             	mov    0x10(%ebp),%edx
 804f700:	89 54 24 08          	mov    %edx,0x8(%esp)
 804f704:	89 5c 24 04          	mov    %ebx,0x4(%esp)
 804f708:	89 04 24             	mov    %eax,(%esp)
 804f70b:	e8 ac 01 00 00       	call   804f8bc <_ZSt23__copy_move_backward_a2ILb0EPdS0_ET1_T0_S2_S1_>
    }
 804f710:	83 c4 14             	add    $0x14,%esp
 804f713:	5b                   	pop    %ebx
 804f714:	5d                   	pop    %ebp
 804f715:	c3                   	ret    

0804f716 <_ZNK9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEdeEv>:
		      _Container>::__type>& __i)
        : _M_current(__i.base()) { }

      // Forward iterator requirements
      reference
      operator*() const
 804f716:	55                   	push   %ebp
 804f717:	89 e5                	mov    %esp,%ebp
      { return *_M_current; }
 804f719:	8b 45 08             	mov    0x8(%ebp),%eax
 804f71c:	8b 00                	mov    (%eax),%eax
 804f71e:	5d                   	pop    %ebp
 804f71f:	c3                   	ret    

0804f720 <_ZNKSt6vectorIdSaIdEE12_M_check_lenEjPKc>:
        _M_emplace_back_aux(_Args&&... __args);
#endif

      // Called by the latter.
      size_type
      _M_check_len(size_type __n, const char* __s) const
 804f720:	55                   	push   %ebp
 804f721:	89 e5                	mov    %esp,%ebp
 804f723:	53                   	push   %ebx
 804f724:	83 ec 24             	sub    $0x24,%esp
      {
	if (max_size() - size() < __n)
 804f727:	8b 45 08             	mov    0x8(%ebp),%eax
 804f72a:	89 04 24             	mov    %eax,(%esp)
 804f72d:	e8 ce 01 00 00       	call   804f900 <_ZNKSt6vectorIdSaIdEE8max_sizeEv>
 804f732:	89 c3                	mov    %eax,%ebx
 804f734:	8b 45 08             	mov    0x8(%ebp),%eax
 804f737:	89 04 24             	mov    %eax,(%esp)
 804f73a:	e8 1f ff ff ff       	call   804f65e <_ZNKSt6vectorIdSaIdEE4sizeEv>
 804f73f:	89 da                	mov    %ebx,%edx
 804f741:	29 c2                	sub    %eax,%edx
 804f743:	8b 45 0c             	mov    0xc(%ebp),%eax
 804f746:	39 c2                	cmp    %eax,%edx
 804f748:	0f 92 c0             	setb   %al
 804f74b:	84 c0                	test   %al,%al
 804f74d:	74 0b                	je     804f75a <_ZNKSt6vectorIdSaIdEE12_M_check_lenEjPKc+0x3a>
	  __throw_length_error(__N(__s));
 804f74f:	8b 45 10             	mov    0x10(%ebp),%eax
 804f752:	89 04 24             	mov    %eax,(%esp)
 804f755:	e8 36 9b ff ff       	call   8049290 <_ZSt20__throw_length_errorPKc@plt>

	const size_type __len = size() + std::max(size(), __n);
 804f75a:	8b 45 08             	mov    0x8(%ebp),%eax
 804f75d:	89 04 24             	mov    %eax,(%esp)
 804f760:	e8 f9 fe ff ff       	call   804f65e <_ZNKSt6vectorIdSaIdEE4sizeEv>
 804f765:	89 c3                	mov    %eax,%ebx
 804f767:	8b 45 08             	mov    0x8(%ebp),%eax
 804f76a:	89 04 24             	mov    %eax,(%esp)
 804f76d:	e8 ec fe ff ff       	call   804f65e <_ZNKSt6vectorIdSaIdEE4sizeEv>
 804f772:	89 45 f0             	mov    %eax,-0x10(%ebp)
 804f775:	8d 45 0c             	lea    0xc(%ebp),%eax
 804f778:	89 44 24 04          	mov    %eax,0x4(%esp)
 804f77c:	8d 45 f0             	lea    -0x10(%ebp),%eax
 804f77f:	89 04 24             	mov    %eax,(%esp)
 804f782:	e8 94 01 00 00       	call   804f91b <_ZSt3maxIjERKT_S2_S2_>
 804f787:	8b 00                	mov    (%eax),%eax
 804f789:	01 d8                	add    %ebx,%eax
 804f78b:	89 45 f4             	mov    %eax,-0xc(%ebp)
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 804f78e:	8b 45 08             	mov    0x8(%ebp),%eax
 804f791:	89 04 24             	mov    %eax,(%esp)
 804f794:	e8 c5 fe ff ff       	call   804f65e <_ZNKSt6vectorIdSaIdEE4sizeEv>
 804f799:	3b 45 f4             	cmp    -0xc(%ebp),%eax
 804f79c:	77 10                	ja     804f7ae <_ZNKSt6vectorIdSaIdEE12_M_check_lenEjPKc+0x8e>
 804f79e:	8b 45 08             	mov    0x8(%ebp),%eax
 804f7a1:	89 04 24             	mov    %eax,(%esp)
 804f7a4:	e8 57 01 00 00       	call   804f900 <_ZNKSt6vectorIdSaIdEE8max_sizeEv>
 804f7a9:	3b 45 f4             	cmp    -0xc(%ebp),%eax
 804f7ac:	73 0d                	jae    804f7bb <_ZNKSt6vectorIdSaIdEE12_M_check_lenEjPKc+0x9b>
 804f7ae:	8b 45 08             	mov    0x8(%ebp),%eax
 804f7b1:	89 04 24             	mov    %eax,(%esp)
 804f7b4:	e8 47 01 00 00       	call   804f900 <_ZNKSt6vectorIdSaIdEE8max_sizeEv>
 804f7b9:	eb 03                	jmp    804f7be <_ZNKSt6vectorIdSaIdEE12_M_check_lenEjPKc+0x9e>
 804f7bb:	8b 45 f4             	mov    -0xc(%ebp),%eax
      }
 804f7be:	83 c4 24             	add    $0x24,%esp
 804f7c1:	5b                   	pop    %ebx
 804f7c2:	5d                   	pop    %ebp
 804f7c3:	c3                   	ret    

0804f7c4 <_ZNSt6vectorIdSaIdEE5beginEv>:
       *  Returns a read/write iterator that points to the first
       *  element in the %vector.  Iteration is done in ordinary
       *  element order.
       */
      iterator
      begin() _GLIBCXX_NOEXCEPT
 804f7c4:	55                   	push   %ebp
 804f7c5:	89 e5                	mov    %esp,%ebp
 804f7c7:	83 ec 18             	sub    $0x18,%esp
      { return iterator(this->_M_impl._M_start); }
 804f7ca:	8b 45 0c             	mov    0xc(%ebp),%eax
 804f7cd:	89 44 24 04          	mov    %eax,0x4(%esp)
 804f7d1:	8b 45 08             	mov    0x8(%ebp),%eax
 804f7d4:	89 04 24             	mov    %eax,(%esp)
 804f7d7:	e8 aa 00 00 00       	call   804f886 <_ZN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEC1ERKS1_>
 804f7dc:	8b 45 08             	mov    0x8(%ebp),%eax
 804f7df:	c9                   	leave  
 804f7e0:	c2 04 00             	ret    $0x4

0804f7e3 <_ZN9__gnu_cxxmiIPdSt6vectorIdSaIdEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>:
#endif
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 804f7e3:	55                   	push   %ebp
 804f7e4:	89 e5                	mov    %esp,%ebp
 804f7e6:	53                   	push   %ebx
 804f7e7:	83 ec 14             	sub    $0x14,%esp
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    { return __lhs.base() - __rhs.base(); }
 804f7ea:	8b 45 08             	mov    0x8(%ebp),%eax
 804f7ed:	89 04 24             	mov    %eax,(%esp)
 804f7f0:	e8 e1 fe ff ff       	call   804f6d6 <_ZNK9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEE4baseEv>
 804f7f5:	8b 00                	mov    (%eax),%eax
 804f7f7:	89 c3                	mov    %eax,%ebx
 804f7f9:	8b 45 0c             	mov    0xc(%ebp),%eax
 804f7fc:	89 04 24             	mov    %eax,(%esp)
 804f7ff:	e8 d2 fe ff ff       	call   804f6d6 <_ZNK9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEE4baseEv>
 804f804:	8b 00                	mov    (%eax),%eax
 804f806:	29 c3                	sub    %eax,%ebx
 804f808:	89 d8                	mov    %ebx,%eax
 804f80a:	c1 f8 03             	sar    $0x3,%eax
 804f80d:	83 c4 14             	add    $0x14,%esp
 804f810:	5b                   	pop    %ebx
 804f811:	5d                   	pop    %ebp
 804f812:	c3                   	ret    
 804f813:	90                   	nop

0804f814 <_ZNSt12_Vector_baseIdSaIdEE11_M_allocateEj>:

    public:
      _Vector_impl _M_impl;

      pointer
      _M_allocate(size_t __n)
 804f814:	55                   	push   %ebp
 804f815:	89 e5                	mov    %esp,%ebp
 804f817:	83 ec 18             	sub    $0x18,%esp
      { return __n != 0 ? _M_impl.allocate(__n) : 0; }
 804f81a:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
 804f81e:	74 1c                	je     804f83c <_ZNSt12_Vector_baseIdSaIdEE11_M_allocateEj+0x28>
 804f820:	8b 45 08             	mov    0x8(%ebp),%eax
 804f823:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
 804f82a:	00 
 804f82b:	8b 55 0c             	mov    0xc(%ebp),%edx
 804f82e:	89 54 24 04          	mov    %edx,0x4(%esp)
 804f832:	89 04 24             	mov    %eax,(%esp)
 804f835:	e8 fc 00 00 00       	call   804f936 <_ZN9__gnu_cxx13new_allocatorIdE8allocateEjPKv>
 804f83a:	eb 05                	jmp    804f841 <_ZNSt12_Vector_baseIdSaIdEE11_M_allocateEj+0x2d>
 804f83c:	b8 00 00 00 00       	mov    $0x0,%eax
 804f841:	c9                   	leave  
 804f842:	c3                   	ret    

0804f843 <_ZSt34__uninitialized_move_if_noexcept_aIPdS0_SaIdEET0_T_S3_S2_RT1_>:
    }

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 804f843:	55                   	push   %ebp
 804f844:	89 e5                	mov    %esp,%ebp
 804f846:	83 ec 18             	sub    $0x18,%esp
				       _ForwardIterator __result,
				       _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
 804f849:	8b 45 14             	mov    0x14(%ebp),%eax
 804f84c:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804f850:	8b 45 10             	mov    0x10(%ebp),%eax
 804f853:	89 44 24 08          	mov    %eax,0x8(%esp)
 804f857:	8b 45 0c             	mov    0xc(%ebp),%eax
 804f85a:	89 44 24 04          	mov    %eax,0x4(%esp)
 804f85e:	8b 45 08             	mov    0x8(%ebp),%eax
 804f861:	89 04 24             	mov    %eax,(%esp)
 804f864:	e8 fd 00 00 00       	call   804f966 <_ZSt22__uninitialized_copy_aIPdS0_dET0_T_S2_S1_RSaIT1_E>
    }
 804f869:	c9                   	leave  
 804f86a:	c3                   	ret    

0804f86b <_ZN9__gnu_cxx14__alloc_traitsISaIdEE7destroyERS1_Pd>:

    static void destroy(_Alloc& __a, pointer __p)
 804f86b:	55                   	push   %ebp
 804f86c:	89 e5                	mov    %esp,%ebp
 804f86e:	83 ec 18             	sub    $0x18,%esp
    { __a.destroy(__p); }
 804f871:	8b 45 0c             	mov    0xc(%ebp),%eax
 804f874:	89 44 24 04          	mov    %eax,0x4(%esp)
 804f878:	8b 45 08             	mov    0x8(%ebp),%eax
 804f87b:	89 04 24             	mov    %eax,(%esp)
 804f87e:	e8 05 01 00 00       	call   804f988 <_ZN9__gnu_cxx13new_allocatorIdE7destroyEPd>
 804f883:	c9                   	leave  
 804f884:	c3                   	ret    
 804f885:	90                   	nop

0804f886 <_ZN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEC1ERKS1_>:
      typedef typename __traits_type::pointer   	pointer;

      _GLIBCXX_CONSTEXPR __normal_iterator() : _M_current(_Iterator()) { }

      explicit
      __normal_iterator(const _Iterator& __i) : _M_current(__i) { }
 804f886:	55                   	push   %ebp
 804f887:	89 e5                	mov    %esp,%ebp
 804f889:	8b 45 0c             	mov    0xc(%ebp),%eax
 804f88c:	8b 10                	mov    (%eax),%edx
 804f88e:	8b 45 08             	mov    0x8(%ebp),%eax
 804f891:	89 10                	mov    %edx,(%eax)
 804f893:	5d                   	pop    %ebp
 804f894:	c3                   	ret    
 804f895:	90                   	nop

0804f896 <_ZNSaIdEC1Ev>:
      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 2103. std::allocator propagate_on_container_move_assignment
      typedef true_type propagate_on_container_move_assignment;
#endif

      allocator() throw() { }
 804f896:	55                   	push   %ebp
 804f897:	89 e5                	mov    %esp,%ebp
 804f899:	83 ec 18             	sub    $0x18,%esp
 804f89c:	8b 45 08             	mov    0x8(%ebp),%eax
 804f89f:	89 04 24             	mov    %eax,(%esp)
 804f8a2:	e8 e7 00 00 00       	call   804f98e <_ZN9__gnu_cxx13new_allocatorIdEC1Ev>
 804f8a7:	c9                   	leave  
 804f8a8:	c3                   	ret    

0804f8a9 <_ZSt12__miter_baseIPdENSt11_Miter_baseIT_E13iterator_typeES2_>:
    : _Iter_base<_Iterator, __is_move_iterator<_Iterator>::__value>
    { };

  template<typename _Iterator>
    inline typename _Miter_base<_Iterator>::iterator_type
    __miter_base(_Iterator __it)
 804f8a9:	55                   	push   %ebp
 804f8aa:	89 e5                	mov    %esp,%ebp
 804f8ac:	83 ec 18             	sub    $0x18,%esp
    { return std::_Miter_base<_Iterator>::_S_base(__it); }
 804f8af:	8b 45 08             	mov    0x8(%ebp),%eax
 804f8b2:	89 04 24             	mov    %eax,(%esp)
 804f8b5:	e8 d9 00 00 00       	call   804f993 <_ZNSt10_Iter_baseIPdLb0EE7_S_baseES0_>
 804f8ba:	c9                   	leave  
 804f8bb:	c3                   	ret    

0804f8bc <_ZSt23__copy_move_backward_a2ILb0EPdS0_ET1_T0_S2_S1_>:
								 __result);
    }

  template<bool _IsMove, typename _BI1, typename _BI2>
    inline _BI2
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 804f8bc:	55                   	push   %ebp
 804f8bd:	89 e5                	mov    %esp,%ebp
 804f8bf:	56                   	push   %esi
 804f8c0:	53                   	push   %ebx
 804f8c1:	83 ec 10             	sub    $0x10,%esp
    {
      return _BI2(std::__copy_move_backward_a<_IsMove>
		  (std::__niter_base(__first), std::__niter_base(__last),
		   std::__niter_base(__result)));
 804f8c4:	8b 45 10             	mov    0x10(%ebp),%eax
 804f8c7:	89 04 24             	mov    %eax,(%esp)
 804f8ca:	e8 cc 00 00 00       	call   804f99b <_ZSt12__niter_baseIPdENSt11_Niter_baseIT_E13iterator_typeES2_>
 804f8cf:	89 c6                	mov    %eax,%esi
 804f8d1:	8b 45 0c             	mov    0xc(%ebp),%eax
 804f8d4:	89 04 24             	mov    %eax,(%esp)
 804f8d7:	e8 bf 00 00 00       	call   804f99b <_ZSt12__niter_baseIPdENSt11_Niter_baseIT_E13iterator_typeES2_>
 804f8dc:	89 c3                	mov    %eax,%ebx
 804f8de:	8b 45 08             	mov    0x8(%ebp),%eax
 804f8e1:	89 04 24             	mov    %eax,(%esp)
 804f8e4:	e8 b2 00 00 00       	call   804f99b <_ZSt12__niter_baseIPdENSt11_Niter_baseIT_E13iterator_typeES2_>
 804f8e9:	89 74 24 08          	mov    %esi,0x8(%esp)
 804f8ed:	89 5c 24 04          	mov    %ebx,0x4(%esp)
 804f8f1:	89 04 24             	mov    %eax,(%esp)
 804f8f4:	e8 b5 00 00 00       	call   804f9ae <_ZSt22__copy_move_backward_aILb0EPdS0_ET1_T0_S2_S1_>
    }
 804f8f9:	83 c4 10             	add    $0x10,%esp
 804f8fc:	5b                   	pop    %ebx
 804f8fd:	5e                   	pop    %esi
 804f8fe:	5d                   	pop    %ebp
 804f8ff:	c3                   	ret    

0804f900 <_ZNKSt6vectorIdSaIdEE8max_sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }

      /**  Returns the size() of the largest possible %vector.  */
      size_type
      max_size() const _GLIBCXX_NOEXCEPT
 804f900:	55                   	push   %ebp
 804f901:	89 e5                	mov    %esp,%ebp
 804f903:	83 ec 18             	sub    $0x18,%esp
      { return _Alloc_traits::max_size(_M_get_Tp_allocator()); }
 804f906:	8b 45 08             	mov    0x8(%ebp),%eax
 804f909:	89 04 24             	mov    %eax,(%esp)
 804f90c:	e8 67 fd ff ff       	call   804f678 <_ZNKSt12_Vector_baseIdSaIdEE19_M_get_Tp_allocatorEv>
 804f911:	89 04 24             	mov    %eax,(%esp)
 804f914:	e8 ba 00 00 00       	call   804f9d3 <_ZN9__gnu_cxx14__alloc_traitsISaIdEE8max_sizeERKS1_>
 804f919:	c9                   	leave  
 804f91a:	c3                   	ret    

0804f91b <_ZSt3maxIjERKT_S2_S2_>:
   *  temporary expressions, since they are only evaluated once, unlike a
   *  preprocessor macro.
  */
  template<typename _Tp>
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 804f91b:	55                   	push   %ebp
 804f91c:	89 e5                	mov    %esp,%ebp
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 804f91e:	8b 45 08             	mov    0x8(%ebp),%eax
 804f921:	8b 10                	mov    (%eax),%edx
 804f923:	8b 45 0c             	mov    0xc(%ebp),%eax
 804f926:	8b 00                	mov    (%eax),%eax
 804f928:	39 c2                	cmp    %eax,%edx
 804f92a:	73 05                	jae    804f931 <_ZSt3maxIjERKT_S2_S2_+0x16>
	return __b;
 804f92c:	8b 45 0c             	mov    0xc(%ebp),%eax
 804f92f:	eb 03                	jmp    804f934 <_ZSt3maxIjERKT_S2_S2_+0x19>
      return __a;
 804f931:	8b 45 08             	mov    0x8(%ebp),%eax
    }
 804f934:	5d                   	pop    %ebp
 804f935:	c3                   	ret    

0804f936 <_ZN9__gnu_cxx13new_allocatorIdE8allocateEjPKv>:
      { return std::__addressof(__x); }

      // NB: __n is permitted to be 0.  The C++ standard says nothing
      // about what the return value is when __n == 0.
      pointer
      allocate(size_type __n, const void* = 0)
 804f936:	55                   	push   %ebp
 804f937:	89 e5                	mov    %esp,%ebp
 804f939:	83 ec 18             	sub    $0x18,%esp
      { 
	if (__n > this->max_size())
 804f93c:	8b 45 08             	mov    0x8(%ebp),%eax
 804f93f:	89 04 24             	mov    %eax,(%esp)
 804f942:	e8 9f 00 00 00       	call   804f9e6 <_ZNK9__gnu_cxx13new_allocatorIdE8max_sizeEv>
 804f947:	3b 45 0c             	cmp    0xc(%ebp),%eax
 804f94a:	0f 92 c0             	setb   %al
 804f94d:	84 c0                	test   %al,%al
 804f94f:	74 05                	je     804f956 <_ZN9__gnu_cxx13new_allocatorIdE8allocateEjPKv+0x20>
	  std::__throw_bad_alloc();
 804f951:	e8 9a 9c ff ff       	call   80495f0 <_ZSt17__throw_bad_allocv@plt>

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 804f956:	8b 45 0c             	mov    0xc(%ebp),%eax
 804f959:	c1 e0 03             	shl    $0x3,%eax
 804f95c:	89 04 24             	mov    %eax,(%esp)
 804f95f:	e8 bc 9b ff ff       	call   8049520 <_Znwj@plt>
      }
 804f964:	c9                   	leave  
 804f965:	c3                   	ret    

0804f966 <_ZSt22__uninitialized_copy_aIPdS0_dET0_T_S2_S1_RSaIT1_E>:
	}
    }

  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 804f966:	55                   	push   %ebp
 804f967:	89 e5                	mov    %esp,%ebp
 804f969:	83 ec 18             	sub    $0x18,%esp
			   _ForwardIterator __result, allocator<_Tp>&)
    { return std::uninitialized_copy(__first, __last, __result); }
 804f96c:	8b 45 10             	mov    0x10(%ebp),%eax
 804f96f:	89 44 24 08          	mov    %eax,0x8(%esp)
 804f973:	8b 45 0c             	mov    0xc(%ebp),%eax
 804f976:	89 44 24 04          	mov    %eax,0x4(%esp)
 804f97a:	8b 45 08             	mov    0x8(%ebp),%eax
 804f97d:	89 04 24             	mov    %eax,(%esp)
 804f980:	e8 6b 00 00 00       	call   804f9f0 <_ZSt18uninitialized_copyIPdS0_ET0_T_S2_S1_>
 804f985:	c9                   	leave  
 804f986:	c3                   	ret    
 804f987:	90                   	nop

0804f988 <_ZN9__gnu_cxx13new_allocatorIdE7destroyEPd>:
      void 
      construct(pointer __p, const _Tp& __val) 
      { ::new((void *)__p) _Tp(__val); }

      void 
      destroy(pointer __p) { __p->~_Tp(); }
 804f988:	55                   	push   %ebp
 804f989:	89 e5                	mov    %esp,%ebp
 804f98b:	5d                   	pop    %ebp
 804f98c:	c3                   	ret    
 804f98d:	90                   	nop

0804f98e <_ZN9__gnu_cxx13new_allocatorIdEC1Ev>:
      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 2103. propagate_on_container_move_assignment
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 804f98e:	55                   	push   %ebp
 804f98f:	89 e5                	mov    %esp,%ebp
 804f991:	5d                   	pop    %ebp
 804f992:	c3                   	ret    

0804f993 <_ZNSt10_Iter_baseIPdLb0EE7_S_baseES0_>:
  // untouched
  template<typename _Iterator, bool _HasBase>
    struct _Iter_base
    {
      typedef _Iterator iterator_type;
      static iterator_type _S_base(_Iterator __it)
 804f993:	55                   	push   %ebp
 804f994:	89 e5                	mov    %esp,%ebp
      { return __it; }
 804f996:	8b 45 08             	mov    0x8(%ebp),%eax
 804f999:	5d                   	pop    %ebp
 804f99a:	c3                   	ret    

0804f99b <_ZSt12__niter_baseIPdENSt11_Niter_baseIT_E13iterator_typeES2_>:
    : _Iter_base<_Iterator, __is_normal_iterator<_Iterator>::__value>
    { };

  template<typename _Iterator>
    inline typename _Niter_base<_Iterator>::iterator_type
    __niter_base(_Iterator __it)
 804f99b:	55                   	push   %ebp
 804f99c:	89 e5                	mov    %esp,%ebp
 804f99e:	83 ec 18             	sub    $0x18,%esp
    { return std::_Niter_base<_Iterator>::_S_base(__it); }
 804f9a1:	8b 45 08             	mov    0x8(%ebp),%eax
 804f9a4:	89 04 24             	mov    %eax,(%esp)
 804f9a7:	e8 e7 ff ff ff       	call   804f993 <_ZNSt10_Iter_baseIPdLb0EE7_S_baseES0_>
 804f9ac:	c9                   	leave  
 804f9ad:	c3                   	ret    

0804f9ae <_ZSt22__copy_move_backward_aILb0EPdS0_ET1_T0_S2_S1_>:
	}
    };

  template<bool _IsMove, typename _BI1, typename _BI2>
    inline _BI2
    __copy_move_backward_a(_BI1 __first, _BI1 __last, _BI2 __result)
 804f9ae:	55                   	push   %ebp
 804f9af:	89 e5                	mov    %esp,%ebp
 804f9b1:	83 ec 28             	sub    $0x28,%esp
      typedef typename iterator_traits<_BI2>::value_type _ValueType2;
      typedef typename iterator_traits<_BI1>::iterator_category _Category;
      const bool __simple = (__is_trivial(_ValueType1)
	                     && __is_pointer<_BI1>::__value
	                     && __is_pointer<_BI2>::__value
			     && __are_same<_ValueType1, _ValueType2>::__value);
 804f9b4:	c6 45 f7 01          	movb   $0x1,-0x9(%ebp)

      return std::__copy_move_backward<_IsMove, __simple,
	                               _Category>::__copy_move_b(__first,
								 __last,
								 __result);
 804f9b8:	8b 45 10             	mov    0x10(%ebp),%eax
 804f9bb:	89 44 24 08          	mov    %eax,0x8(%esp)
 804f9bf:	8b 45 0c             	mov    0xc(%ebp),%eax
 804f9c2:	89 44 24 04          	mov    %eax,0x4(%esp)
 804f9c6:	8b 45 08             	mov    0x8(%ebp),%eax
 804f9c9:	89 04 24             	mov    %eax,(%esp)
 804f9cc:	e8 40 00 00 00       	call   804fa11 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIdEEPT_PKS3_S6_S4_>
    }
 804f9d1:	c9                   	leave  
 804f9d2:	c3                   	ret    

0804f9d3 <_ZN9__gnu_cxx14__alloc_traitsISaIdEE8max_sizeERKS1_>:

    static size_type max_size(const _Alloc& __a)
 804f9d3:	55                   	push   %ebp
 804f9d4:	89 e5                	mov    %esp,%ebp
 804f9d6:	83 ec 18             	sub    $0x18,%esp
    { return __a.max_size(); }
 804f9d9:	8b 45 08             	mov    0x8(%ebp),%eax
 804f9dc:	89 04 24             	mov    %eax,(%esp)
 804f9df:	e8 02 00 00 00       	call   804f9e6 <_ZNK9__gnu_cxx13new_allocatorIdE8max_sizeEv>
 804f9e4:	c9                   	leave  
 804f9e5:	c3                   	ret    

0804f9e6 <_ZNK9__gnu_cxx13new_allocatorIdE8max_sizeEv>:
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }

      size_type
      max_size() const _GLIBCXX_USE_NOEXCEPT
 804f9e6:	55                   	push   %ebp
 804f9e7:	89 e5                	mov    %esp,%ebp
      { return size_t(-1) / sizeof(_Tp); }
 804f9e9:	b8 ff ff ff 1f       	mov    $0x1fffffff,%eax
 804f9ee:	5d                   	pop    %ebp
 804f9ef:	c3                   	ret    

0804f9f0 <_ZSt18uninitialized_copyIPdS0_ET0_T_S2_S1_>:
   *
   *  Like copy(), but does not require an initialized output range.
  */
  template<typename _InputIterator, typename _ForwardIterator>
    inline _ForwardIterator
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 804f9f0:	55                   	push   %ebp
 804f9f1:	89 e5                	mov    %esp,%ebp
 804f9f3:	83 ec 18             	sub    $0x18,%esp
      typedef typename iterator_traits<_ForwardIterator>::value_type
	_ValueType2;

      return std::__uninitialized_copy<(__is_trivial(_ValueType1)
					&& __is_trivial(_ValueType2))>::
	__uninit_copy(__first, __last, __result);
 804f9f6:	8b 45 10             	mov    0x10(%ebp),%eax
 804f9f9:	89 44 24 08          	mov    %eax,0x8(%esp)
 804f9fd:	8b 45 0c             	mov    0xc(%ebp),%eax
 804fa00:	89 44 24 04          	mov    %eax,0x4(%esp)
 804fa04:	8b 45 08             	mov    0x8(%ebp),%eax
 804fa07:	89 04 24             	mov    %eax,(%esp)
 804fa0a:	e8 57 00 00 00       	call   804fa66 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPdS2_EET0_T_S4_S3_>
    }
 804fa0f:	c9                   	leave  
 804fa10:	c3                   	ret    

0804fa11 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIdEEPT_PKS3_S6_S4_>:
  template<bool _IsMove>
    struct __copy_move_backward<_IsMove, true, random_access_iterator_tag>
    {
      template<typename _Tp>
        static _Tp*
        __copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 804fa11:	55                   	push   %ebp
 804fa12:	89 e5                	mov    %esp,%ebp
 804fa14:	83 ec 28             	sub    $0x28,%esp
        {
	  const ptrdiff_t _Num = __last - __first;
 804fa17:	8b 55 0c             	mov    0xc(%ebp),%edx
 804fa1a:	8b 45 08             	mov    0x8(%ebp),%eax
 804fa1d:	29 c2                	sub    %eax,%edx
 804fa1f:	89 d0                	mov    %edx,%eax
 804fa21:	c1 f8 03             	sar    $0x3,%eax
 804fa24:	89 45 f4             	mov    %eax,-0xc(%ebp)
	  if (_Num)
 804fa27:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
 804fa2b:	74 28                	je     804fa55 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIdEEPT_PKS3_S6_S4_+0x44>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 804fa2d:	8b 45 f4             	mov    -0xc(%ebp),%eax
 804fa30:	c1 e0 03             	shl    $0x3,%eax
 804fa33:	8b 55 f4             	mov    -0xc(%ebp),%edx
 804fa36:	c1 e2 03             	shl    $0x3,%edx
 804fa39:	89 d1                	mov    %edx,%ecx
 804fa3b:	f7 d9                	neg    %ecx
 804fa3d:	8b 55 10             	mov    0x10(%ebp),%edx
 804fa40:	01 ca                	add    %ecx,%edx
 804fa42:	89 44 24 08          	mov    %eax,0x8(%esp)
 804fa46:	8b 45 08             	mov    0x8(%ebp),%eax
 804fa49:	89 44 24 04          	mov    %eax,0x4(%esp)
 804fa4d:	89 14 24             	mov    %edx,(%esp)
 804fa50:	e8 4b 9b ff ff       	call   80495a0 <memmove@plt>
	  return __result - _Num;
 804fa55:	8b 45 f4             	mov    -0xc(%ebp),%eax
 804fa58:	c1 e0 03             	shl    $0x3,%eax
 804fa5b:	f7 d8                	neg    %eax
 804fa5d:	89 c2                	mov    %eax,%edx
 804fa5f:	8b 45 10             	mov    0x10(%ebp),%eax
 804fa62:	01 d0                	add    %edx,%eax
	}
 804fa64:	c9                   	leave  
 804fa65:	c3                   	ret    

0804fa66 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPdS2_EET0_T_S4_S3_>:
  template<>
    struct __uninitialized_copy<true>
    {
      template<typename _InputIterator, typename _ForwardIterator>
        static _ForwardIterator
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 804fa66:	55                   	push   %ebp
 804fa67:	89 e5                	mov    %esp,%ebp
 804fa69:	83 ec 18             	sub    $0x18,%esp
		      _ForwardIterator __result)
        { return std::copy(__first, __last, __result); }
 804fa6c:	8b 45 10             	mov    0x10(%ebp),%eax
 804fa6f:	89 44 24 08          	mov    %eax,0x8(%esp)
 804fa73:	8b 45 0c             	mov    0xc(%ebp),%eax
 804fa76:	89 44 24 04          	mov    %eax,0x4(%esp)
 804fa7a:	8b 45 08             	mov    0x8(%ebp),%eax
 804fa7d:	89 04 24             	mov    %eax,(%esp)
 804fa80:	e8 02 00 00 00       	call   804fa87 <_ZSt4copyIPdS0_ET0_T_S2_S1_>
 804fa85:	c9                   	leave  
 804fa86:	c3                   	ret    

0804fa87 <_ZSt4copyIPdS0_ET0_T_S2_S1_>:
   *  Note that the end of the output range is permitted to be contained
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 804fa87:	55                   	push   %ebp
 804fa88:	89 e5                	mov    %esp,%ebp
 804fa8a:	53                   	push   %ebx
 804fa8b:	83 ec 14             	sub    $0x14,%esp
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_valid_range(__first, __last);

      return (std::__copy_move_a2<__is_move_iterator<_II>::__value>
	      (std::__miter_base(__first), std::__miter_base(__last),
	       __result));
 804fa8e:	8b 45 0c             	mov    0xc(%ebp),%eax
 804fa91:	89 04 24             	mov    %eax,(%esp)
 804fa94:	e8 10 fe ff ff       	call   804f8a9 <_ZSt12__miter_baseIPdENSt11_Miter_baseIT_E13iterator_typeES2_>
 804fa99:	89 c3                	mov    %eax,%ebx
 804fa9b:	8b 45 08             	mov    0x8(%ebp),%eax
 804fa9e:	89 04 24             	mov    %eax,(%esp)
 804faa1:	e8 03 fe ff ff       	call   804f8a9 <_ZSt12__miter_baseIPdENSt11_Miter_baseIT_E13iterator_typeES2_>
 804faa6:	8b 55 10             	mov    0x10(%ebp),%edx
 804faa9:	89 54 24 08          	mov    %edx,0x8(%esp)
 804faad:	89 5c 24 04          	mov    %ebx,0x4(%esp)
 804fab1:	89 04 24             	mov    %eax,(%esp)
 804fab4:	e8 06 00 00 00       	call   804fabf <_ZSt14__copy_move_a2ILb0EPdS0_ET1_T0_S2_S1_>
    }
 804fab9:	83 c4 14             	add    $0x14,%esp
 804fabc:	5b                   	pop    %ebx
 804fabd:	5d                   	pop    %ebp
 804fabe:	c3                   	ret    

0804fabf <_ZSt14__copy_move_a2ILb0EPdS0_ET1_T0_S2_S1_>:
    __copy_move_a2(istreambuf_iterator<_CharT, char_traits<_CharT> >,
		   istreambuf_iterator<_CharT, char_traits<_CharT> >, _CharT*);

  template<bool _IsMove, typename _II, typename _OI>
    inline _OI
    __copy_move_a2(_II __first, _II __last, _OI __result)
 804fabf:	55                   	push   %ebp
 804fac0:	89 e5                	mov    %esp,%ebp
 804fac2:	56                   	push   %esi
 804fac3:	53                   	push   %ebx
 804fac4:	83 ec 10             	sub    $0x10,%esp
    {
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
					     std::__niter_base(__last),
					     std::__niter_base(__result)));
 804fac7:	8b 45 10             	mov    0x10(%ebp),%eax
 804faca:	89 04 24             	mov    %eax,(%esp)
 804facd:	e8 c9 fe ff ff       	call   804f99b <_ZSt12__niter_baseIPdENSt11_Niter_baseIT_E13iterator_typeES2_>
 804fad2:	89 c6                	mov    %eax,%esi
 804fad4:	8b 45 0c             	mov    0xc(%ebp),%eax
 804fad7:	89 04 24             	mov    %eax,(%esp)
 804fada:	e8 bc fe ff ff       	call   804f99b <_ZSt12__niter_baseIPdENSt11_Niter_baseIT_E13iterator_typeES2_>
 804fadf:	89 c3                	mov    %eax,%ebx
 804fae1:	8b 45 08             	mov    0x8(%ebp),%eax
 804fae4:	89 04 24             	mov    %eax,(%esp)
 804fae7:	e8 af fe ff ff       	call   804f99b <_ZSt12__niter_baseIPdENSt11_Niter_baseIT_E13iterator_typeES2_>
 804faec:	89 74 24 08          	mov    %esi,0x8(%esp)
 804faf0:	89 5c 24 04          	mov    %ebx,0x4(%esp)
 804faf4:	89 04 24             	mov    %eax,(%esp)
 804faf7:	e8 50 00 00 00       	call   804fb4c <_ZSt13__copy_move_aILb0EPdS0_ET1_T0_S2_S1_>
    }
 804fafc:	83 c4 10             	add    $0x10,%esp
 804faff:	5b                   	pop    %ebx
 804fb00:	5e                   	pop    %esi
 804fb01:	5d                   	pop    %ebp
 804fb02:	c3                   	ret    

0804fb03 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIdEEPT_PKS3_S6_S4_>:
  template<bool _IsMove>
    struct __copy_move<_IsMove, true, random_access_iterator_tag>
    {
      template<typename _Tp>
        static _Tp*
        __copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 804fb03:	55                   	push   %ebp
 804fb04:	89 e5                	mov    %esp,%ebp
 804fb06:	83 ec 28             	sub    $0x28,%esp
        {
	  const ptrdiff_t _Num = __last - __first;
 804fb09:	8b 55 0c             	mov    0xc(%ebp),%edx
 804fb0c:	8b 45 08             	mov    0x8(%ebp),%eax
 804fb0f:	29 c2                	sub    %eax,%edx
 804fb11:	89 d0                	mov    %edx,%eax
 804fb13:	c1 f8 03             	sar    $0x3,%eax
 804fb16:	89 45 f4             	mov    %eax,-0xc(%ebp)
	  if (_Num)
 804fb19:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
 804fb1d:	74 1c                	je     804fb3b <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIdEEPT_PKS3_S6_S4_+0x38>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 804fb1f:	8b 45 f4             	mov    -0xc(%ebp),%eax
 804fb22:	c1 e0 03             	shl    $0x3,%eax
 804fb25:	89 44 24 08          	mov    %eax,0x8(%esp)
 804fb29:	8b 45 08             	mov    0x8(%ebp),%eax
 804fb2c:	89 44 24 04          	mov    %eax,0x4(%esp)
 804fb30:	8b 45 10             	mov    0x10(%ebp),%eax
 804fb33:	89 04 24             	mov    %eax,(%esp)
 804fb36:	e8 65 9a ff ff       	call   80495a0 <memmove@plt>
	  return __result + _Num;
 804fb3b:	8b 45 f4             	mov    -0xc(%ebp),%eax
 804fb3e:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
 804fb45:	8b 45 10             	mov    0x10(%ebp),%eax
 804fb48:	01 d0                	add    %edx,%eax
	}
 804fb4a:	c9                   	leave  
 804fb4b:	c3                   	ret    

0804fb4c <_ZSt13__copy_move_aILb0EPdS0_ET1_T0_S2_S1_>:
    };

  template<bool _IsMove, typename _II, typename _OI>
    inline _OI
    __copy_move_a(_II __first, _II __last, _OI __result)
 804fb4c:	55                   	push   %ebp
 804fb4d:	89 e5                	mov    %esp,%ebp
 804fb4f:	83 ec 28             	sub    $0x28,%esp
      typedef typename iterator_traits<_OI>::value_type _ValueTypeO;
      typedef typename iterator_traits<_II>::iterator_category _Category;
      const bool __simple = (__is_trivial(_ValueTypeI)
	                     && __is_pointer<_II>::__value
	                     && __is_pointer<_OI>::__value
			     && __are_same<_ValueTypeI, _ValueTypeO>::__value);
 804fb52:	c6 45 f7 01          	movb   $0x1,-0x9(%ebp)

      return std::__copy_move<_IsMove, __simple,
	                      _Category>::__copy_m(__first, __last, __result);
 804fb56:	8b 45 10             	mov    0x10(%ebp),%eax
 804fb59:	89 44 24 08          	mov    %eax,0x8(%esp)
 804fb5d:	8b 45 0c             	mov    0xc(%ebp),%eax
 804fb60:	89 44 24 04          	mov    %eax,0x4(%esp)
 804fb64:	8b 45 08             	mov    0x8(%ebp),%eax
 804fb67:	89 04 24             	mov    %eax,(%esp)
 804fb6a:	e8 94 ff ff ff       	call   804fb03 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIdEEPT_PKS3_S6_S4_>
    }
 804fb6f:	c9                   	leave  
 804fb70:	c3                   	ret    
 804fb71:	66 90                	xchg   %ax,%ax
 804fb73:	66 90                	xchg   %ax,%ax
 804fb75:	66 90                	xchg   %ax,%ax
 804fb77:	66 90                	xchg   %ax,%ax
 804fb79:	66 90                	xchg   %ax,%ax
 804fb7b:	66 90                	xchg   %ax,%ax
 804fb7d:	66 90                	xchg   %ax,%ax
 804fb7f:	90                   	nop

0804fb80 <__libc_csu_init>:
 804fb80:	55                   	push   %ebp
 804fb81:	57                   	push   %edi
 804fb82:	31 ff                	xor    %edi,%edi
 804fb84:	56                   	push   %esi
 804fb85:	53                   	push   %ebx
 804fb86:	e8 c5 9b ff ff       	call   8049750 <__x86.get_pc_thunk.bx>
 804fb8b:	81 c3 75 44 00 00    	add    $0x4475,%ebx
 804fb91:	83 ec 1c             	sub    $0x1c,%esp
 804fb94:	8b 6c 24 30          	mov    0x30(%esp),%ebp
 804fb98:	8d b3 ec fe ff ff    	lea    -0x114(%ebx),%esi
 804fb9e:	e8 b9 96 ff ff       	call   804925c <_init>
 804fba3:	8d 83 c8 fe ff ff    	lea    -0x138(%ebx),%eax
 804fba9:	29 c6                	sub    %eax,%esi
 804fbab:	c1 fe 02             	sar    $0x2,%esi
 804fbae:	85 f6                	test   %esi,%esi
 804fbb0:	74 27                	je     804fbd9 <__libc_csu_init+0x59>
 804fbb2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 804fbb8:	8b 44 24 38          	mov    0x38(%esp),%eax
 804fbbc:	89 2c 24             	mov    %ebp,(%esp)
 804fbbf:	89 44 24 08          	mov    %eax,0x8(%esp)
 804fbc3:	8b 44 24 34          	mov    0x34(%esp),%eax
 804fbc7:	89 44 24 04          	mov    %eax,0x4(%esp)
 804fbcb:	ff 94 bb c8 fe ff ff 	call   *-0x138(%ebx,%edi,4)
 804fbd2:	83 c7 01             	add    $0x1,%edi
 804fbd5:	39 f7                	cmp    %esi,%edi
 804fbd7:	75 df                	jne    804fbb8 <__libc_csu_init+0x38>
 804fbd9:	83 c4 1c             	add    $0x1c,%esp
 804fbdc:	5b                   	pop    %ebx
 804fbdd:	5e                   	pop    %esi
 804fbde:	5f                   	pop    %edi
 804fbdf:	5d                   	pop    %ebp
 804fbe0:	c3                   	ret    
 804fbe1:	eb 0d                	jmp    804fbf0 <__libc_csu_fini>
 804fbe3:	90                   	nop
 804fbe4:	90                   	nop
 804fbe5:	90                   	nop
 804fbe6:	90                   	nop
 804fbe7:	90                   	nop
 804fbe8:	90                   	nop
 804fbe9:	90                   	nop
 804fbea:	90                   	nop
 804fbeb:	90                   	nop
 804fbec:	90                   	nop
 804fbed:	90                   	nop
 804fbee:	90                   	nop
 804fbef:	90                   	nop

0804fbf0 <__libc_csu_fini>:
 804fbf0:	f3 c3                	repz ret 

Disassembly of section .fini:

0804fbf4 <_fini>:
 804fbf4:	53                   	push   %ebx
 804fbf5:	83 ec 08             	sub    $0x8,%esp
 804fbf8:	e8 53 9b ff ff       	call   8049750 <__x86.get_pc_thunk.bx>
 804fbfd:	81 c3 03 44 00 00    	add    $0x4403,%ebx
 804fc03:	83 c4 08             	add    $0x8,%esp
 804fc06:	5b                   	pop    %ebx
 804fc07:	c3                   	ret    
